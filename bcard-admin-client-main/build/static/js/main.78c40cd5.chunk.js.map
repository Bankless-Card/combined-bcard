{"version":3,"sources":["components/Header.js","components/Users.js","utils/convertToCAD.js","services/UserService.js","components/Accounts.js","components/Transactions.js","utils/adminWhitelist.js","components/DisplayBoard.js","components/CreateUser.js","services/feesAccounts.js","components/TradeForm.js","components/SwapForm.js","components/TransferForm.js","components/FaucetForm.js","services/BcardApi.js","services/TatumSecured.js","services/firebase.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Users","users","length","userTable","map","user","index","key","firstName","lastName","email","UserRow","convertToCAD","amount","currency","state","rate","includes","console","log","startsWith","prices","btc","bank","usd","eth","chf","cad","getCustomers","fetch","response","json","getAccount","id","getVC","name","showTrades","getBalance","list","runTotal","acct","BTCprice","ETHprice","CHFprice","USDprice","BANKprice","currencyId","substring","baseCurrency","balInit","balance","accountBalance","balConv","parseFloat","newBTCMaster","newBTCAccount","data","xpub","method","headers","body","JSON","stringify","newUSDWallet","userId","getEthAddress","acctId","newWalletAddress","walletAddressInfo","getAllUsers","createUser","Accounts","hideId","accounts","account_list","account","type","onClick","title","acctAddress","returnData","walletAddress","address","alert","availableBalance","toFixed","AcctRow","base","Transactions","adminWhitelist","niceFiatFromString","priceString","digits","PriceBar","props","e","getPrices","DisplayBoard","createTrade","newWalletKey","newETHWallet","onboardExecute","newXpubAccount","ref","useRef","qrImg","custId","src","alt","href","rel","target","buyOrders","sellOrders","style","marginLeft","spacing","marginBottom","hasVISA","hasDAO","current","value","uid","CreateUser","onChangeForm","createNewUser","loginUser","htmlFor","disabled","onChange","aria-describedby","placeholder","feesAccts","i","feesAcctUSD","USD","feesAcctETH","ETH","feesAcctBANK","BANK","price","acct1","acct2","feeAccount","account1Id","account2Id","feeAmount","trade_conf","status","TradeForm","useState","inputs","setInputs","handleChange","event","selectedCurrency","document","getElementById","curVal","curText","options","selectedIndex","text","values","placeholderAmount","placeholderPrice","onSubmit","oldestAcct","currencies","preventDefault","defaultValue","sort","a","b","data-index","feesAcctUSDC","USDC","selectedCurrencyOut","tokenOut","selectedCurrencyIn","tokenIn","mmAccountUSDC","mmAccountUSD","mmAccountBANK","data2","mmAccountETH","recipientAccountId","senderAccountId","toString","responseTwo","SwapForm","currencyOut","currencyIn","createSwap","transfer_conf","TransferForm","createTransfer","FaucetForm","createFaucet","undefined","tokenOverride","responseXpub","input","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","provider","getFirestore","GoogleAuthProvider","setCustomParameters","prompt","auth","getAuth","signInWithEAndP","password","signInWithEmailAndPassword","then","userCredential","catch","error","errorMessage","message","createUserWithEAndP","createUserWithEmailAndPassword","GetUniqueCust","TradeTableView","list_of_trades","trades","TradeRow","trade","pair","fill","time","created","tradeTable","App","signedIn","customers","currentVC","acctTx","userMap","Map","numberOfUsers","uniqCust","Set","setState","pw","account_info","mnemonic","EXT_ID","customerId","forEach","cust","externalId","accountingCurrency","info","key_data","vcDetail","useAcct","thisAccount","result","window","location","reload","prevProps","prevState","snapshot","onAuthStateChanged","this","signOut","customer","extId","customerCountry","supply","basePair","baseRate","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.78c40cd5.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Header = () => {\n    return(\n        <div className=\"header\">\n            <h1>Bankless Card Client</h1>\n        </div>\n    )\n}","import React from 'react'\n\nexport const Users = ({users}) => {\n\n    // console.log('users length:::', users.length)\n    if (users.length === 0) return null\n\n    const UserRow = (user,index) => {\n\n        return(\n              <tr key = {index} className={index%2 === 0?'odd':'even'}>\n                  <td>{index + 1}</td>\n                  <td>{user.firstName}</td>\n                  <td>{user.lastName}</td>\n                  <td>{user.email}</td>\n              </tr>\n          )\n    }\n\n    const userTable = users.map((user,index) => UserRow(user,index))\n\n    return(\n        <div className=\"container\">\n            <h2>Users</h2>\n            <table className=\"table table-bordered\">\n                <thead>\n                <tr>\n                    <th>User Id</th>\n                    <th>Firstname</th>\n                    <th>Lastname</th>\n                    <th>Email</th>\n                </tr>\n                </thead>\n                <tbody>\n                    {userTable}\n                </tbody>\n            </table>\n        </div>\n    )\n}","export function convertToCAD(amount, currency, state) {\n\n  // console.log(amount, currency);    // , state);\n  // currency also can receive pair from trades\n\n  // MIGRATE TO convertToFIAT when all good.\n\n  let rate = 1;   // default to 1-1 token rate\n\n  // catch and reject all undefined requests for price conversion \n  if(currency) {\n\n    if(currency.includes(\"/\")) {\n      console.log(\"It's a pair price instead for trades - FIX req.\");\n\n      // add in pairs quotes here\n      if(currency.startsWith(\"BTC/VC_\")) {\n        // it's a BTC Trade for FIAT\n        rate = state.prices.btc || 27111;\n      } else if(currency.startsWith(\"BTC/\")) {\n        // it's a BTC trade for Crypto\n      } else if(currency.startsWith(\"BANK/\")) {\n        // it's a BANK trade for FIAT\n        rate = state.prices.bank;\n      } else if(currency === \"VC_USD/VC_CAD\") {\n        rate = state.prices.usd;\n      } \n\n    } else if(currency === \"ETH\") {\n      rate = state.prices.eth || 2111;\n    } else if(currency === \"BTC\" ) {\n      rate = state.prices.btc || 27111;\n    } else if (currency === \"VC_USD\" || currency === \"USDC\" || currency === \"USDC_V\") {\n      rate = state.prices.usd || 1.3;\n    } else if (currency === \"VC_CHF\" || currency === \"VC_CHF/VC_CAD\") {\n      rate = state.prices.chf || 1.3;\n    } else if (currency === \"BANK\" || currency === \"BANK/VC_CAD\") {\n      rate = state.prices.bank || 0.1;\n    } else if (currency === \"VC_CAD\" ) {\n      rate = state.prices.cad || 0.8;\n    } else {\n      console.log(\"Not in set of matched prices.\");\n    }\n\n    //finish result \n    // console.log(currency, state.prices,rate,amount*rate);\n    return amount * rate;\n\n\n  } else {\n    console.log(\"Check call, currency is UNDEFINED.\");\n    return 0;\n  }\n\n\n}","\n/** getPrices in BcardApi.js **/\n\n// list functions is access/use order\n\n// user login - firebase auth\n\n// getCustomers:\n// getAccounts:\n// \n\n\n// returning users (autologin) - auth from state\n\n// getCustomers: logged-in user ID matchup with CustID for tatum internal system\n\nexport async function getLedgerAccounts() {\n\n    const response = await fetch('/api/ledgeraccounts');\n    // console.log(response);\n    return await response.json();\n}\n\nexport async function getCustomers() {\n\n    console.log(\"Running getCustomers\");\n\n    const response = await fetch('/api/customers');\n    return await response.json();\n}\n\nexport async function getAccount(id) {\n\n    console.log(\"Running getAccount\");        // id here is CustID\n\n    const response = await fetch('/api/account/'+ id );\n    // console.log(response);                  // these are logging OK to console, but are not being displayed for third acct.\n    return await response.json();\n}\n\nexport async function getVC(name) {\n\n    console.log(name);\n\n    const response = await fetch('/api/vc/'+ name );\n    console.log(response);\n    return await response.json();\n}\n\nexport async function createTrade(data) {\n\n    console.log(data);\n\n    const response = await fetch(`/api/trade`, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(data)\n      })\n    return await response;\n}\n\nexport async function showTrades() {\n\n    const response = await fetch('/api/trades' );\n    // console.log(response);\n    console.log(\"function showTrades fetched from /api/trades\");\n    return await response.json();\n}\n\nexport async function getBalance(list, state) {\n    // console.log(list, state);\n\n    let myAccounts = list;\n    let runTotal = 0;\n\n    // map allows forEach account, do a thing\n    myAccounts.map(\n        (acct)=>{\n\n            // console.log(acct);\n            let BTCprice,\n                ETHprice,\n                CHFprice,\n                USDprice,\n                BANKprice = 0;\n\n          let currencyId = acct.currency\n          if( acct.currency.startsWith(\"VC_\") ) {\n            // console.log('hotfix');\n            currencyId = currencyId.substring(3);               // remove the VC to get the FIAT FX\n          }\n\n          // this will depend on default currency (CAD in my case)\n\n          // console.log(state.prices)\n          // console.log(state.baseCurrency)\n          if(state.prices.length < 1) {\n            // no prices yet...\n            console.log(\"Placeholder CAD Hardcoded\",state.prices);\n\n            BTCprice = 21741;\n            ETHprice = 1526;\n            CHFprice = 1.404;\n            USDprice = 1.341;\n            BANKprice = 0.1;\n\n          } else {\n            // e.g. if BASEprice is 1, account BASE is set to CAD, then \n              // prices should be listed/displayed in home currency\n\n              const BASEprice = 1;\n\n              if(state.baseCurrency === \"USD\"){\n                // usd defaults - hard coded if prices not set\n                   BTCprice = state.prices.btc || 16104/BASEprice;\n                   ETHprice = state.prices.eth || 1124/BASEprice;\n                   CHFprice = state.prices.chf || 1.0/BASEprice;\n                   USDprice = state.prices.usd || 1.043/BASEprice;\n                   BANKprice = state.prices.bank || 0.08/BASEprice;\n              } else {\n                // cad defaults\n                   BTCprice = state.prices.btc || 21741/BASEprice;\n                   ETHprice = state.prices.eth || 1526/BASEprice;\n                   CHFprice = state.prices.chf || 1.404/BASEprice;\n                   USDprice = state.prices.usd || 1.341/BASEprice;\n                   BANKprice = state.prices.bank || 0.1/BASEprice;\n              }\n\n              \n\n\n              let balInit = acct.balance.accountBalance;\n              let balConv = parseFloat(balInit);  //* parseFloat(BTCprice);\n              // let thisPrice = CADprice;\n\n              // console.log(currencyId);\n\n              if(currencyId === \"BTC\") {\n                balConv = parseFloat(balInit) * parseFloat(BTCprice);\n              } else if(currencyId === \"ETH\"){\n                balConv = parseFloat(balInit) * parseFloat(ETHprice);\n              } else if(currencyId === \"CHF\") {\n                balConv = parseFloat(balInit) * parseFloat(CHFprice);\n              } else if(currencyId === \"USD\") {\n                balConv = parseFloat(balInit) * parseFloat(USDprice);\n              } else if(currencyId === \"BANK\") {\n                balConv = parseFloat(balInit) * parseFloat(BANKprice);\n              }\n\n              // console.log(balConv);\n\n              runTotal = runTotal + balConv;        // sum total in default currency (CAD)\n\n              return runTotal;\n          }\n\n        return runTotal;                // return sum on price failure\n\n\n      });\n\n    return runTotal;                // return sum when completed\n}\n\nexport async function newBTCMaster(){\n    const response = await fetch('/api/bitcoin/wallet');\n    console.log(response);\n    return await response.json();\n}\n\nexport async function newBTCAccount(data) {\n\n    console.log(data);\n\n    if(data.xpub === \"\"){\n        // fail without xpub - this is ok for internal accounts without blockchain/wallet required, but YMMV\n        return false;\n    }\n\n    const response = await fetch('/api/ledger/account', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(data)\n      });\n    // console.log(response);\n    // return await response.json();\n    return await response;\n}\n\nexport async function newUSDWallet(userId) {\n\n    console.log(userId);\n    \n    if(userId === \"\"){\n        // fail without xpub - this is ok for internal accounts without blockchain/wallet required, but YMMV\n        return false;\n    }\n\n    let data = {\n        \"currency\": \"VC_USD\",\n        \"customer\": {\n            \"accountingCurrency\": \"USD\",            \n            \"externalId\": userId,                  \n        },\n        \"accountingCurrency\": \"USD\"\n    }\n\n    const response = await fetch('/api/ledger/account/', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(data)\n      });\n\n    console.log(response);\n    return await response;\n}\n\n\n\nexport async function getEthAddress(acctId, index) {\n\n    console.log(acctId, index);\n\n    const response = await fetch('/api/ethereum/address/'+acctId+'/'+index );\n    console.log(response);\n    return await response.json();\n}\n\nexport async function newWalletAddress(id) {\n\n    console.log(id);\n\n    if(id === \"accountId\") {\n        // default account id is for BCARD_FEES BTC account with id: 636bb54f5f95f8f981cbc519\n        id = \"636bb54f5f95f8f981cbc519\";\n    }\n\n    const response = await fetch('/api/address/account/'+ id );\n    console.log(response);\n    return await response.json();\n}\n\nexport async function walletAddressInfo(id) {\n    console.log(id);\n\n\n    if(id === \"accountId\") {\n        // default account id is for BCARD_FEES BTC account with id: 636bb54f5f95f8f981cbc519\n        id = \"636bb54f5f95f8f981cbc519\";\n    }\n\n    const response = await fetch('/api/ledger/account/'+ id );\n\n    // let jsr = response.json();\n        console.log(\"Implement QR output here...\");\n\n\n    console.log(response);\n    return await response.json();\n}\n\n\n\n/********************************* Obsolete? ******************************/\n\nexport async function getAllUsers() {\n\n    const response = await fetch('/api/users');\n    return await response.json();\n}\n\n\nexport async function createUser(data) {\n    const response = await fetch(`/api/user`, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({user: data})\n      })\n    return await response.json();\n}","import React from 'react'\n\nimport {convertToCAD} from '../utils/convertToCAD'\nimport {walletAddressInfo} from '../services/UserService'\n\nexport const Accounts = ({state, hideId}) => {\n\n    let accounts = state.account_list;\n\n    if (accounts.length === 0) {\n        // console.log('accounts length:::', accounts.length)\n        return null;\n    } else {\n        // console.log('accounts length:::', accounts.length)\n    }\n\n    const AcctRow = (account,index) => {\n\n        return(\n              <tr key = {index} className={index%2 === 0?'odd':'even'}>\n                  <td>{index + 1}</td>\n                  { !hideId && \n                    <td>\n                    <button \n                      type=\"btn\"\n                      onClick={() =>  {\n                        // this.setState({acctId: account.id}); \n                        console.log(\"NOT SHOWN: Need to setState with click here -> emit event?\");\n                        // also popup account info alert panel\n                        walletAddressInfo(account.id);\n                      }} >\n                      \n                      {account.id}\n                    </button></td> \n                  }\n                  <td title={ state.acctAddress || \"SHOW WALLET ADDRESS ON HOVER: \" }>\n                    <button \n                      type=\"btn\"\n                      onClick={async () => {\n                        let returnData = await walletAddressInfo(account.id);\n                        console.log(returnData);\n                        if(returnData[0]) {\n\n                            let walletAddress = returnData[0].address\n                            alert(\"Address is:\" + walletAddress);\n                            console.log(\"Need to setState here to set address & QR\");\n                            console.log(state);\n                            \n                            // this.setState((state) => {\n                            //     return {acctAddress: walletAddress}     // override state with new addr\n                            // })\n                        } else {\n                            console.log(\"It's a FIAT account - likely - or no addresses created\");\n                        }\n                        \n                      }} >\n                        {account.currency}\n                    </button>\n                  </td>\n                  <td>{account.balance.availableBalance}</td>\n                  <td>$ { convertToCAD(account.balance.accountBalance,account.currency,state).toFixed(3) }</td>\n              </tr>\n          )\n    }\n\n    const userTable = accounts.map((user,index) => AcctRow(user,index))\n\n    return(\n        <div className=\"container\">\n            <h2>Accounts</h2>\n            <table className=\"table table-bordered\">\n                <thead>\n                <tr>\n                    <th>Account #</th>\n                    { !hideId && <th>id</th> }\n                    <th>currency</th>\n                    <th>token</th>\n                    <th>{state.prices.base} balance</th>\n                </tr>\n                </thead>\n                <tbody>\n                    {userTable}\n                </tbody>\n            </table>\n        </div>\n    )\n}","import React from 'react'\n\nimport {convertToCAD} from '../utils/convertToCAD'\n// import {walletAddressInfo} from '../services/UserService'\n\nexport const Transactions = ({state, hideId}) => {\n\n    let accounts = state.account_list;\n\n    if (accounts.length === 0) {\n        // console.log('accounts length:::', accounts.length)\n        return null;\n    } else {\n        // console.log('accounts length:::', accounts.length)\n    }\n\n    const AcctRow = (account,index) => {\n\n        return(\n              <tr key = {index} className={index%2 === 0?'odd':'even'}>\n                  <td>{index + 1}</td>\n                  { !hideId && \n                    <td>\n                    <button \n                      type=\"btn\"\n                      onClick={() =>  {\n                        // this.setState({acctId: account.id}); \n                        console.log(\"NOT SHOWN: Need to setState with click here -> emit event?\");\n                        // also popup account info alert panel\n                        // walletAddressInfo(account.id);\n                      }} >\n                      \n                      {account.id}\n                    </button></td> \n                  }\n                  <td title={ state.acctAddress || \"SHOW WALLET ADDRESS ON HOVER: \" }>\n                    <button \n                      type=\"btn\"\n                      onClick={async () => {} } >\n                        {account.currency}\n                    </button>\n                  </td>\n                  <td>{account.balance.availableBalance}</td>\n                  <td>$ { convertToCAD(account.balance.accountBalance,account.currency,state).toFixed(3) }</td>\n              </tr>\n          )\n    }\n\n    const userTable = accounts.map((user,index) => AcctRow(user,index))\n\n    return(\n        <div className=\"container\">\n            <p>Select Wallet to Display Transactions</p>\n            <h5>TBD: List of ETH transactions (public chain)</h5>\n            <h5>TBD: List of ETH internal transactions (tatum)</h5>\n            <h2>Transactions</h2>\n            <table className=\"table table-bordered\">\n                <thead>\n                <tr>\n                    <th>Account #</th>\n                    <th>id</th>\n                    <th>currency</th>\n                    <th>token</th>\n                    <th>{state.prices.base} balance</th>\n                </tr>\n                </thead>\n                <tbody>\n                    {userTable}\n                </tbody>\n            </table>\n        </div>\n    )\n}","let adminWhitelist = [\n\t\"6388bcb873184d447e74ac70\",\t\t//testnet service account\n\n\t\"6357fa3d7511407e6d732fe4\",\t\t// mainnet original service account\n\t\"tom@tranmer.ca\",\n];\n\nexport { adminWhitelist };","import React, {useRef} from 'react'\nimport { Accounts } from './Accounts'\nimport { Transactions } from './Transactions'\n\nimport {adminWhitelist} from '../utils/adminWhitelist'\n\n\nlet spacing = 5;\n\nfunction niceFiatFromString(priceString, digits) {\n    if(digits) return \"$\" + parseFloat(priceString).toFixed(digits);\n    return \"$\" + parseFloat(priceString).toFixed(3);        // 3 default\n}\n\nfunction PriceBar(props) {\n  // console.log(props.state);\n  // console.log(props.state.prices)\n\n  // Confirm CAD as price base or adjust\n  if(props.state.baseCurrency === \"CAD\" || props.state.baseCurrency === \"USD\"){             //props.state.prices.base === \"CAD\"\n    return (\n      <>\n        {/*<h4>{props.state.prices.eth} {props.state.prices.btc} {props.state.prices.usd} {props.state.prices.chf}</h4>*/}\n        <div className=\"container text-center priceBoxes\">\n            <div className=\"row\">\n                <div className=\"col top\">\n                    <h4>currencyBase => {props.state.prices.base}</h4>\n                </div>\n            </div>\n          <div className=\"row\">\n            <div className=\"col order-1\">\n              ETH<br />\n              { niceFiatFromString(props.state.prices.eth) }\n            </div>\n            <div className=\"col order-2\">\n              BTC<br />\n              { niceFiatFromString(props.state.prices.btc) }\n            </div>\n            <div className=\"col order-3\">\n              BANK<br />\n              { niceFiatFromString(props.state.prices.bank, 4) }\n            </div>\n            <div className=\"col order-4\">\n              USD<br />\n              { niceFiatFromString(props.state.prices.usd) }\n            </div>\n            <div className=\"col order-5\">\n              CHF<br />\n              { niceFiatFromString(props.state.prices.chf) }\n            </div>\n          </div>\n        </div>\n      </>\n    )\n  } else {\n    return (\n      <h4>Login & Complete onboarding to <button type=\"button\" onClick={ (e) => props.getPrices() } >Get Prices</button></h4>)\n  }\n\n  \n}\n\n\nexport const DisplayBoard = ({ state, getAllUsers, getPrices, getAccount, getBalance, getCustomers, createTrade, showTrades, newBTCMaster, newBTCAccount, newWalletAddress, getEthAddress, walletAddressInfo, newWalletKey, newUSDWallet, newETHWallet, onboardExecute, newXpubAccount}) => {\n\n        const ref = useRef(null);\n\n        // console.log(adminWhitelist);\n\n        // state for component - testing\n        // state = {}\n\n        // setState({ signedIn: true });\n\n        // console.log(this.state);\n\n        // determine if user already has a VISA account\n\n\n\n        // determine if user already has a BANK token account\n\n\n\n\n        let qrImg = \"No Wallet Selected - Click Account to display QR.\";\n        let sepoliaTestnet = \"Need Sepolia ETH? Fund Your Address Here:\";\n        if(state.acctAddress){\n            qrImg = \"https://api.qrserver.com/v1/create-qr-code/?data=\" + state.acctAddress + \"&amp;size=150x150\";\n        }\n\n    return(\n        <div>\n            <PriceBar state={state} getPrices={getPrices} />\n            <div className=\"display-board\">\n                <div>\n                    <h6>CustomerId: {state.custId || \"[not set]\" }</h6>\n                    <small>Customer view area</small>\n                    <hr />\n                    <div className=\"number\">\n                        Balance: ${state.balance ? state.balance.toFixed(2) : \"[...loading...]\"} <small>{state.prices.base}</small>\n                    </div>\n                    {/* <!-- Accounts list conditinally loaded here --> **/}\n                    <div className=\"row\">\n                      <Accounts state={state} hideId={true} walletAddressInfo={walletAddressInfo} />\n                    </div>\n\n                    {state.acctAddress ?\n                        <div className=\"row\">\n                            <div className=\"qrContainer\">\n                                <h3>Selected Wallet QR</h3>\n                                <img src={qrImg} alt={\"Wallet Address QR for \" + state.acctAddress} title={state.acctAddress} />\n                                <p><strong>Public Address:</strong><br />{state.acctAddress}</p>\n                            </div>\n                        </div> :\n                        <div className=\"row\">\n                            {qrImg}\n                            <a href=\"https://faucet.sepolia.dev/\" rel=\"noopener noreferrer\" target=\"_blank\">{sepoliaTestnet}</a>\n                        </div> \n                    }\n\n                    {/* <!-- Transactions list conditinally loaded here --> **/}\n                    <div className=\"row\">\n                        {state.acctAddress ?\n                            <Transactions state={state} hideId={true} walletAddressInfo={walletAddressInfo} /> :\n                            <p>- Select Account to view transactions</p>\n                        }\n                    </div>\n\n                    <hr />\n                    <fieldset>\n                        {state.custId &&\n                        <div>\n                            <h4> Open Book has {state.buyOrders.length + state.sellOrders.length} (buy+sell) active trades. </h4>\n                            <p>\n                                <button \n                                    type=\"button\" \n                                    onClick={(e) => getPrices()} \n                                    className=\"btn btn-warning\"\n                                    title=\"Refresh internal token prices manually\"\n                                    >   \n                                        Refresh Prices\n                                </button>\n                                <button \n                                    type=\"button\" \n                                    style={{marginLeft: spacing + \"px\"}} \n                                    onClick={(e) => showTrades()} \n                                    className=\"btn btn-warning\">\n                                        Refresh Trades\n                                </button>\n                                <button \n                                    type=\"button\" \n                                    style={{marginLeft: spacing + \"px\"}} \n                                    onClick={ (e) => getAccount(state.custId) } \n                                    className=\"btn btn-warning\">\n                                        Refresh Accounts\n                                </button>\n                                 {/*<button \n                                    type=\"button\" \n                                    style={{marginLeft: spacing + \"px\"}} \n                                    onClick={(e) => createTrade(\"BUY\", \"VC_CHF\", \"3.75\", \"1.325\")} \n                                    className=\"btn btn-warning\">\n                                        Create Sample Trade: BUY (VC_CHF, 3.75, 1.325)\n                                </button>\n                                 <button \n                                    type=\"button\" \n                                    style={{marginLeft: spacing + \"px\"}} \n                                    onClick={(e) => createTrade(\"SELL\", \"VC_USD\", \"11.25\", \"1.325\")} \n                                    className=\"btn btn-warning\">\n                                        Create Sample Trade: SELL (VC_USD, 11.25, 1.325)\n                                </button>*/}\n\n                            </p>\n                        </div>\n                      }\n                \n\n                    </fieldset>\n                </div>\n\n                <hr />\n\n                <div className=\"btn-container\">\n                    \n                    <h4>TATUM System Controls -> for {state.user.email}</h4>\n\n                    {/* user is logged in BUT not assigned a custID - ONBOARDING */}\n                    {!state.custId && state.user && \n                        <>\n                            <button \n                                type=\"button\" \n                                onClick={() => onboardExecute()} \n                                style={{marginLeft: spacing + \"px\", marginBottom:\"10px\"}} \n                                className=\"btn btn-primary\"\n                                title=\"Setup new user with USD wallet and ETH wallet & address for input\"\n                                >   \n                                    Onboard New User (create FIAT, ETH wallets)\n                            </button>\n\n                            {/*<button \n                                type=\"button\" \n                                onClick={() => console.log(\"IMPORT USING MNEMONIC\")} \n                                style={{marginLeft: spacing + \"px\", marginBottom:\"10px\"}} \n                                className=\"btn btn-warning\"\n                                title=\"Import your own Non-Custodial Wallet\"\n                                >   \n                                    Import Wallet (NC)\n                            </button>*/}\n                        </>\n                    }\n\n                {state.custId && <>\n\n                    {!state.hasVISA &&\n\n                            <button \n                                type=\"button\"\n                                style={{marginLeft: spacing + \"px\"}}\n                                className=\"btn btn-secondary\"\n                                onClick={(e) => newETHWallet('usdc')} \n                                >\n                                    New VISA (USDC Wallet)\n                            </button>  \n\n                    }\n                    {!state.hasDAO &&\n\n                            <button \n                                type=\"button\"\n                                style={{marginLeft: spacing + \"px\"}}\n                                className=\"btn btn-secondary\"\n                                onClick={(e) => newETHWallet('BANK')} \n                                >\n                                    Add BANK (ETH Wallet)\n                            </button> \n                    }\n\n                    </>\n                }\n                    \n                    <hr />\n                    \n                    \n                    \n                \n                    <hr />\n                    {/* AUTH REQUIRED - For SERVICE ACCOUNTS ONLY */}\n                    {/* AUTH with whitelist for admins using email or custId */}\n\n                    { ( adminWhitelist.includes(state.user.email) || adminWhitelist.includes(state.custId) ) &&\n                        <>\n                        <h3>ADMIN ONLY</h3>\n                        <h5>Manual Triggers</h5>\n                        <button \n                        type=\"button\" \n                        style={{marginLeft: spacing + \"px\"}} \n                        onClick={(e) => getCustomers()} \n                        className=\"btn btn-warning\"\n                        title=\"Refresh the list of all customers below - click to select\">\n                            Refresh Customers\n                        </button>\n                        <button \n                            type=\"button\" \n                            style={{marginLeft: spacing + \"px\"}} \n                            onClick={ (e) => getAccount(state.custId) } \n                            className=\"btn btn-warning\">\n                                Refresh Account List ({state.custId || \"BCARD_ONE\"})\n                        </button> {state.custId ? \"Selected\" : \"UPGRADE_ADMIN\"}\n                        <div>\n                            <h4>BCARD Internal - TBD</h4>\n                            <button type=\"button\" onClick={(e) => getAllUsers()} className=\"btn btn-warning\">Get all Users</button>\n                            <hr />\n                            <h4>Custodial Wallets - in order</h4>\n                            {state.account_list.length === 0 &&\n                                <div>\n                                    <button \n                                        type=\"button\"\n                                        style={{marginLeft: spacing + \"px\"}}\n                                        className=\"btn btn-secondary\"\n                                        onClick={(e) => newUSDWallet()} \n                                        >\n                                            Create New (VC_USD Wallet)\n                                    </button>  -> for {state.user.email} (if accounts=0)\n                                </div>\n                            }\n\n                            {state.account_list.length > 1 &&\n                                <div>\n                                    <button \n                                        type=\"button\"\n                                        style={{marginLeft: spacing + \"px\"}}\n                                        className=\"btn btn-secondary\"\n                                        onClick={(e) => newETHWallet()} \n                                        >\n                                            Create New (ETH Wallet)\n                                    </button>  -> for {state.user.email} (if accounts=1+)\n                                </div>\n                            }\n\n                            <hr />\n                            <h4>Tests</h4>\n                            <button \n                                type=\"button\"\n                                style={{marginLeft: spacing + \"px\"}}\n                                className=\"btn btn-secondary\"\n                                onClick={(e) => newBTCMaster()} \n                                >\n                                    Create New (BTC Master) -> xpub, mnemonic\n                            </button>\n                            <button \n                                type=\"button\"\n                                style={{marginLeft: spacing + \"px\"}}\n                                className=\"btn btn-primary\"\n                                onClick={(e) => newBTCAccount(\"BTC\", \"BCARD_FEES\", \"xpub\")} \n                                >\n                                    Create New (Account: \"BTC\", \"BCARD_FEES\", \"xpub\") -> accountId\n                            </button>\n                            \n                            <button \n                                type=\"button\"\n                                style={{marginLeft: spacing + \"px\"}}\n                                className=\"btn btn-primary\"\n                                onClick={(e) => newWalletKey(0, ref.current.value)}\n                                >\n                                    Create New (PrivateKey: 0, \"mnemonic ->\")\n                            </button>\n                            <textarea ref={ref} id=\"message\" name=\"message\" />\n                            <hr />\n                            <button \n                                type=\"button\"\n                                style={{marginLeft: spacing + \"px\"}}\n                                className=\"btn btn-primary\"\n                                onClick={(e) => walletAddressInfo(state.acctId)} \n                                >\n                                    Get Info (Wallet: {state.acctId || \"not selected\"})\n                            </button>\n\n                            <button \n                                type=\"button\"\n                                style={{marginLeft: spacing + \"px\"}}\n                                className=\"btn btn-primary\"\n                                onClick={(e) => newXpubAccount(\"ETH\", state.user.uid, \"xpub6DbQz3y2wQHZkkw85c1JxJJeBVNqH2SpuApM5i2Ta1jeFGEebeNLJAMDEJD1uYKEaCF9JgTNPFDanJe3bccNsi4Vf99ngjLY5AVUfVtEYw2\")} \n                                >\n                                    Backend2(HC) -> \n                            </button>\n                            Create New (Account: \"ETH\", \"USER.UID\", \"xpub\") -> accountId\n                            <button \n                                type=\"button\"\n                                style={{marginLeft: spacing + \"px\"}}\n                                className=\"btn btn-primary\"\n                                onClick={(e) => getEthAddress(state.acctId, 0)} \n                                >\n                                    Create New (ETH Address: {state.acctId || \"[click on acct]\"} Index:[0])\n                            </button>\n\n                            \n                        </div>\n                        {/*<button \n                            type=\"button\" \n                            style={{marginLeft: spacing + \"px\"}} \n                            onClick={ (e) => getBalance() } \n                            className=\"btn btn-warning\">\n                                Update Cust. Balance ({state.custId})\n                        </button>*/}\n                        </>\n                    }\n                    \n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react'\n\n\nconst CreateUser = ({onChangeForm, createNewUser, loginUser, user }) => {\n\n\n    return(\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-12 mrgnbtm\">\n                    <h2>Login/Create User</h2>\n                <form>\n                    <div className=\"row\">\n                        <div className=\"form-group col-md-12\">\n                            <label htmlFor=\"exampleInputEmail1\">Name</label>\n                            <input disabled type=\"text\" onChange={(e) => onChangeForm(e)}  className=\"form-control\" name=\"firstname\" id=\"firstname\" aria-describedby=\"emailHelp\" placeholder=\"User Name (optional)\" />\n                        </div>\n                        <div className=\"form-group col-md-12\">\n                            <label htmlFor=\"exampleInputEmail1\">Email</label>\n                            <input type=\"text\" onChange={(e) => onChangeForm(e)} className=\"form-control\" name=\"email\" id=\"email\" aria-describedby=\"emailHelp\" placeholder=\"Email\" />\n                        </div>\n                        <div className=\"form-group col-md-12\">\n                            <label htmlFor=\"exampleInputPassword1\">Password</label>\n                            <input type=\"password\" onChange={(e) => onChangeForm(e)} className=\"form-control\" name=\"password\" id=\"password\" placeholder=\"Password\" />\n                        </div>\n                    </div>\n                    <button type=\"button\" onClick= {(e) => createNewUser(e)} className=\"btn btn-danger\">Create New</button>\n\n                    <button type=\"button\" style={{marginLeft:\"5px\"}} onClick= {(e) => loginUser()} className=\"btn btn-warning\">Login</button>\n                </form>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CreateUser","//const feesAcctCAD = \"637e60e2600305b81f027d14\";\n// const feesAcctBTC = \"636bb54f5f95f8f981cbc519\";\n\nconst feesAcctUSD = \"6388bfd1345a7219f7e369e9\";  // <- testnet    //\"637e5f3a52623024fa898d37\";\nconst feesAcctETH = \"6388c0988d6cd5b292665512\";   // <- testnet     //\"6378febd6921215dd123ca05\";\nconst feesAcctBANK = \"6388c160ff83b71314125036\";  // <- testnet     // \"6378fee8cf1a9e005ba957be\";\nconst feesAcctUSDC = \"6388c199bc0ca02aee4537c0\";\t\t// <- testnet\n\nlet feesAccts = {\n\t\"USD\": feesAcctUSD,\n\t\"ETH\": feesAcctETH,\n\t\"BANK\": feesAcctBANK,\n\t\"USDC\": feesAcctUSDC\n}\n\nexport { feesAccts };","import React, { useState } from 'react'\nimport { showTrades } from '../services/UserService'\nimport { feesAccts } from '../services/feesAccounts'\n\n// import these constants\nconst feesAcctCAD = \"637e60e2600305b81f027d14\";\nconst feesAcctBTC = \"636bb54f5f95f8f981cbc519\";\n\nconst feesAcctUSD = feesAccts.USD;\nconst feesAcctETH = feesAccts.ETH;\nconst feesAcctBANK = feesAccts.BANK;\n\nconsole.log(feesAccts)\n\nasync function createTrade(type, currency, amount, price, acct1, acct2, base){\n\n    console.log(type, currency, amount, price, acct1, acct2, base);\n\n    // console.log(this.state);\n\n\n    // confirm ID from state\n    // send id to function getAccount\n    // and receive back an account list array of objects\n\n    // BCARD SERVICE ACCOUNTS\n\n    // CHF: 63580d55cc7112263d5d04fd\n    // CAD: 63583054e6657347720ffe1d\n    // USD: 635832ba97c17c93c28f0168\n\n    // NEW : BCARD FEE ACCOUNTS\n    // BTC:\n    // ETH:\n    // VC_USD:\n    // VC_CAD:\n    // VC_CHF:\n\n    // for BUY TXs\n\n    let feeAccount = feesAcctUSD;    // default USD on BCARD_ONE\n\n\n    console.log(\"Now need to dynamically retrieve the account Ids from the user selection form.\");\n\n\n    // if it is a type BUY then we are BUYING CAD and SELLING _currency_\n\n    let account1Id;\n    if(acct1){\n      account1Id = acct1;    // \"63580d55cc7112263d5d04fd\";\n    }\n\n    console.log(\"Need to do some determination here to figure out base currency then account number\");\n    let account2Id;\n    let baseCurrency; // = \"VC_CAD\";\n\n    // base currency MUST match base currency of account 2 provided.\n    console.log(base);\n\n    // if it is a SELL, then acct2 is user account where funds will be deposited\n    // if it is a BUY, then acct2 is user account where funds will come from.\n\n    if(acct2){\n      account2Id = acct2;    // \"63580d55cc7112263d5d04fd\";\n      baseCurrency = base;\n    } else {\n      // fund with BCARD VC_CAD Wallet\n      baseCurrency = \"VC_CAD\";\n      account2Id = \"63583054e6657347720ffe1d\";\n    }\n\n\n    console.log(currency);\n\n    // feeAccount needs to correspond to the same as currencyAccount1 (currency)\n    if(type === \"SELL\"){\n\n      // switch(currency) {\n      //   case \"VC_CHF\": \n      //     feeAccount = \"63580d55cc7112263d5d04fd\";\n      //     break;\n      //   case \"VC_USD\":\n      //     feeAccount = feesAcctUSD; \n      //     break;\n      // }\n\n\n\n      if(currency === \"VC_CHF\"){\n        feeAccount = \"63580d55cc7112263d5d04fd\";      // SRV CHF Fees Account \n      } else if(currency === \"VC_USD\"){\n        feeAccount = feesAcctUSD;      // SRV USD Fees Account\n      } else if(currency === \"VC_CAD\"){\n        feeAccount = feesAcctCAD;      // SRV USD Fees Account\n      } else if(currency === \"BTC\"){\n        feeAccount = feesAcctBTC;      // OK BTC Fees Account -> Correct (final)\n      } else if(currency === \"ETH\"){\n        feeAccount = feesAcctETH;      // SRV ETH Fees Account\n      } else if(currency === \"BANK\"){\n        feeAccount = feesAcctBANK;      // OK BANK Fees Account\n      }\n    } else if(type === \"BUY\" && baseCurrency === 'VC_USD') {\n\n      // then user will be BUYING with USD, so fees must be captured to USD Account\n\n      // if(currency === \"VC_CHF\"){\n      //   feeAccount = \"63580d55cc7112263d5d04fd\";      // SRV CHF Fees Account\n      // } else if(currency === \"VC_USD\"){\n        feeAccount = feesAcctUSD;      // SRV USD Fees Account\n      // } else if(currency === \"BTC\"){\n      //   feeAccount = \"636bb54f5f95f8f981cbc519\";      // OK BTC Fees Account -> Correct (final)\n      // } else if(currency === \"ETH\"){\n      //   feeAccount = \"6357fc0da1f24abbb23ff88b\";      // SRV ETH Fees Account\n      // } else if(currency === \"BANK\"){\n      //   feeAccount = \"6378fee8cf1a9e005ba957be\";      // OK BANK Fees Account\n      // }\n    }\n\n    let feeAmount = 0.01;\n\n    // maybe have 0 fees for placing an order (maker) and low fees for closing one (taker).\n    \n\n    // detail needed to exexute the trade request via API\n    let data = {\n      \"type\": type,\n      \"price\": price,\n      \"amount\": amount,\n      \"pair\": currency+\"/\"+baseCurrency,\n      \"currency1AccountId\": account1Id,\n      \"currency2AccountId\": account2Id,\n      \"fee\": feeAmount,\n      \"feeAccountId\": feeAccount     \n    }\n\n    console.log(data);\n\n    const response = await fetch(`/api/trade`, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(data)\n      })\n    await response;\n\n    let trade_conf = response;\n\n    console.log(trade_conf);\n    console.log(\"RETURN FROM TATUM API FOR CREATE TRADE - inline function\");\n    alert(\"Your Trade has been successfully posted to our order book with status: \"+trade_conf.status+\" & fee: \" + feeAmount + \"%\");  \n\n    showTrades();\n\n    // refresh the trades display\n    // showTrades()\n    //   .then(trades => {\n\n    //     console.log(trades);\n    //     let buyOrders = trades[0];\n    //     let sellOrders = trades[1];\n\n    //     this.setState({ buyOrders: buyOrders, sellOrders: sellOrders });\n    //     // this.setState({  });\n\n    //     console.log(\"THIS FUNCTION RETURN FROM CALL BCARD API FOR TRADES\")\n    //     // this.setState({users: users, numberOfUsers: users.length})\n    //   });\n\n  }\n\nexport function TradeForm(props) {\n\n    // console.log(props.state.custId);   // use PROPS to pass in the account list for the selected user with which to buld the options for selection\n\n    if(props.state.account_list.length > 1) {\n      //no customer selected, use service account as default to build the trade UI\n      // console.log(\"No customer selected - dummy data - Use Service Acct\")\n\n      // var temp = getAccount(\"6357fa3d7511407e6d732fe4\");\n      // console.log(temp);  // this is account list for id provided\n      // console.log(props.state.account_list);\n    }\n\n    // const [solo, setSolo] = useState({});\n\n    let solo = \"XYZ\";\n    var acct1 = \"\";\n\n\n    const [inputs, setInputs] = useState({});\n    // const [acct, setAcct] = useState({});\n    const handleSubmit = (event) => {\n        // alert('Your balance is: ' + balance);\n        console.log(\"SUBMIT:\", inputs, acct1);\n\n        console.log(\"Find a way to submit this request to API\", acct1);\n\n        let selectedCurrency = document.getElementById('sel-cur');\n        let curVal = selectedCurrency.value;    // should be account id for selected currency\n\n        acct1 = curVal;\n\n        console.log(\"Need to get account number for base Currency Account\")\n        console.log(\"Cheat for now by funding all trades from the BCARD VC_CAD Wallet\")\n\n        console.log(\"acct1: \" + acct1);\n\n        console.log(\"Use props of current user state to get base currency & baseCurrency account# 2.\")\n\n        console.log(props.state.account_list[props.state.account_list.length-1].id);    // this to get the oldest account #\n\n        let oldestAcct = props.state.account_list[props.state.account_list.length-1]\n\n        let acct2 = oldestAcct.id;   // hard coded tomtranmer USD\n        let baseCurrency = oldestAcct.currency;     // override for account change\n\n        console.log(props.state.baseCurrency);\n\n        alert(\"Trade confrimation sheet required here w/ \" + inputs.type, inputs.currencies, inputs.amount, inputs.price)\n\n\n        createTrade(inputs.type, inputs.currencies, inputs.amount, inputs.price, acct1, acct2, baseCurrency);\n\n        event.preventDefault();\n    }\n\n    const handleChange = (event) => {\n        const name = event.target.name;\n        const value = event.target.value;\n\n        if(name === \"currencies\"){\n          let selectedCurrency = document.getElementById('sel-cur');\n          let curVal = selectedCurrency.value;\n          let curText = selectedCurrency.options[selectedCurrency.selectedIndex].text;\n          console.log(selectedCurrency.value, selectedCurrency.options[selectedCurrency.selectedIndex].text);\n\n          acct1 = curVal;\n\n          console.log(acct1);\n            // store the value of the text in place of the value here as value is uesd to pass the account ID#\n          setInputs(values => ({...values, [name]:curText }));\n        } else {\n          setInputs(values => ({...values, [name]:value }));\n        }\n\n        // console.log(inputs);\n        // console.log(inputs.amount * inputs.price)\n\n        // let soloAmt = (inputs.amount * inputs.price).toFixed(2);\n\n        // setInputs(\"solo\", soloAmt);\n\n        // solo = (inputs.amount * inputs.price).toFixed(2);\n\n        //setSolo(\"HOLLA\");\n\n        console.log(\"Also toggles on select dropdown\");\n    }\n\n    // console.log(props.state.account_list);\n\n    let accounts = props.state.account_list;\n\n    if(accounts.length > 0) {\n      let placeholderAmount = props.state.account_list.length > 0 ? props.state.account_list[0].balance.accountBalance : 0;\n      let placeholderPrice = props.state.account_list.length > 0 ? props.state.prices.bank : \"add some accounts\";\n\n\n      return (\n\n        <div className=\"col-md-6\">\n          <form className=\"trForm\" onSubmit={handleSubmit}>\n            <h5>Post your own OrderBook Trade / {props.state.baseCurrency}</h5>\n\n            <div className=\"row\">\n              <label htmlFor=\"selectBS\" className=\"col-sm-2 col-form-label col-form-label-sm\">Buy/Sell:</label>\n\n              <div className=\"col-sm-10\">\n                <select id=\"selectBS\" name=\"type\" defaultValue=\"\" onChange={handleChange}>\n                  <option value=\"\">...</option>\n                  <option value=\"BUY\">BUY</option>\n                  <option value=\"SELL\">SELL</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"row\">\n              <label htmlFor=\"sel-cur\" className=\"col-sm-2 col-form-label col-form-label-sm\">Wallet:</label>\n\n              <div className=\"col-sm-10\">\n                <select id=\"sel-cur\" name=\"currencies\" defaultValue=\"lime\" onChange={handleChange}>\n                  <option value=\"\">...</option>\n                  { props.state.account_list.length > 1 ? \n\n                    props.state.account_list\n                        .sort((a,b) => a.currency > b.currency ? 1 : -1)\n                        .map((account, index) => (\n                            <option data-index={index} value={account.id} key={account.id} > \n                              {account.currency}\n                            </option>\n                          ))\n\n                      : <>\n                          <option value=\"grapefruit\">Please Grapefruit </option>\n                          <option value=\"lime\">Select Lime </option>\n                          <option value=\"coconut\">An Coconut</option>\n                          <option value=\"mango\">Account Mango</option>\n                        </>\n                  }\n\n                </select>\n              </div>\n            </div>\n\n            <div className=\"row\">\n              <label htmlFor=\"selectBS\" className=\"col-sm-2 col-form-label col-form-label-sm\">Amount:</label>\n\n              <div className=\"col-sm-10\">\n                <input \n                  id=\"tradeAmount\"\n                  name=\"amount\" \n                  type=\"text\" \n                  value={inputs.amount} \n                  placeholder={placeholderAmount} \n                  onChange={handleChange} \n                />\n              </div>\n            </div>\n\n            <div className=\"row\">\n              <label htmlFor=\"selectBS\" className=\"col-sm-2 col-form-label col-form-label-sm\" title=\"Price per token sold.\">Price:</label>\n\n              <div className=\"col-sm-10\">\n                <input \n                  id=\"tradePrice\"\n                  name=\"price\" \n                  type=\"text\" \n                  value={inputs.price}\n                  placeholder={\n                    placeholderPrice\n                  } \n                  onChange={handleChange} \n                />\n                 (in {props.state.baseCurrency})\n              </div>\n            </div>\n\n            \n            \n            \n            <input id=\"tradeSubmit\" type=\"submit\" value=\"Submit Trade\" />\n            TOTAL: ${solo}\n            <hr />\n            <h6>BUY/SELL from/to your default FIAT Account</h6>\n\n          </form>\n        </div>\n\n    )\n    } else {\n      // if no accounts, don't show the trade form\n      return \"\";\n    }\n\n    \n\n}","import React, { useState } from 'react'\n\nimport { feesAccts } from '../services/feesAccounts'\n\n// import these constants\n// const feesAcctCAD = \"637e60e2600305b81f027d14\";\n// const feesAcctBTC = \"636bb54f5f95f8f981cbc519\";\n\nconst feesAcctUSDC = feesAccts.USDC;\nconst feesAcctUSD = feesAccts.USD;\nconst feesAcctETH = feesAccts.ETH;\nconst feesAcctBANK = feesAccts.BANK;\n\n// import { showTrades } from '../services/UserService'\n\n// function getOptionText(sel) {\n//   return sel.options[sel.selectedIndex].text;\n// }\n\nasync function createSwap(amount, acct1, acct2, prices){\n\n    console.log(amount, acct1, acct2, prices);\n\n    console.log(\"price not needed here, calculated as market value swap\");\n    console.log(\"Need to do some determination here to figure out currency then account number for MM\");\n\n\n    let selectedCurrencyOut = document.getElementById('currencyOut');\n    // let curVal = selectedCurrencyOut.value;\n    let tokenOut = selectedCurrencyOut.options[selectedCurrencyOut.selectedIndex].text;\n    // console.log(curVal, tokenOut);\n\n    let selectedCurrencyIn = document.getElementById('currencyIn');\n    let tokenIn = selectedCurrencyIn.options[selectedCurrencyIn.selectedIndex].text;\n    console.log(\"OUT\", tokenOut, \"IN\", tokenIn);\n\n    let mmAccountUSDC = feesAcctUSDC   // VC_USD on BCARD ONE\n    let mmAccountUSD = feesAcctUSD   // VC_USD on BCARD ONE\n    let mmAccountETH = feesAcctETH   // ETH on BCARD ONE\n    let mmAccountBANK = feesAcctBANK // BANK on BCARD Service\n\n    // data default\n    //  for SEND USD \n    let data = {\n      \"senderAccountId\": acct1,\n      // \"recipientAccountId\": mmAccountUSD,\n      \"amount\": amount     \n    }\n\n    let data2 = {\n      \"senderAccountId\": mmAccountETH,\n      \"recipientAccountId\": acct2,\n      // calculate amount with token inputs\n    }\n\n    if(tokenOut === \"BANK\") {\n      data.recipientAccountId = mmAccountBANK;\n      data2.senderAccountId = mmAccountBANK;   // set \n\n\n    } else if(tokenOut === \"ETH\") {\n      data.recipientAccountId = mmAccountETH;\n      data2.senderAccountId = mmAccountETH;   // set\n      \n    } else if(tokenOut === \"VC_USD\") {\n      // need to send VC_USD to the Market Maker\n      //  for SEND USD -> ok with default\n      \n      console.log(data);\n      data.recipientAccountId = mmAccountUSD;\n      data2.senderAccountId = mmAccountUSD;   // set\n\n    } else if(tokenOut === \"USDC_V\"){\n      data.recipientAccountId = mmAccountUSDC;\n      data2.senderAccountId = mmAccountUSDC;   // set\n\n    }\n\n    console.log(data);\n\n\n\n\n    if(tokenIn === tokenOut) {\n      data2.amount = amount;    // equal is a pass-through\n      // set sender ID here\n\n    } else if (tokenIn === \"BANK\") {\n      data2.senderAccountId = mmAccountBANK;   // set \n\n      // calculate amount using price\n      if(tokenOut === \"VC_USD\") {\n        data2.amount = (amount/prices.bank).toString();    // USD -> BANK\n      } else if(tokenOut === \"ETH\") {               // ETH -> BANK\n        data2.amount = (amount*prices.eth/prices.bank).toString();\n      } \n\n    } else if (tokenIn === \"ETH\") {\n      data2.senderAccountId = mmAccountETH;   // set \n\n      // calculate amount using price\n      if(tokenOut === \"VC_USD\") {\n        data2.amount = (amount/prices.eth).toString();    // USD -> ETH\n      } else if(tokenOut === \"BANK\") {\n        data2.amount = (amount*prices.bank/prices.eth).toString();    // BANK -> ETH\n      }\n      \n      \n\n      // alert(\"You get back: \" + (amount/prices.eth).toString() + \" ETH (confirm)\");\n\n    } else if (tokenIn === \"VC_USD\") {\n      data2.senderAccountId = mmAccountUSD;   // set \n\n      // calculate amount using price\n      if(tokenOut === \"ETH\") {\n        data2.amount = (amount*prices.eth).toString();    // ETH -> USD\n      } else if(tokenOut === \"BANK\") {\n        data2.amount = (amount*prices.bank).toString();    // BANK -> USD\n      } else {\n        // usd to usd exchange from FIAT wallet\n        data2.amount = amount;\n      }\n\n    } else if (tokenIn === \"USDC_V\") {\n      data2.senderAccountId = mmAccountUSDC;   // set \n\n      // calculate amount using price\n      if(tokenOut === \"ETH\") {\n        data2.amount = (amount*prices.eth).toString();    // ETH -> USD\n      } else if(tokenOut === \"BANK\") {\n        data2.amount = (amount*prices.bank).toString();    // BANK -> USD\n      } else {\n        // usd to usd exchange from FIAT wallet\n        data2.amount = amount;\n      }\n    }\n\n    console.log(data2);\n\n    if(tokenIn === \"USDC_V\") {\n      // its a CC Load\n      alert(\"You are loading your CC for FIAT Spending with \" + data2.amount + \" USD\");\n    } else {\n      alert(\"You get back: \" + data2.amount + \" of \"+tokenIn+\" (confirm)\");\n\n    }\n\n\n\n    // if its ETH\n\n    //  for SEND USD \n    // let data = {\n    //   \"senderAccountId\": acct1,\n    //   \"recipientAccountId\": mmAccountUSD,\n    //   \"amount\": amount     \n    // }\n\n    // console.log(data);\n\n\n\n    // let data2 = {\n    //   \"senderAccountId\": mmAccountETH,\n    //   \"recipientAccountId\": acct2,\n    //   \"amount\": calcAmount  \n    // }\n\n    // first send out\n    const response = await fetch(`/api/transfer`, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(data)\n      })\n    await response;\n\n    // second send out\n    const responseTwo = await fetch(`/api/transfer`, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(data2)\n      })\n    await responseTwo;\n\n    alert(\"Your SWAP has been successfully completed with status: \"+responseTwo.status + \" Manual refresh accounts.\");  \n\n    // refresh the accounts display\n\n\n  }\n\nexport function SwapForm(props) {\n\n    // console.log(props.state.custId);   // use PROPS to pass in the account list for the selected user with which to buld the options for selection\n\n    if(props.state.account_list.length > 1) {\n      //no customer selected, use service account as default to build the trade UI\n      // console.log(\"No customer selected - dummy data - Use Service Acct\")\n\n      // var temp = getAccount(\"6357fa3d7511407e6d732fe4\");\n      // console.log(temp);  // this is account list for id provided\n      // console.log(props.state.account_list);\n    }\n\n    // const [solo, setSolo] = useState({});\n\n    let solo = \"XYZ\";\n\n\n    const [inputs, setInputs] = useState({});\n    // const [acct, setAcct] = useState({});\n    const handleSubmit = (event) => {\n        // alert('Your balance is: ' + balance);\n        console.log(\"SUBMIT:\", inputs);\n\n        let acct1 = inputs.currencyOut;       // accoutn 1 is user accout they are sending tokens from\n        let acct2 = inputs.currencyIn;        // accoutn 2 is user account to receive tokens\n        // let baseCurrency = props.state.baseCurrency   // use base currency to enable SWAP from MM\n\n        // console.log(props.state.baseCurrency);\n\n        console.log(\"SWAP confrimation sheet required here w/ \" + inputs.type, inputs.currencies, inputs.amount, inputs.price)\n\n        // console.log(props.state.prices);\n\n        createSwap(inputs.amount, acct1, acct2, props.state.prices);\n\n        event.preventDefault();\n    }\n\n    const handleChange = (event) => {\n        const name = event.target.name;\n        const value = event.target.value;\n\n        setInputs(values => ({...values, [name]:value }));\n\n        console.log(\"Also toggles on select dropdown\");\n    }\n\n    let accounts = props.state.account_list;\n\n    if(accounts.length > 0) {\n      let placeholderAmount = props.state.account_list.length > 0 ? props.state.account_list[0].balance.accountBalance : 0;\n      // let placeholderPrice = props.state.account_list.length > 0 ? props.state.prices.bank : \"add some accounts\";\n\n\n      return (\n\n        <div className=\"col-md-6\">\n          <form className=\"trForm\" onSubmit={handleSubmit}>\n            <h5>Self Swap your own tokens @ market</h5>\n\n            {/*<div className=\"row\">\n              <label htmlFor=\"selectBS\" className=\"col-sm-2 col-form-label col-form-label-sm\">Buy/Sell:</label>\n\n              <div className=\"col-sm-10\">\n                <select id=\"selectBS\" name=\"type\" defaultValue=\"\" onChange={handleChange}>\n                  <option value=\"\">...</option>\n                  <option value=\"BUY\">BUY</option>\n                  <option value=\"SELL\">SELL</option>\n                </select>\n              </div>\n            </div>*/}\n\n            <div className=\"row\">\n              <label htmlFor=\"currencyOut\" className=\"col-sm-2 col-form-label col-form-label-sm\">Token Out:</label>\n\n              <div className=\"col-sm-10\">\n                <select id=\"currencyOut\" name=\"currencyOut\" defaultValue=\"lime\" onChange={handleChange}>\n                  <option value=\"\">...</option>\n                  { props.state.account_list.length > 1 ? \n\n                    props.state.account_list\n                        .sort((a,b) => a.currency > b.currency ? 1 : -1)\n                        .map((account, index) => (\n                            <option data-index={index} value={account.id} key={account.id} > \n                              {account.currency}\n                            </option>\n                          ))\n\n                      : <>\n                          <option value=\"grapefruit\">Please Grapefruit </option>\n                          <option value=\"lime\">Select Lime </option>\n                          <option value=\"coconut\">An Coconut</option>\n                          <option value=\"mango\">Account Mango</option>\n                        </>\n                  }\n\n                </select>\n              </div>\n            </div>\n\n            <div className=\"row\">\n              <label htmlFor=\"amount\" className=\"col-sm-2 col-form-label col-form-label-sm\">Amount:</label>\n\n              <div className=\"col-sm-10\">\n                <input \n                  id=\"tradeAmount\"\n                  name=\"amount\" \n                  type=\"text\" \n                  value={inputs.amount} \n                  placeholder={placeholderAmount} \n                  onChange={handleChange} \n                />\n              </div>\n            </div>\n\n            <div className=\"row\">\n              <label htmlFor=\"currencyIn\" className=\"col-sm-2 col-form-label col-form-label-sm\">Token In:</label>\n\n              <div className=\"col-sm-10\">\n                <select id=\"currencyIn\" name=\"currencyIn\" defaultValue=\"lime\" onChange={handleChange}>\n                  <option value=\"\">...</option>\n                  { props.state.account_list.length > 1 ? \n\n                    props.state.account_list\n                        .sort((a,b) => a.currency > b.currency ? 1 : -1)\n                        .map((account, index) => (\n                            <option data-index={index} value={account.id} key={account.id} > \n                              {account.currency}\n                            </option>\n                          ))\n\n                      : <>\n                          <option value=\"grapefruit\">Please Grapefruit </option>\n                          <option value=\"lime\">Select Lime </option>\n                          <option value=\"coconut\">An Coconut</option>\n                          <option value=\"mango\">Account Mango</option>\n                        </>\n                  }\n\n                </select>\n              </div>\n            </div>\n\n\n{/*            <div className=\"row\">\n              <label htmlFor=\"selectBS\" className=\"col-sm-2 col-form-label col-form-label-sm\" title=\"Price per token sold.\">Price:</label>\n\n              <div className=\"col-sm-10\">\n                <input \n                  id=\"tradePrice\"\n                  name=\"price\" \n                  type=\"text\" \n                  value={inputs.price}\n                  placeholder={\n                    placeholderPrice\n                  } \n                  onChange={handleChange} \n                />\n                 (in {props.state.baseCurrency})\n              </div>\n            </div>*/}\n\n            \n            \n            \n            <input id=\"tradeSubmit\" type=\"submit\" value=\"Submit Swap\" />\n            TOTAL: ${solo}\n            <hr />\n            <h6>BUY/SELL from/to your default FIAT Account</h6>\n\n          </form>\n        </div>\n\n    )\n    } else {\n      // if no accounts, don't show the trade form\n      return \"\";\n    }\n\n    \n\n}","import React, { useState } from 'react'\n// import { showTrades } from '../services/UserService'\n\n\nasync function createTransfer(amount, acct1, acct2) {\n\n    console.log(amount, acct1, acct2);\n\n    if(!acct1){\n      acct1 = \"6388bfd1345a7219f7e369e9\";          // fund with BCARD VC_USD Wallet\n    } \n\n    // detail needed to exexute the trade request via API\n    let data = {\n      \"senderAccountId\": acct1,\n      \"recipientAccountId\": acct2,\n      \"amount\": amount     \n    }\n\n    console.log(data);\n\n    if (parseFloat(amount) > 100) {\n      alert(\"Please enter an amount =< $100 to be funded.\");\n    } else if(false) {\n      // check dropdown selector to ensure proper currency is selected\n      alert(\"transaction.currency.incompatible\");\n\n    } else {\n      // proceed with transfer request\n    \n\n      const response = await fetch(`/api/transfer`, {\n          method: 'POST',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify(data)\n        })\n      await response;\n\n      let transfer_conf = response;\n\n      console.log(transfer_conf);\n      console.log(\"RETURN FROM TATUM API FOR CREATE TRANSFER - admin function\");\n      alert(\"Your Transfer has been successfully completed\");  \n\n      alert(\"Refresh Accounts above to see updated balance - automate.\")\n\n      // refresh the trades display\n\n    }\n    \n\n  }\n\nexport function TransferForm(props) {\n\n    // console.log(props.state.custId);   // use PROPS to pass in the account list for the selected user with which to buld the options for selection\n\n    if(props.state.account_list.length > 1) {\n      //no customer selected, use service account as default to build the trade UI\n      // console.log(\"No customer selected - dummy data - Use Service Acct\")\n\n      // var temp = getAccount(\"6357fa3d7511407e6d732fe4\");\n      // console.log(temp);  // this is account list for id provided\n      // console.log(props.state.account_list);\n    }\n\n    // const [solo, setSolo] = useState({});\n\n    let solo = \"XYZ\";\n    var acct1 = \"\";\n\n\n    const [inputs, setInputs] = useState({});\n    // const [acct, setAcct] = useState({});\n    const handleSubmit = (event) => {\n        // alert('Your balance is: ' + balance);\n        console.log(\"SUBMIT:\", inputs, acct1);\n\n        console.log(\"Find a way to submit this request to API\", acct1);\n\n        let selAct2 = document.getElementById('selAcct2');\n        let acct2 = selAct2.value;    // should be account id for selected currency\n\n        // acct1 = curVal;\n\n        console.log(\"Need to get account number for base Currency Account\")\n        console.log(\"Cheat for now by funding all trades from the BCARD VC_CAD Wallet\")\n\n        console.log(acct2)\n\n        // let acct2;\n\n        createTransfer(inputs.amount, acct1, acct2);\n\n        event.preventDefault();\n    }\n\n    const handleChange = (event) => {\n        const name = event.target.name;\n        const value = event.target.value;\n\n        if(name === \"currencies\"){\n          let selectedCurrency = document.getElementById('sel-cur');\n          let curVal = selectedCurrency.value;\n          let curText = selectedCurrency.options[selectedCurrency.selectedIndex].text;\n          console.log(selectedCurrency.value, selectedCurrency.options[selectedCurrency.selectedIndex].text);\n\n          acct1 = curVal;\n\n          console.log(acct1);\n            // store the value of the text in place of the value here as value is uesd to pass the account ID#\n          setInputs(values => ({...values, [name]:curText }));\n        } else {\n          setInputs(values => ({...values, [name]:value }));\n        }\n\n        // console.log(inputs);\n        // console.log(inputs.amount * inputs.price)\n\n        // let soloAmt = (inputs.amount * inputs.price).toFixed(2);\n\n        // setInputs(\"solo\", soloAmt);\n\n        // solo = (inputs.amount * inputs.price).toFixed(2);\n\n        //setSolo(\"HOLLA\");\n\n        console.log(\"Also toggles on select dropdown\");\n    }\n\n    return (\n      <div className=\"col-md-6\">\n        <form className=\"tsForm\" onSubmit={handleSubmit}>\n        <h5>SEND: any asset to another person - TBD</h5>\n        <select id=\"acct1\" name=\"acct1\" defaultValue=\"\" onChange={handleChange}>\n          <option value=\"\">->from</option>\n\n          { props.state.account_list.length > 1 ? \n\n            props.state.account_list\n                .sort((a,b) => a.currency > b.currency ? 1 : -1)\n                .map((account, index) => (\n                    <option data-index={index} value={account.id} key={account.id} > \n                      {account.currency}\n                    </option>\n                  ))\n\n              : <>\n                  <option value=\"grapefruit\">Please Grapefruit </option>\n                  <option value=\"lime\">Select Lime </option>\n                  <option value=\"coconut\">An Coconut</option>\n                  <option value=\"mango\">Account Mango</option>\n                </>\n          }\n\n        </select>\n        <select id=\"selAcct2\" name=\"acct2\" onChange={handleChange} disabled>\n          <option value=\"\">->to</option>\n          { props.state.account_list.length > 1 ? \n\n            props.state.account_list\n                .sort((a,b) => a.currency > b.currency ? 1 : -1)\n                .map((account, index) => (\n                    <option data-index={index} value={account.id} key={account.id} > \n                      {account.currency}\n                    </option>\n                  ))\n\n              : <>\n                  <option value=\"grapefruit\">Please Grapefruit </option>\n                  <option value=\"lime\">Select Lime </option>\n                  <option value=\"coconut\">An Coconut</option>\n                  <option value=\"mango\">Account Mango</option>\n                </>\n          }\n\n        </select>\n        <input \n          name=\"amount\" \n          type=\"text\" \n          value={inputs.amount} \n          placeholder={props.state.account_list.length > 0 ? props.state.account_list[0].balance.accountBalance : 0} \n          onChange={handleChange} \n        />\n    \n        <input type=\"submit\" value=\"Send\" />\n        TOTAL: ${solo}\n        <p>Need: How to choose recipient customer? ID?</p>\n       </form>\n      </div>\n\n    )\n\n}","import React, { useState } from 'react'\n// import { showTrades } from '../services/UserService'\n\n\nasync function createFaucet(amount, acct1, acct2) {\n\n    console.log(amount, acct1, acct2);\n\n    if(!acct1){\n      acct1 = \"6388bfd1345a7219f7e369e9\";          // fund with BCARD VC_USD Wallet\n    } \n\n    // detail needed to exexute the trade request via API\n    let data = {\n      \"senderAccountId\": acct1,\n      \"recipientAccountId\": acct2,\n      \"amount\": amount     \n    }\n\n    console.log(data);\n\n    if (parseFloat(amount) > 100) {\n      alert(\"Please enter an amount =< $100 to be funded.\");\n    } else if(false) {\n      // check dropdown selector to ensure proper currency is selected\n      alert(\"transaction.currency.incompatible\");\n\n    } else {\n      // proceed with transfer request\n    \n\n      const response = await fetch(`/api/transfer`, {\n          method: 'POST',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify(data)\n        })\n      await response;\n\n      let transfer_conf = response;\n\n      console.log(transfer_conf);\n      console.log(\"RETURN FROM TATUM API FOR CREATE TRANSFER - admin function\");\n      alert(\"Your Transfer has been successfully completed\");  \n\n      alert(\"Refresh Accounts above to see updated balance - automate.\")\n\n      // refresh the trades display\n\n    }\n    \n\n  }\n\nexport function FaucetForm(props) {\n\n    // console.log(props.state.custId);   // use PROPS to pass in the account list for the selected user with which to buld the options for selection\n    // const [solo, setSolo] = useState({});\n\n    let solo = \"XYZ\";\n    var acct1 = \"\";\n\n\n    const [inputs, setInputs] = useState({});\n    // const [acct, setAcct] = useState({});\n    const handleSubmit = (event) => {\n        // alert('Your balance is: ' + balance);\n        console.log(\"SUBMIT:\", inputs, acct1);\n\n        console.log(\"Find a way to submit this request to API\", acct1);\n\n        let selAct2 = document.getElementById('selAcct2');\n        let acct2 = selAct2.value;    // should be account id for selected currency\n\n        // acct1 = curVal;\n\n        console.log(\"Need to get account number for base Currency Account\")\n        console.log(\"Cheat for now by funding all trades from the BCARD VC_CAD Wallet\")\n\n        console.log(acct2)\n\n        // let acct2;\n\n        createFaucet(inputs.amount, acct1, acct2);\n\n        event.preventDefault();\n    }\n\n    const handleChange = (event) => {\n        const name = event.target.name;\n        const value = event.target.value;\n\n        if(name === \"currencies\"){\n          let selectedCurrency = document.getElementById('sel-cur');\n          let curVal = selectedCurrency.value;\n          let curText = selectedCurrency.options[selectedCurrency.selectedIndex].text;\n          console.log(selectedCurrency.value, selectedCurrency.options[selectedCurrency.selectedIndex].text);\n\n          acct1 = curVal;\n\n          console.log(acct1);\n            // store the value of the text in place of the value here as value is uesd to pass the account ID#\n          setInputs(values => ({...values, [name]:curText }));\n        } else {\n          setInputs(values => ({...values, [name]:value }));\n        }\n\n        // console.log(inputs);\n        // console.log(inputs.amount * inputs.price)\n\n        // let soloAmt = (inputs.amount * inputs.price).toFixed(2);\n\n        // setInputs(\"solo\", soloAmt);\n\n        // solo = (inputs.amount * inputs.price).toFixed(2);\n\n        //setSolo(\"HOLLA\");\n\n        console.log(\"Also toggles on select dropdown\");\n    }\n\n    return (\n      <div className=\"col-md-6\">\n        <form className=\"tsForm\" onSubmit={handleSubmit}>\n        <h3>Get VC_USD from faucet</h3>\n        <select id=\"acct1\" name=\"acct1\" defaultValue=\"\" onChange={handleChange} disabled>\n          <option value=\"\">->from</option>\n\n          { props.state.account_list.length > 1 ? \n\n            props.state.account_list\n                .sort((a,b) => a.currency > b.currency ? 1 : -1)\n                .map((account, index) => (\n                    <option data-index={index} value={account.id} key={account.id} > \n                      {account.currency}\n                    </option>\n                  ))\n\n              : <>\n                  <option value=\"grapefruit\">Please Grapefruit </option>\n                  <option value=\"lime\">Select Lime </option>\n                  <option value=\"coconut\">An Coconut</option>\n                  <option value=\"mango\">Account Mango</option>\n                </>\n          }\n\n        </select>\n        <select id=\"selAcct2\" name=\"acct2\" onChange={handleChange}>\n          <option value=\"\">->to</option>\n          { props.state.account_list.length > 1 ? \n\n            props.state.account_list\n                .sort((a,b) => a.currency > b.currency ? 1 : -1)\n                .map((account, index) => (\n                    <option data-index={index} value={account.id} key={account.id} > \n                      {account.currency}\n                    </option>\n                  ))\n\n              : <>\n                  <option value=\"grapefruit\">Please Grapefruit </option>\n                  <option value=\"lime\">Select Lime </option>\n                  <option value=\"coconut\">An Coconut</option>\n                  <option value=\"mango\">Account Mango</option>\n                </>\n          }\n\n        </select>\n        <input \n          name=\"amount\" \n          type=\"text\" \n          value={inputs.amount} \n          placeholder={props.state.account_list.length > 0 ? props.state.account_list[0].balance.accountBalance : 0} \n          onChange={handleChange} \n        />\n    \n        <input type=\"submit\" value=\"Submit Transfer\" />\n        TOTAL: ${solo}\n        <p>Chose your VC_USD account from the dropdown and enter amount (less than 100) to fund your virtual account.</p>\n       </form>\n      </div>\n\n    )\n\n}","\n/** this functio uses Tatum API and CoinGecko API to get published crypto prices **/\nexport async function getPrices(base) {\n    \n    // console.log(base);\n\n    if(base === undefined || base === '') {\n        base = \"USD\";    \n        console.log(\"USD default set here at API call for initial load.\");\n    }\n\n    const response = await fetch('/api/prices/'+base);\n    if(response.status === 200) console.log(\"Successful call to /api/prices\");\n    return await response.json();\n}\n\n\n\n// export async function getCustomers() {\n\n//     const response = await fetch('/api/customers');\n//     // console.log(response);\n//     return await response.json();\n// }\n\n// export async function getAccount(id) {\n\n//     console.log(id);\n\n//     const response = await fetch('/api/account/'+ id );\n//     // console.log(response;                  // these are logging OK to console, but are not being displayed for third acct.\n//     return await response.json();\n// }\n\n// export async function getVC(name) {\n\n//     console.log(name);\n\n//     const response = await fetch('/api/vc/'+ name );\n//     console.log(response);\n//     return await response.json();\n// }\n\n// export async function createTrade(data) {\n\n//     console.log(data);\n\n//     const response = await fetch(`/api/trade`, {\n//         method: 'POST',\n//         headers: {'Content-Type': 'application/json'},\n//         body: JSON.stringify(data)\n//       })\n//     return await response;\n// }\n\n// export async function showTrades() {\n\n//     const response = await fetch('/api/trades' );\n//     // console.log(response);\n//     console.log(\"function showTrades fetched from /api/trades\");\n//     return await response.json();\n// }\n\n// export async function getBalance(list, state) {\n//     // console.log(list, state);\n\n//     let myAccounts = list;\n//     let runTotal = 0;\n\n//     // map allows forEach account, do a thing\n//     myAccounts.map(\n//         (acct)=>{\n\n//             // console.log(acct);\n\n//           let currencyId = acct.currency\n//           if( acct.currency.startsWith(\"VC_\") ) {\n//             // console.log('hotfix');\n//             currencyId = currencyId.substring(3);               // remove the VC to get the FIAT FX\n//           }\n\n//           // this will depend on default currency (CAD in my case)\n\n//           console.log(\"Placeholder CAD Hardcoded\",state.prices);\n\n//           // e.g. if BASEprice is 1, account BASE is set to CAD, then \n//           // prices should be listed/displayed in home currency\n\n//           const BASEprice = 1;\n//           const BTCprice = state.prices.btc || 27000/BASEprice;\n//           const ETHprice = state.prices.eth || 2111/BASEprice;\n//           const CHFprice = state.prices.chf || 1.3/BASEprice;\n//           const USDprice = state.prices.usd || 1.37/BASEprice;\n\n\n//           let balInit = acct.balance.accountBalance;\n//           let balConv = parseFloat(balInit);  //* parseFloat(BTCprice);\n//           // let thisPrice = CADprice;\n\n//           // console.log(currencyId);\n\n//           if(currencyId === \"BTC\") {\n//             balConv = parseFloat(balInit) * parseFloat(BTCprice);\n//           } else if(currencyId === \"ETH\"){\n//             balConv = parseFloat(balInit) * parseFloat(ETHprice);\n//           } else if(currencyId === \"CHF\") {\n//             balConv = parseFloat(balInit) * parseFloat(CHFprice);\n//           } else if(currencyId === \"USD\") {\n//             balConv = parseFloat(balInit) * parseFloat(USDprice);\n//           }\n\n//           // console.log(balConv);\n\n//           runTotal = runTotal + balConv;        // sum total in default currency (CAD)\n\n//           return runTotal;\n\n//       });\n\n//     return runTotal;                // return sum when completed\n// }\n\n// export async function newBTCMaster(){\n//     const response = await fetch('/api/bitcoin/wallet');\n//     console.log(response);\n//     return await response.json();\n// }\n\n// export async function newBTCAccount(data) {\n\n//     console.log(data);\n\n//     if(data.xpub === \"\"){\n//         // fail without xpub - this is ok for internal accounts without blockchain/wallet required, but YMMV\n//         return false;\n//     }\n\n//     const response = await fetch('/api/ledger/account', {\n//         method: 'POST',\n//         headers: {'Content-Type': 'application/json'},\n//         body: JSON.stringify(data)\n//       });\n//     // console.log(response);\n//     // return await response.json();\n//     return await response;\n// }\n\n// export async function newWalletAddress(id) {\n\n//     console.log(id);\n\n//     if(id === \"accountId\") {\n//         // default account id is for BCARD_FEES BTC account with id: 636bb54f5f95f8f981cbc519\n//         id = \"636bb54f5f95f8f981cbc519\";\n//     }\n\n//     const response = await fetch('/api/address/account/'+ id );\n//     console.log(response);\n//     return await response.json();\n// }\n\n// export async function walletAddressInfo(id) {\n//     console.log(id);\n\n//     if(id === \"accountId\") {\n//         // default account id is for BCARD_FEES BTC account with id: 636bb54f5f95f8f981cbc519\n//         id = \"636bb54f5f95f8f981cbc519\";\n//     }\n\n//     const response = await fetch('/api/ledger/account/'+ id );\n//     console.log(response);\n//     return await response.json();\n// }\n\n// export async function newWalletKey(index,input) {\n//     console.log(index,input);\n\n//     if(index === \"\") {\n//         index = 0;\n//     }\n\n//     let data = {\n//         \"index\": index,\n//         \"mnemonic\": input\n//     }\n\n//     const response = await fetch('/api/bitcoin/wallet/priv', {\n//         method: 'POST',\n//         headers: {'Content-Type': 'application/json'},\n//         body: JSON.stringify(data)\n//       });\n\n//     return await response.json();\n\n//     // const response = await fetch('/api/key/account/'+ id );\n//     // console.log(response);\n//     // return await response.json();\n// }\n\n","export async function newBTCMaster(){\n    const response = await fetch('/api/bitcoin/wallet');\n    console.log(response);\n    return await response.json();\n}\n\nexport async function newXpubAccount(data) {\n\n    console.log(data);\n\n    if(data.xpub === \"\"){\n        // fail without xpub - this is ok for internal accounts without blockchain/wallet required, but YMMV\n        return false;\n    }\n\n    const response = await fetch('/api/ledger/account', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(data)\n      });\n    \n    console.log(response);\n    // return await response.json();\n    return await response;\n}\n\n// yes\nexport async function newETHWallet(userId, tokenOverride, custId) {\n\n    console.log(userId, tokenOverride, custId);\n\n    // data should be the userId ( system-internal for the user )\n\n    // IF tokenOverride === \"BANK\", then we need to execute the steps required to create the BANK wallet\n\n    if(tokenOverride === \"BANK\"){\n        console.log('BANK Token Override -> TBD bcard api server calls');\n\n        if(custId === \"636bb1a23053ea6eb5b85a30\") {\n            // it's a fees service account, so override uid\n            userId = \"BCARD_FEES\";\n            console.log(\"Overiding for Fees User Wallet Creation.\");\n        }\n\n        // the below should be all implemented serverside\n\n        const response = await fetch('/api/'+tokenOverride+'/wallet/' + custId + '/'+userId);\n\n        // let responseJSON = response.json();\n        console.log(response);\n\n\n    } else if(tokenOverride){\n        // then set response to the URL indicated by the token override to process that API call change \n        // console.log('boo');\n        const response = await fetch('/api/'+tokenOverride+'/wallet/' + userId);\n\n        let responseXpub = response.json().xpub;\n        console.log(responseXpub);\n\n    } else {\n\n        if(!userId) {\n            console.log(\"Missing input for User ID Generation - Account can't be tied to user\");\n        }\n\n        // call to new ETH Master - unique xpub and mnemonic for each user means accounts can be exported\n        const response = await fetch('/api/ethereum/wallet/' + userId);\n        console.log(response);\n        let responseXpub = response.json().xpub;\n        console.log(responseXpub);\n\n    }\n\n\n    \n\n    // return await response.json();\n\n}\n\n//yes\nexport async function newWalletKey(index,input) {\n    console.log(\"Currently BTC only.\");\n    console.log(index,input);\n\n    if(index === \"\") {\n        index = 0;\n    }\n\n    let data = {\n        \"index\": index,\n        \"mnemonic\": input\n    }\n\n    const response = await fetch('/api/bitcoin/wallet/priv', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(data)\n      });\n\n    return await response.json();\n\n    // const response = await fetch('/api/key/account/'+ id );\n    // console.log(response);\n    // return await response.json();\n}\n\n// export async function getAllUsers() {\n\n//     const response = await fetch('/api/users');\n//     return await response.json();\n// }\n\n// export async function getPrices() {\n\n//     const response = await fetch('/api/prices');\n//     // console.log(response);\n//     if(response.status === 200) console.log(\"Successful call to /api/prices\");\n//     return await response.json();\n// }\n\n// export async function getCustomers() {\n\n//     const response = await fetch('/api/customers');\n//     // console.log(response);\n//     return await response.json();\n// }\n\n// export async function getAccount(id) {\n\n//     console.log(id);\n\n//     const response = await fetch('/api/account/'+ id );\n//     // console.log(response;                  // these are logging OK to console, but are not being displayed for third acct.\n//     return await response.json();\n// }\n\n// export async function getVC(name) {\n\n//     console.log(name);\n\n//     const response = await fetch('/api/vc/'+ name );\n//     console.log(response);\n//     return await response.json();\n// }\n\n// export async function createTrade(data) {\n\n//     console.log(data);\n\n//     const response = await fetch(`/api/trade`, {\n//         method: 'POST',\n//         headers: {'Content-Type': 'application/json'},\n//         body: JSON.stringify(data)\n//       })\n//     return await response;\n// }\n\n// export async function showTrades() {\n\n//     const response = await fetch('/api/trades' );\n//     // console.log(response);\n//     console.log(\"function showTrades fetched from /api/trades\");\n//     return await response.json();\n// }\n\n// export async function getBalance(list, state) {\n//     // console.log(list, state);\n\n//     let myAccounts = list;\n//     let runTotal = 0;\n\n//     // map allows forEach account, do a thing\n//     myAccounts.map(\n//         (acct)=>{\n\n//             // console.log(acct);\n\n//           let currencyId = acct.currency\n//           if( acct.currency.startsWith(\"VC_\") ) {\n//             // console.log('hotfix');\n//             currencyId = currencyId.substring(3);               // remove the VC to get the FIAT FX\n//           }\n\n//           // this will depend on default currency (CAD in my case)\n\n//           console.log(\"Placeholder CAD Hardcoded\",state.prices);\n\n//           // e.g. if BASEprice is 1, account BASE is set to CAD, then \n//           // prices should be listed/displayed in home currency\n\n//           const BASEprice = 1;\n//           const BTCprice = state.prices.btc || 27000/BASEprice;\n//           const ETHprice = state.prices.eth || 2111/BASEprice;\n//           const CHFprice = state.prices.chf || 1.3/BASEprice;\n//           const USDprice = state.prices.usd || 1.37/BASEprice;\n\n\n//           let balInit = acct.balance.accountBalance;\n//           let balConv = parseFloat(balInit);  //* parseFloat(BTCprice);\n//           // let thisPrice = CADprice;\n\n//           // console.log(currencyId);\n\n//           if(currencyId === \"BTC\") {\n//             balConv = parseFloat(balInit) * parseFloat(BTCprice);\n//           } else if(currencyId === \"ETH\"){\n//             balConv = parseFloat(balInit) * parseFloat(ETHprice);\n//           } else if(currencyId === \"CHF\") {\n//             balConv = parseFloat(balInit) * parseFloat(CHFprice);\n//           } else if(currencyId === \"USD\") {\n//             balConv = parseFloat(balInit) * parseFloat(USDprice);\n//           }\n\n//           // console.log(balConv);\n\n//           runTotal = runTotal + balConv;        // sum total in default currency (CAD)\n\n//           return runTotal;\n\n//       });\n\n//     return runTotal;                // return sum when completed\n// }\n\n\n// export async function newWalletAddress(id) {\n\n//     console.log(id);\n\n//     if(id === \"accountId\") {\n//         // default account id is for BCARD_FEES BTC account with id: 636bb54f5f95f8f981cbc519\n//         id = \"636bb54f5f95f8f981cbc519\";\n//     }\n\n//     const response = await fetch('/api/address/account/'+ id );\n//     console.log(response);\n//     return await response.json();\n// }\n\n// export async function walletAddressInfo(id) {\n//     console.log(id);\n\n//     if(id === \"accountId\") {\n//         // default account id is for BCARD_FEES BTC account with id: 636bb54f5f95f8f981cbc519\n//         id = \"636bb54f5f95f8f981cbc519\";\n//     }\n\n//     const response = await fetch('/api/ledger/account/'+ id );\n//     console.log(response);\n//     return await response.json();\n// }\n\n\n\n\n// export async function createUser(data) {\n//     const response = await fetch(`/api/user`, {\n//         method: 'POST',\n//         headers: {'Content-Type': 'application/json'},\n//         body: JSON.stringify({user: data})\n//       })\n//     return await response.json();\n// }","import { initializeApp } from 'firebase/app'\nimport { getFirestore, collection, addDoc, where, query, getDocs} from 'firebase/firestore'\nimport \"firebase/compat/auth\";\nimport { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, GoogleAuthProvider } from 'firebase/auth'\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDnrcCHZp59E11ns89hM-a1Xl9953sP6Lw\",\n  authDomain: \"fir-auth-e51d2.firebaseapp.com\",\n  projectId: \"fir-auth-e51d2\",\n  storageBucket: \"fir-auth-e51d2.appspot.com\",\n  messagingSenderId: \"424293883684\",\n  appId: \"1:424293883684:web:a5a57c72a0b9fef6915db1\",\n  measurementId: \"G-89JHL0G2WG\"\n};\n\n\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\n\nlet firebase = app;   // var for export\n\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\n\nexport const auth = getAuth(app);\nexport default firebase;\n\nexport const signInWithGoogle = async () => {\n  try {\n    const res = await auth.signInWithPopup(provider);\n    const user = res.user;\n    const userRef = collection(db, \"users\");\n    const result = await getDocs(query(userRef, where(\"uid\", \"==\", user.uid)));\n    if (result.empty) {\n      await addDoc(collection(db, \"users\"), {\n        uid: user.uid,\n        name: user.displayName,\n        authProvider: \"google\",\n        email: user.email,\n      });\n    }\n  } catch (err) {\n    alert(err.message);\n  }\n};\n\nexport const signInWithEAndP = async (email, password) => {\n\n  await signInWithEmailAndPassword(auth, email, password)\n    .then((userCredential) => {\n\n      console.log(email, password);\n      // Signed in \n      const user = userCredential.user;\n      // ...\n      console.log(user);\n\n      return user.email;        // this fails to trigger a send back to the front end \n\n      // const response = await fetch('/api/users');\n      // return await response.json();\n\n    })\n    .catch((error) => {\n      // const errorCode = error.code;\n      const errorMessage = error.message;\n      alert(errorMessage);\n    });\n\n    return \"hello\";\n\n};\n\nexport const createUserWithEAndP = async (email, password) => {\n  try {\n    await createUserWithEmailAndPassword(auth, email, password)\n    .then((userCredential) => {\n\n      console.log(email, password)\n      // Signed in \n      const user = userCredential.user;\n      // ...\n      console.log(user);    // pass back user Object? - already hapening\n    })\n    .catch((error) => {\n      // const errorCode = error.code;\n      const errorMessage = error.message;\n      alert(errorMessage);\n\n      // ..\n    });\n\n  } catch (err) {\n    alert(err.message);\n  }\n\n  return \"userCreated\";\n  \n};\n\nexport const sendPasswordResetEmail = async (email) => {\n  try {\n    await auth.sendPasswordResetEmail(email);\n    alert(\"Password reset link sent!\");\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nexport const logout = () => {\n  auth.signOut();\n  alert(\"Bye\");\n  window.location.reload(false);\n};","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Header } from './components/Header'\nimport { Users } from './components/Users'\n// import { Accounts } from './components/Accounts'\nimport { DisplayBoard } from './components/DisplayBoard'\nimport CreateUser from './components/CreateUser'\nimport { TradeForm } from './components/TradeForm'\nimport { SwapForm } from './components/SwapForm'\nimport { TransferForm } from './components/TransferForm'\nimport { FaucetForm } from './components/FaucetForm'\n// service return\nimport { getAllUsers, createUser, getAccount, getCustomers, getVC, getBalance, showTrades, newBTCMaster, newBTCAccount, newWalletAddress, getEthAddress, walletAddressInfo, newUSDWallet } from './services/UserService'    // all data retrieval request functions \nimport { getPrices } from './services/BcardApi'           // move bcard server calls here\nimport { newWalletKey, newETHWallet } from './services/TatumSecured'    // highly secured private key, etc. tx here\n\n\nimport { adminWhitelist } from './utils/adminWhitelist'\n\n// newXpubAccount\n\n// , getAccount, getCustomers, getVC, getBalance, createTrade, showTrades, newBTCMaster, newBTCAccount, newWalletAddress, walletAddressInfo, newWalletKey\n\n// internal utils\nimport { convertToCAD } from './utils/convertToCAD'\n\n\n// firebase AUTH\n// import Login from './components/LoginPage';\n// import Home from './components/HomePage';\n\nimport { signInWithEAndP, createUserWithEAndP, logout } from './services/firebase'    // packaged services\n// Import the functions you need from the SDKs you need\n// import { initializeApp } from \"firebase/app\";\n// // import { getAnalytics } from \"firebase/analytics\";\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\n\n// function triggerShowTrades() {\n//   // update display of ACTIVE trades in UI after account is loaded\n//   showTrades()\n//   .then(trades => {\n\n//     console.log(trades);\n//     let buyOrders = trades[0];\n//     let sellOrders = trades[1];\n\n//     console.log(\"THIS FUNCTION RETURN FROM CALL BCARD API FOR TRADES\")\n//     return { buyOrders: buyOrders, sellOrders: sellOrders };\n\n//   });\n// }\n\n\nfunction orderInfo(order) {\n  console.log(\"Take order ID and display detail w/button to CANCEL or FILL.\")\n}\n\n\nfunction GetUniqueCust(props) {\n\n  // console.log(props.state.user);\n\n  if(props.state.user.uid){\n      return (\n        <h4>Welcome Back <small>{props.state.user.email}</small></h4>\n      )\n    // check state to see if customer ID is set\n  } else if(props.state.custId){\n      return (\n        <h4>Hello <small>{props.state.custId}</small></h4>\n      )\n  } else {\n      return (\n        <p>Login above to Display list of all Accounts, or Create New Account</p>)\n  }\n\n  \n}\n\n\nfunction TradeTableView(props) {\n\n  // console.log(props);\n\n  let list_of_trades = props.trades;\n\n  const TradeRow = (trade,index) => {\n\n        return(\n              <tr key = {index} className={index%2 === 0?'odd':'even'}>\n                  \n                  <td>\n                    <button \n                      type=\"btn\"\n                      onClick={() =>  {\n                        // this.setState({acctId: account.id}); \n                        console.log(\"Need to setState with click here -> emit event?\");\n                        alert(\"Display popup w/ order details: If Owner -> delete this post; else -> fill this order\");\n\n                        orderInfo(\"ORDER ID #\");\n                        // also popup account info alert panel\n                        // walletAddressInfo(account.id);\n                      }} >\n                      \n                      {trade.id}\n                    </button>\n                  </td> \n                  <td>{trade.pair}</td>\n                  <td>{trade.amount}</td>\n                  <td>{trade.price}</td>\n                  <td>{ convertToCAD(trade.amount,trade.pair, props.state).toFixed(2) }</td>\n                  <td>{trade.fill} tokens</td>\n                  <td>{ ((props.state.prices.time - trade.created)/60000).toFixed(2) } min</td>\n              </tr>\n          )\n    }\n\n  const tradeTable = list_of_trades.map((trade,index) => TradeRow(trade,index))\n\n  return(\n        <div className=\"container\">\n            <h4>{props.title}</h4>\n            <table className=\"table table-bordered\">\n                <thead>\n                <tr>\n                    <th>id</th>\n                    <th>currency pair</th>\n                    <th>token</th>\n                    <th>price</th>\n                    <th>{props.state.baseCurrency} value</th>\n                    <th>Fill Amt.</th>\n                    <th>Age</th>\n                </tr>\n                </thead>\n                <tbody>\n                    {tradeTable}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\n\n\nclass App extends Component {\n\n  /** Internal application state: variable storage **/\n  state = {\n    signedIn: false,    // initial state for application\n    user: {},           // use the user variable to store data for logged in user via firebase (user.uid)\n    customers: [],      // customers list is loaded first (in bg) to connect auth user to tatum\n    prices: [],         // IMPORTANT for price storage - TBD dynamic list of token prices\n\n    custId: \"\",         // tatum customer ID\n    baseCurrency: \"\",   // is Set on login from customer object (can we update this with POSTMAN calls?)\n    balance: 0.0,       // customer balance storage as calculated via getBalance\n    account_list: [],   // list of customer accounts\n    hasDAO: false,      // does customer have a DAO Account (BANK)\n    hasVISA: false,     // doess custoemr have a VISA (USDC) Account\n\n    buyOrders: [],      // open buy orders on tradeBook\n    sellOrders: [],     // open sell orders on tradeBook\n\n    currentVC: [],      // LOOK: do we still have links? set on CLICK -> active current VC, display INFO\n    acctId: \"\",         // set on CLICK -> set active account in side panel\n    acctAddress: \"\",    // LOOK: is This Used?\n    acctTx: [],         // list of transactions that correspond to the currently selected account.\n\n\n    // eth: 0.1,\n    users: [],          // obsolete\n    userMap: new Map(), // not used\n    numberOfUsers: 0,   // not used\n    uniqCust: new Set(),  // not used\n\n  }\n\n\n  // constructor(props) {\n  //   super(props);   // no props on intial app load, but use =fu\n  //   // Don't call this.setState() here!\n  //   // this.state = { counter: 0 };\n  //   // this.handleClick = this.handleClick.bind(this);\n  // }\n\n  // this triggers for AUTH and prevState conditionals\n  componentDidMount(prevProps, prevState, snapshot) {\n    // console.log(prevProps, prevState, snapshot);\n\n    // console.log(this.state);\n\n    // determine authentication status\n    const auth = getAuth();\n    // console.log(auth);\n\n    onAuthStateChanged(auth, (user) => {\n      if (user) {\n        console.log(\"User is signed in\");\n        // User is signed in, see docs for a list of available properties\n        // https://firebase.google.com/docs/reference/js/firebase.User\n        // const uid = user.uid;   // this UID can be the unique identifier to breate Tatum accounts -> link to Google Auth Firebase Storage\n\n        // console.log(uid);\n        // console.log(user.email);\n        //  console.log(user);    // user object is the storage for Google Auth\n\n        console.log(\"Welcome back \" + user.email);\n\n        this.setState({ signedIn: true });\n        this.setState({ user: user });\n\n        // set default to USD here to avoid the error checking along the way\n        this.setState({ baseCurrency: \"USD\" })\n\n        // check for customer_list mapping to get tatum customerId\n        this.getCustomers();\n\n        if(this.state.custId) {\n          console.log(this.state.prices);\n\n      \n        }\n\n\n      } else {\n        // User is signed out\n        console.log(\"User is signed Out\");\n        // ...\n        this.setState({ signedIn: false });\n        this.setState({ user: {} });\n      }\n    });\n\n    if(prevState) {\n      if (this.state.prices !== prevState.prices) {\n        // then the pricing data has been updated, so a refresh of the UI is required.\n        console.log(\"This on state recall, if prices are different - NEED A TIMER ANALYSIS - SET IN STATE\")\n      }\n    } else if(this.state.signedIn) {\n      // no previous state, so it is an initial load .\n      \n\n    } else {\n      // catch all for not signed in\n      console.log(\"Sign In\");\n    }\n\n    \n\n  }\n\n  /** Internal user creation functions - add hooks to firebase **/\n\n  loginUser = () => {\n    // hard code for now\n    // let email='tom@tranmer.ca';\n    // let password = '123456';\n\n    // console.log(this.state.user)\n\n    console.log(this.state.user.email,this.state.user.password);\n\n    signInWithEAndP(this.state.user.email,this.state.user.password)\n      .then(response => {\n\n        // get user object from auth\n        console.log(this.state.user.uid);\n\n        // set state for default currencyBase\n        this.setState({ baseCurrency: \"USD\" });   // defualt USD hard-codedhere\n        console.log(\"default USD hard-coded here on login\");\n\n\n\n\n        // console.log(response);\n        if(response) {\n          console.log(response)    \n          // this to get user email -> use HASH of email for creation of new accounts belonging to this user. \n          // this.setState({numberOfUsers: this.state.numberOfUsers + 1})\n\n          // may need to seState for user object\n          this.setState({\"signedIn\": true});\n\n          console.log(\"Request refresh due to state here.\");\n        }\n    });\n  }\n\n  createNewUser = (e,pw) => {\n    // hard code for now\n    // let email='tom@jones.ca';\n    // let password = '123456';\n\n    // required from the CURRENT data entry inputs\n    // console.log(this.state.user.email,this.state.user.password);\n\n    createUserWithEAndP(this.state.user.email,this.state.user.password)\n      .then(response => {\n\n        this.setState({\"signedIn\": true});\n\n        console.log(\"Request refresh due to state here.\");\n\n        console.log(response);\n\n        // this fails because response fails\n        if(response) {\n          console.log(response.email)    \n          // this to get user email -> use HASH of email for creation of new accounts belonging to this user. \n          // this.setState({numberOfUsers: this.state.numberOfUsers + 1})\n\n          this.setState({user: 1})\n        }\n    });\n  }\n\n  // DEP\n  createUser = (e) => {\n      createUser(this.state.user)\n        .then(response => {\n          console.log(response);      // this is user object as submitted (body data)\n          this.setState({numberOfUsers: this.state.numberOfUsers + 1})\n\n          // now run creaetNewUser for the auth server\n          createUserWithEAndP(response.email,response.password)\n            .then(response => {\n              console.log(response);    // this is not returning anything\n              this.setState({user: 1});\n            });\n        });\n  }\n\n  getAllUsers = () => {\n    getAllUsers()\n      .then(users => {\n        console.log(users)\n        this.setState({users: users, numberOfUsers: users.length})\n      });\n  }\n  // when user form is changed, update user object in app state variable\n  \n  // for form submit (user auth)\n  onChangeForm = (e) => {      \n    let user = this.state.user;   // perpetual storage in the app DOM\n\n    // console.log(user);\n\n    if (e.target.name === 'firstname') {\n        user.firstName = e.target.value;\n    } else if (e.target.name === 'password') {\n        user.password = e.target.value;\n    } else if (e.target.name === 'email') {\n        user.email = e.target.value;\n    }\n\n    // this sets the state for the user to be created or logged in\n    this.setState({user})\n  }\n\n  newBTCMaster = () => {\n\n    // send request to generate BC Master\n    // and receive back an account info list { array of: objects }\n\n    newBTCMaster()\n      .then(account_info => {\n\n        console.log(account_info)   // accounts are good retrieved here\n        console.log(\"RETURN FROM TATUM API FOR CREATE BTC MASTER\")\n\n        alert(\"xpub for account: \" + account_info.xpub);\n        alert(\"mnemonic (one-time only!): \" +account_info.mnemonic);\n\n      })\n\n  }\n\n  newBTCAccount = (currency,EXT_ID,xpub) => {\n\n    // will need data from body: currency, EXT_ID, xpub, \n\n    // if no xpub, still will generate an account - but with no accessible wallets?\n    if(xpub===\"xpub\"){\n      // default to XPUB for BCARD_FEES account\n      xpub = \"xpub6Em42hjC1gHisq3h6f8vXr5ACAMMPV3QnorN5sojgT4f8t4Hd7qfWQJL6wAZtobukajR2vmnYEVPsUdvRE5f1FsWTuvdfh5xBMXwvkDftFX\";\n    }\n\n    let data = {\n      \"currency\": currency,\n      \"xpub\": xpub,\n      \"customer\": {\n        \"externalId\": EXT_ID,\n        \"customerCountry\": \"US\",\n        \"accountingCurrency\": \"USD\"\n      }    \n    }\n\n    newBTCAccount(data)\n      .then(account_info => {\n        \n        console.log(account_info)\n        console.log(\"accountId: \" + account_info.id + \" for custId: \" + account_info.customerId + \" has been created\")\n        console.log(\"RETURN FROM TATUM LEDGER ACCOUNT CREATION\")\n      })\n  }\n\n\n  newXpubAccount = (currency,EXT_ID,xpub) => {\n\n    // will need data from body: currency, EXT_ID, xpub, \n\n    // if no xpub, still will generate an account - but with no accessible wallets?\n    if(xpub===\"xpub\"){\n      // default to XPUB for tomtranmeer ETH account\n      xpub = \"xpub6DbQz3y2wQHZkkw85c1JxJJeBVNqH2SpuApM5i2Ta1jeFGEebeNLJAMDEJD1uYKEaCF9JgTNPFDanJe3bccNsi4Vf99ngjLY5AVUfVtEYw2\";\n    }\n\n    let data = {\n      \"currency\": currency,\n      \"xpub\": xpub,\n      \"customer\": {\n        \"externalId\": EXT_ID,\n        \"customerCountry\": \"US\",\n        \"accountingCurrency\": \"USD\"\n      }    \n    }\n\n    newBTCAccount(data)\n      .then(account_info => {\n        \n        console.log(account_info)\n        console.log(\"accountId: \" + account_info.id + \" for custId: \" + account_info.customerId + \" has been created\")\n        console.log(\"RETURN FROM TATUM LEDGER ACCOUNT CREATION\")\n      })\n  }\n\n\n\n  /** Autorun / initial page load (after authentication) **/\n\n\n  /** get list of all customers w/ uid and custID for mapping **/\n  getCustomers = () => {\n    // console.log(\"This is an autorun function to get the customer list and map the CustId to the External Id used in our auth system.\");\n\n    // console.log();\n\n    this.getPrices(this.state.baseCurrency);                            // load in the prices as unauth users do not see them\n\n\n    getCustomers()\n      .then(customers => {\n        this.setState({customers: customers})\n        // console.log(\"THIS CALL TO TATUM API FOR CUSTOMERS (can map external id to internal id)\");\n\n        // customers -> all customers for TATUM backend system\n\n        // if has a logged-in ID -> need to set specifics for THIS Customer\n\n        // console.log('uid' in this.state.user);   // ok here for logged in users only should be running the getCustomers function\n        const uid = this.state.user.uid;\n        // const matchFlag = false;\n        // console.log(uid,customers)   // customers are good retrieved here\n\n        // foreach customers -> loop through each in list looking for external Id match\n\n        let custMatch;\n\n        customers.forEach(cust => {\n          // console.log(cust.externalId);\n\n          if(uid === cust.externalId) {\n            // matchFlag = true;\n            console.log(\"USER MATCH -> setState\");\n            \n            custMatch = cust;\n            this.setState({\"custId\":cust.id, baseCurrency: cust.accountingCurrency});\n            this.getAccount(cust.id);         // next function call\n            // this.setState                  // load in the customers accounts (calls prices update here)\n\n          }  \n\n          if(custMatch){}   // if a match is found, then progress to load in customer account\n\n        });\n\n      });\n\n  }\n\n\n\n  /************************** wallet creation function pieces - (admin only) *********************/\n\n  // OBSOLETE? generate ETH address for specified account w/ derivation Key index\n  getEthAddress = (acctId, index) => {\n\n    getEthAddress(acctId, index)\n      .then(info => {\n        console.log(info);\n        alert(\"Your new ETH Wallet Address is: \" + info.address + \"You can fund this wallet address or share it with your friends!\")\n        console.log(\"RETURN FROM TATUM ADDRESS GENERATION WITH address: \" + info.address)\n      })\n  }\n\n  // generate new private Key for \n  newWalletKey = (index, input) => {\n\n    // index = 0;\n    // let mnemonic = \"aisle kidney upper grain explain payment wash donate visual praise budget garden moment bleak burst trip force come prosper beef hello naive sleep group\";\n\n    // console.log(input, \"Need to connect input box in UI here to input mnemonic seed phrase to generate key[index]\");\n\n    newWalletKey(index,input)\n      .then(key_data => {\n        console.log(key_data);    // accessible directly at key_data.key\n        console.log(\"RETURN FROM TATUM LEDGER ADDRESS KEY GENERATION -> Key only displayed on server (as it should be!\")\n\n      })\n  }\n\n    // create one based on NO(xpub) -> id only for custodial accounts as they already are associated with xpub\n  newWalletAddress = (id) => {\n\n    console.log(this.state.acctId);\n    if(this.state.acctId !== \"\"){\n      // then use this SET account as the ID for the wallet address generation\n      id = this.state.acctId;\n    }\n\n    newWalletAddress(id)\n      .then(account_info => {\n        \n        console.log(account_info)\n        // console.log(\"accountId: \" + account_info.id + \" for custId: \" + account_info.customerId + \" has been created\")\n        console.log(\"RETURN FROM TATUM LEDGER ADDRESS CREATION\")\n      })\n  }\n\n  /************************** info functions (admin) *********************/\n\n  getVC = (currency) => {\n\n    console.log(this.state);\n    // console.log(currency);\n    console.log(\"Displaying Virtual Currency Stats for: \" + currency);\n\n    let useVC = currency || \"VC_CHF\"; // init ad service accoutn for testing purposes.\n    // if(this.state.currentVC.name !== \"\") {\n    //   useVC = this.state.currentVC;\n    //   console.log('override vc name for VC');\n    // }\n\n    // confirm ID from state\n    // send id to function getAccount\n    // and receive back an account list array of objects\n\n    getVC(useVC)\n      .then(vcDetail => {\n        this.setState({currentVC: vcDetail})\n\n        console.log(vcDetail)   // accounts are good retrieved here\n        console.log(\"RETURN FROM TATUM API FOR Virtual Currency\")\n      });\n  }\n\n\n  /************************** info functions (all) *********************/\n\n  /** function call to gather prices from a list of available tokens **/\n  getPrices = (base) => {\n\n    // console.log(base);    // override base currency\n\n    // use any currently set BASE rate for any price retrievals and display\n    getPrices(base)\n      .then(prices => {\n\n        // use SetState for existing component\n        this.setState({ prices: prices })   // eth setting legacy and can be removed\n\n        // console.log(\"THIS CALL TO BCARD API FOR PRICES, with BASE\")\n\n      });\n  }\n\n  // get or refresh Accounts info for currently selected CustID\n  getAccount = (custId) => {\n\n    console.log(\"Running getAccount - rename this function\");\n    console.log(custId);\n\n    let useAcct = custId;   // default is the passed value\n    if(custId === \"\") {\n      // passed in a blank value so set some defaults\n      useAcct = \"6357fa3d7511407e6d732fe4\"; // init service account for testing purposes.\n      console.log('override acct num for customer SELECTED - DEFAULT SERVICE ACCT');\n\n      // OVERRIDE -> set internally\n      if(this.state.custId !== \"\"){\n        console.log('override acct num for customer SELECTED - STATE VAR');\n        useAcct = this.state.custId;\n      }\n    } \n\n    // confirm ID from state\n    // send id to function getAccount\n    // and receive back an account list array of objects\n\n    //let setCurrency = \"USD\";\n    // this.setState({baseCurrency:setCurrency});    // hard-code CAD\n    // console.log(this.state.baseCurrency)\n\n    // console.log(\"Get Account req. call to getPrices first\");\n\n    getPrices(this.state.baseCurrency).then(prices => {\n      this.setState(prices);\n    }).then(() =>{\n\n    //then call customer accounts\n    getAccount(useAcct)\n        .then(account_list => {\n\n\n          // console.log(account_list);    // merge these if matches multiple for single customer?\n\n          // set defualtCurrency from account_list[0]\n\n          // account_list[0] should be the olders account (first setup)\n\n          // most recently created account should be available at :account_list[account_list.length-1]\n\n          // console.log(account_list);\n\n          // set controls for addDAO (BANK) and addVISA (based on current accounts)\n          for(let i=0; i<account_list.length; i++) {\n            // console.log(account_list[i]);\n            let thisAccount = account_list[i];\n\n            if(thisAccount.currency === \"BANK\"){\n              this.setState({hasDAO:true})\n            } else if(thisAccount.currency === \"USDC\" || thisAccount.currency === \"USDC_V\") {\n              this.setState({hasVISA: true})\n            }\n          }\n\n          this.setState({account_list: account_list, custId: useAcct})\n\n\n          // console.log(\"account_list,defualtCurrency RETURN FROM BCARD API FOR CustID\")\n\n          // then load the customers balance\n          getBalance(account_list, this.state)\n              .then(balance => {\n                // console.log(balance);       // ok here\n                this.setState({balance:balance})\n              })\n\n          // then load in all the trades (optional)\n          showTrades()\n            .then(trades => {\n\n              let buyOrders = trades[0];\n              let sellOrders = trades[1];\n\n              this.setState({ buyOrders: buyOrders, sellOrders: sellOrders });\n\n            });\n\n          })    // end then callback function\n\n        console.log(\"THIS FUNCTION RETURN FROM CALL BCARD API FOR getAccount\");\n\n\n    })    // end then after prices\n\n  }\n\n\n  // lookup info based on specified ID\n  walletAddressInfo = (id) => {\n\n    console.log(this.state.acctId);\n    if(this.state.acctId !== \"\"){\n      // then use this SET account as the ID for the wallet address info request\n      id = this.state.acctId;\n    } else {\n      this.setState({acctId: id}); \n    }\n\n    walletAddressInfo(id)\n      .then(account_info => {\n        \n        console.log(id, account_info);\n\n        let walletAddress = \"n/a\";\n\n        let info = account_info;\n        if(account_info[0]){\n          // override for CHAIN ACCOUNT\n          info = account_info[0]\n        }\n\n\n        if( info.currency.startsWith(\"VC_\") ){\n          // no address available\n          alert(\"No wallet address for FIAT Accounts - use Deposit Function\");\n        } else {\n          walletAddress = account_info[0].address;              // hard coded test for QR\n          this.setState({\"acctAddress\":walletAddress});        // confirm setState for address of selected wallet\n\n          console.log(\"Implement QR Code visual display on Account Info Click.\");\n        }\n\n        // let walletAddress = account_info[0].address;\n        // this.setState({\"acctAddress\":walletAddress});        // confirm setState for address of selected wallet\n\n        // console.log(\"Implement QR Code visual display on Account Info Click.\");\n\n        alert(\"Account Info | Balance: \" + account_info.balance.accountBalance + \" \" + account_info.currency + \" | CustomerID: \" + account_info.customerId + \" | Public Address: \" + walletAddress);\n        console.log(\"RETURN FROM TATUM LEDGER ADDRESS INFO LOOKUP:\" + walletAddress)\n      })\n  }\n\n  // manual show/refresh button for live orderBook trades\n  showTrades = () => {\n    showTrades()\n      .then(trades => {\n\n        console.log(trades);\n        let buyOrders = trades[0];\n        let sellOrders = trades[1];\n\n        this.setState({ buyOrders: buyOrders, sellOrders: sellOrders });\n        // this.setState({  });\n\n        console.log(\"THIS FUNCTION RETURN FROM CALL BCARD API FOR TRADES\")\n        // this.setState({users: users, numberOfUsers: users.length})\n      });\n  }\n\n\n  /************************** new User Functions *********************/\n\n  newUSDWallet = () => {\n\n    console.log(this.state.user)\n\n    // require user.uid for account identifier\n    newUSDWallet(this.state.user)\n      .then(result => {\n\n        console.log(result);\n        // use SetState for existing component\n        // this.setState({eth: prices.eth, prices: prices })   // eth setting legacy and can be removed\n\n        console.log(\"THIS CALL TO BCARD API FOR NEW USD - Onboarding 1.\")\n      });\n  }\n\n  newETHWallet = (tokenOverride) => {\n    console.log(this.state.user.uid);\n\n    console.log(tokenOverride);   // this will be an ETH CHAIN walletbut for tokenOverride ID-> Check Tatum https://docs.tatum.io/introduction/supported-blockchains for list of supported blockchains and sets that can be implemented out of the box.\n\n    let userID = this.state.user.uid;     // bcard internal ID\n    let custID = this.state.custId;\n\n    // require user.uid for account identifier\n    newETHWallet(userID, tokenOverride, custID)\n      .then(result => {\n\n        console.log(result);\n        // use SetState for existing component\n        // this.setState({eth: prices.eth, prices: prices })   // eth setting legacy and can be removed\n\n        console.log(\"THIS CALL TO BCARD API FOR NEW ETH Wallet & USDC (VISA) - Onboarding 2 & 3.\");\n\n        console.log(\"Will need to trigger an account reload or page refresh to display newly created accounts.\");\n        alert(\"Your account has been successsfully created.\");\n        window.location.reload();\n\n      });\n  }\n\n\n  onboardExecute = () => {\n    // consolidated onboarding function for new users who do not have a registered account in tatum system.\n    console.log(\"Execute New User Onboarding Function.\");\n\n    // confirm we have logged-in ID, otherwise, login first alert.\n    if(this.state.user.uid){\n\n      // first, FIAT(USD) wallet: \n      newUSDWallet(this.state.user.uid)\n      .then(result => {\n        console.log(result);\n        console.log(\"Complete - Onboarding 1.\");\n\n        // second, ETH wallet for ETH and ERC-20: \n        // require user.uid for account identifier\n        newETHWallet(this.state.user.uid)\n        .then(result => {\n\n          console.log(result, \"Hopefully wallet address is included in the return here, the rest can stay serverside or for later recall I think\");\n          // use SetState for existing component\n          // this.setState({eth: prices.eth, prices: prices })   // eth setting legacy and can be removed\n\n          console.log(\"Complete - Onboarding 2.\");\n\n          console.log(this.state);\n\n          console.log(\"This can reload now, but FUTURE should just set CustID in state\");\n          \n          alert('Congratulations, your accounts have been created.');\n          window.location.reload();\n        });\n      });\n\n    } else {\n      alert('Please login or register first.');\n    }\n    \n  }\n\n\n  /******* end for methods for app.js ********/\n\n\n  render() {\n    \n    return (\n      <div className=\"App\">\n        <Header></Header>\n        <div className=\"container mrgnbtm\">\n          <div className=\"row\">\n            <div className=\"col-md-4\">\n                {!this.state.user.uid &&\n                <div className=\"new-user\">\n\n                  <CreateUser \n                    user={this.state.user}\n                    onChangeForm={this.onChangeForm}\n                    createNewUser={this.createNewUser}\n                    loginUser={this.loginUser}\n                    >\n                  </CreateUser>\n\n                </div>\n              }\n\n                <div className=\"current-user\">  \n\n                  <GetUniqueCust state={this.state} getCustomers={this.getCustomers} />\n\n                  {/*<button \n                    className=\"btn btn-success\" \n                    onClick={() => {console.log(\"Test Account Creation Success\");this.createNewUser(\"aliceb@coolasice.ca\",\"123456\")}}>\n                      Signup Test -> No Repeat email      \n                  </button>*/}\n\n                  {/*<button \n                    className=\"btn btn-success\" \n                    onClick={() => {console.log(\"Test Login Admin\");this.loginUser(\"tom@tranmer.ca\",\"123456\")}}>\n                      Login Test -> ADMIN      \n                  </button>*/}\n                  {/*<button \n                    className=\"btn btn-warning\" \n                    onClick={() => {console.log(\"Test Login User\");this.loginUser(\"aliceb@coolasice.ca\",\"123456\")}}>\n                      Login Test -> USER      \n                  </button>\n                  <button \n                    className=\"btn btn-danger\" \n                    onClick={() => {console.log(\"Test Login Fail\");this.loginUser(\"tomjones\",\"whatsnew\")}}>\n                      Login Test -> FAIL      \n                  </button>*/}\n                  <hr />\n                  { this.state.user.uid &&\n                    <button \n                      className=\"btn btn-danger\" \n                      onClick={() => {console.log(\"Test Logout\");logout()}}>\n                        Logout      \n                    </button>\n                  }\n\n                  <h3>User Selected: </h3>\n                  <p><strong>user email: </strong> {this.state.user.email || \"not signed in\"}</p>\n                  <p><strong>Bcard UserId: </strong> <small>{this.state.user.uid || \"not signed in\"}</small></p>\n                  <p><strong>CustomerId: </strong> {this.state.custId || \"not selected\"}</p>\n                  <p>\n                    <strong>AccountId: </strong> {this.state.acctId || \"not selected\"}<br />\n                    <strong>Wallet Address: </strong> <small>{this.state.acctAddress || \"not selected\"}</small>\n                  </p>\n                  <p>Currency Default: { this.state.baseCurrency !== '' ? this.state.baseCurrency : \"getAccounts\" }</p>\n                  <p>FIAT Default: { this.state.baseCurrency } </p>\n                  <hr />\n                </div>\n\n                \n            </div>\n            <div className=\"col-md-8\">\n                <DisplayBoard\n                  // numberOfUsers={this.state.numberOfUsers}\n                  // customerId={this.state.custId}\n                  // balance={this.state.balance}\n\n                  // Account={this.Account}\n\n                  getAllUsers={this.getAllUsers}\n\n                  getPrices={this.getPrices}\n                  getAccount={this.getAccount}\n                  getBalance={this.getBalance}\n                  getCustomers={this.getCustomers}\n\n                  createTrade={this.createTrade}\n                  showTrades={this.showTrades}\n                  newBTCMaster={this.newBTCMaster}\n                  newBTCAccount={this.newBTCAccount}\n\n                  newWalletAddress={this.newWalletAddress}\n                  getEthAddress={this.getEthAddress}\n\n                  walletAddressInfo={this.walletAddressInfo}\n\n                  newWalletKey={this.newWalletKey}\n                  state={this.state}\n\n                  newUSDWallet={this.newUSDWallet}\n                  newETHWallet={this.newETHWallet}\n                  newXpubAccount={this.newXpubAccount}\n\n                  onboardExecute={this.onboardExecute}\n                >\n                </DisplayBoard>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col\">\n\n              <ul>\n                {this.state.balance > 0 && <li><strong>USER BALANCE: ${this.state.balance} </strong></li>}\n                <li>Current Prices:\n                  <ul>\n                    {this.state.prices.eth && <li>1 ETH = ${this.state.prices.eth} {this.state.baseCurrency} </li> }\n                    {this.state.prices.btc && <li>1 BTC = ${this.state.prices.btc} {this.state.baseCurrency} </li> }\n                    {this.state.prices.bank && <li>1 BANK = ${this.state.prices.bank} {this.state.baseCurrency} </li> }\n\n                    {this.state.prices.usd && <li>1 USD = ${this.state.prices.usd} {this.state.baseCurrency} </li> }\n                    {this.state.prices.chf && <li>1 CHF = ${this.state.prices.chf} {this.state.baseCurrency} </li> }\n\n                  </ul>\n                </li>\n              </ul>\n\n            </div>\n          </div>\n        </div>\n\n        <div className=\"row mrgnbtm\">\n          <Users users={this.state.users}></Users>\n        </div>\n        <div className=\"container\">\n\n          { this.state.custId && \n            <div className=\"row\">\n              <TradeForm state={this.state} />\n              <FaucetForm state={this.state} />\n              <TransferForm state={this.state} />\n              <SwapForm state={this.state} />\n            </div>\n          }\n\n          {this.state.buyOrders.length > 0 &&\n            <div> \n            <TradeTableView title=\"Buy Orders\" trades={this.state.buyOrders} baseCurrency={this.state.baseCurrency} state={this.state} />\n            <hr />\n              \n\n            </div>\n          }\n          {this.state.sellOrders.length > 0 &&\n            <div> \n            <TradeTableView title=\"Sell Orders\" trades={this.state.sellOrders} state={this.state} />\n\n            <hr />\n              \n\n            </div>\n          }\n          \n          <hr />\n          <p><strong>Accounts of Selected User [Customer Account ID]: {this.state.custId || \"[not set]\"}</strong></p>\n\n          {this.state.custId && \n            <p><strong>Click <button type=\"btn\" onClick={ () => {} }>\n              Accounts ID\n            </button> Button to Select Account for Active -> <small>display detail info in panel above</small></strong></p>\n          }\n\n          {this.state.balance > -1 &&     // this.state.account_list.length > 0 &&\n\n            <table className=\"table table-bordered\">\n              <thead>\n                <tr>\n                  <th>ID</th>\n                  <th>currency</th>\n                  <th>token</th>\n                  <th>{this.state.baseCurrency} balance</th>\n                </tr>\n              </thead>\n              <tbody>\n              {this.state.account_list.map((account, index) => (\n                <tr data-index={index} key={account.id}>\n                  <td>\n                    <button \n                      type=\"btn\"\n                      onClick={() =>  {\n                        // also popup account info alert panel\n                        this.walletAddressInfo(account.id);\n                      }} >\n                      \n                      {account.id}\n                    </button></td>\n                  <td>{account.currency}</td>\n                  <td>{account.balance.accountBalance}</td>\n                  <td>{ convertToCAD(account.balance.accountBalance,account.currency,this.state) }</td>\n                </tr>\n                ))}\n              </tbody>\n            </table> \n\n          }\n\n          <hr />\n\n          \n\n\n\n\n\n          {/*{ ((this.state.custId === \"6357fa3d7511407e6d732fe4\") || (this.state.user.email === 'tom@tranmer.ca')) &&*/}\n          { ( adminWhitelist.includes(this.state.user.email) || adminWhitelist.includes(this.state.custId) ) &&\n\n          <div>\n\n            <p><strong>MASTER List of all Customers</strong> \n              {!this.state.custId && <span> - click <button>Get Customers</button> and then click <button>CustID</button> to select customer:</span>}\n            </p>\n          \n            <table className=\"table table-bordered\">\n              <thead>\n                <tr>\n                  <th>Customer ID (tatum)</th>\n                  <th>ExternalID (ours)</th>\n                  <th>customerCountry</th>\n                  <th>accountingCurrency</th>\n                </tr>\n              </thead>\n              <tbody>\n              {this.state.customers\n                  .sort((a,b) => a.externalId > b.externalId ? 1 : -1)\n                  .map((customer, index) => (\n                <tr data-index={index} key={customer.id}>\n                  <td><button \n                      className=\"btn\" \n                      onClick={() => {\n                          console.log(\"Can we use map here to map externalId to customerId? \");\n                          this.setState({extId: customer.externalId});\n                          this.setState({custId:customer.id});\n                          console.log(\"Also pull accounts list - same time\");\n                          this.getAccount(customer.id);\n                      }} >\n                        <strong>{customer.id}</strong>\n                  </button></td>\n                  <td>{customer.externalId}</td>\n                  <td><button \n                      className=\"btn\" \n                      onClick={(e) =>{} }>\n                      {customer.customerCountry}\n                  </button></td>\n                  <td>{customer.accountingCurrency}</td>\n                </tr>\n                ))}\n              </tbody>\n            </table>\n\n            <hr />\n\n            {this.state.customers.length > 1 && \n              <div>\n                <p><strong>Click ON <button>VC_Name</button> to display VC Detail:</strong></p>\n                <p><strong>{this.state.currentVC.name}</strong> with supply: {this.state.currentVC.supply}\n                <br/>with FIAT basePair {this.state.currentVC.basePair}:{this.state.currentVC.baseRate}</p>\n              </div>\n            }\n\n          </div>\n          }\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}