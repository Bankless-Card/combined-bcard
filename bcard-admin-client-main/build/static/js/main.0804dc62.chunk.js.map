{"version":3,"sources":["components/Header.js","components/Users.js","utils/convertToCAD.js","services/UserService.js","components/Accounts.js","components/Transactions.js","utils/adminWhitelist.js","components/DisplayBoard.js","components/CreateUser.js","services/feesAccounts.js","components/TradeForm.js","components/SwapForm.js","components/TransferForm.js","components/FaucetForm.js","services/BcardApi.js","services/TatumSecured.js","services/firebase.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Users","users","length","userTable","map","user","index","key","firstName","lastName","email","UserRow","convertToCAD","amount","currency","state","rate","includes","console","log","startsWith","prices","btc","bank","usd","eth","chf","cad","getCustomers","fetch","response","json","getAccount","id","getVC","name","showTrades","getBalance","list","runTotal","acct","BTCprice","ETHprice","CHFprice","USDprice","BANKprice","currencyId","substring","baseCurrency","balInit","balance","accountBalance","balConv","parseFloat","newBTCMaster","newBTCAccount","data","xpub","method","headers","body","JSON","stringify","newUSDWallet","userId","getEthAddress","acctId","newWalletAddress","walletAddressInfo","getAllUsers","createUser","Accounts","accounts","hideId","account_list","tokenTable","sort","a","b","account","tokenImg","tokenName","tokenTag","tokenBalance","availableBalance","toFixed","replace","fiatBalance","src","alt","title","acctAddress","type","onClick","returnData","walletAddress","address","alert","accountingCurrency","AcctRow","moreRows","document","getElementsByClassName","isactive","toString","colSpan","row","classList","remove","showAll","Transactions","base","adminWhitelist","niceFiatFromString","priceString","digits","PriceBar","props","e","getPrices","UserLogo","custId","AlertButton","MakeButton","clickAction","img","label","DisplayBoard","getMaster","createTrade","newWalletKey","newETHWallet","onboardExecute","newXpubAccount","ref","useRef","qrImg","thisBalance","halfBalance","href","rel","target","buyOrders","sellOrders","style","marginLeft","spacing","marginBottom","hasVISA","hasDAO","current","value","uid","CreateUser","onChangeForm","createNewUser","loginUser","signInWithPhoneNumber","htmlFor","disabled","onChange","aria-describedby","placeholder","autoComplete","feesAccts","i","feesAcctUSD","feesAcctETH","feesAcctBANK","price","acct1","acct2","feeAccount","account1Id","account2Id","feeAmount","trade_conf","status","TradeForm","useState","inputs","setInputs","handleChange","event","selectedCurrency","getElementById","curVal","curText","options","selectedIndex","text","values","placeholderAmount","placeholderPrice","onSubmit","oldestAcct","currencies","preventDefault","defaultValue","data-index","feesAcctUSDC","selectedCurrencyOut","tokenOut","selectedCurrencyIn","tokenIn","mmAccountUSDC","mmAccountUSD","mmAccountBANK","data2","mmAccountETH","recipientAccountId","senderAccountId","responseTwo","SwapForm","accts","curOut","curOutText","curIn","curInText","myPrevBal","calcAmt","tokenAmt","totalAmt","innerHTML","matchAcct","find","maxAvailableOutput","currentBal","currencyOut","currencyIn","createSwap","thisMax","setMax","class","then","reference","message","TransferForm","myRecipients","bcardService","usdc","push","selectedAccount","actVal","actText","selAcct2","act2Val","act2Text","acctVal1","acctVal2","rcvAcct","createTransfer","rec","transfer_conf","FaucetForm","createFaucet","undefined","tokenOverride","responseXpub","input","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","provider","getFirestore","GoogleAuthProvider","setCustomParameters","prompt","auth","getAuth","languageCode","firebase","phoneNumber","appVerifier","confirmationResult","window","catch","error","signInWithEAndP","password","signInWithEmailAndPassword","userCredential","errorMessage","createUserWithEAndP","createUserWithEmailAndPassword","GetUniqueCust","TradeTableView","list_of_trades","trades","TradeRow","trade","pair","fill","time","created","tradeTable","App","signedIn","customers","recipients","currentVC","acctTx","userMap","Map","numberOfUsers","uniqCust","Set","setState","recaptchaVerifier","pw","account_info","mnemonic","EXT_ID","customerId","forEach","cust","externalId","info","key_data","vcDetail","useAcct","thisAccount","priceElapsed","Date","now","result","location","reload","prevProps","prevState","snapshot","RecaptchaVerifier","onAuthStateChanged","this","signOut","customer","extId","customerCountry","supply","basePair","baseRate","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0804dc62.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Header = () => {\n    return(\n        <div className=\"header\">\n            <h1>Bankless Card Client</h1>\n        </div>\n    )\n}","import React from 'react'\n\nexport const Users = ({users}) => {\n\n    // console.log('users length:::', users.length)\n    if (users.length === 0) return null\n\n    const UserRow = (user,index) => {\n\n        return(\n              <tr key = {index} className={index%2 === 0?'odd':'even'}>\n                  <td>{index + 1}</td>\n                  <td>{user.firstName}</td>\n                  <td>{user.lastName}</td>\n                  <td>{user.email}</td>\n              </tr>\n          )\n    }\n\n    const userTable = users.map((user,index) => UserRow(user,index))\n\n    return(\n        <div className=\"container\">\n            <h2>Users</h2>\n            <table className=\"table table-bordered\">\n                <thead>\n                <tr>\n                    <th>User Id</th>\n                    <th>Firstname</th>\n                    <th>Lastname</th>\n                    <th>Email</th>\n                </tr>\n                </thead>\n                <tbody>\n                    {userTable}\n                </tbody>\n            </table>\n        </div>\n    )\n}","export function convertToCAD(amount, currency, state) {\n\n  // console.log(amount, currency);    // , state);\n  // currency also can receive pair from trades\n\n  // MIGRATE TO convertToFIAT when all good.\n\n  let rate = 1;   // default to 1-1 token rate\n\n  // catch and reject all undefined requests for price conversion \n  if(currency) {\n\n    if(currency.includes(\"/\")) {\n      console.log(\"It's a pair price instead for trades - FIX req.\");\n\n      // add in pairs quotes here\n      if(currency.startsWith(\"BTC/VC_\")) {\n        // it's a BTC Trade for FIAT\n        rate = state.prices.btc || 27111;\n      } else if(currency.startsWith(\"BTC/\")) {\n        // it's a BTC trade for Crypto\n      } else if(currency.startsWith(\"BANK/\")) {\n        // it's a BANK trade for FIAT\n        rate = state.prices.bank;\n      } else if(currency === \"VC_USD/VC_CAD\") {\n        rate = state.prices.usd;\n      } \n\n    } else if(currency === \"ETH\") {\n      rate = state.prices.eth || 2111;\n    } else if(currency === \"BTC\" ) {\n      rate = state.prices.btc || 27111;\n    } else if (currency === \"VC_USD\" || currency === \"USDC\" || currency === \"USDC_V\") {\n      rate = state.prices.usd || 1.3;\n    } else if (currency === \"VC_CHF\" || currency === \"VC_CHF/VC_CAD\") {\n      rate = state.prices.chf || 1.3;\n    } else if (currency === \"BANK\" || currency === \"BANK/VC_CAD\") {\n      rate = state.prices.bank || 0.1;\n    } else if (currency === \"VC_CAD\" ) {\n      rate = state.prices.cad || 0.8;\n    } else {\n      console.log(\"Not in set of matched prices.\");\n    }\n\n    //finish result \n    // console.log(currency, state.prices,rate,amount*rate);\n    return amount * rate;\n\n\n  } else {\n    console.log(\"Check call, currency is UNDEFINED.\");\n    return 0;\n  }\n\n\n}","\n/** getPrices in BcardApi.js **/\n\n// list functions is access/use order\n\n// user login - firebase auth\n\n// getCustomers:\n// getAccounts:\n// \n\n\n// returning users (autologin) - auth from state\n\n// getCustomers: logged-in user ID matchup with CustID for tatum internal system\n\nexport async function getLedgerAccounts() {\n\n    const response = await fetch('/api/ledgeraccounts');\n    // console.log(response);\n    return await response.json();\n}\n\nexport async function getCustomers() {\n\n    console.log(\"Running getCustomers\");\n\n    const response = await fetch('/api/customers');\n    return await response.json();\n}\n\nexport async function getAccount(id) {\n\n    console.log(\"Running getAccount\");        // id here is CustID\n\n    const response = await fetch('/api/account/'+ id );\n    // console.log(response);                  // these are logging OK to console, but are not being displayed for third acct.\n    return await response.json();\n}\n\nexport async function getVC(name) {\n\n    console.log(name);\n\n    const response = await fetch('/api/vc/'+ name );\n    console.log(response);\n    return await response.json();\n}\n\nexport async function createTrade(data) {\n\n    console.log(data);\n\n    const response = await fetch(`/api/trade`, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(data)\n      })\n    return await response;\n}\n\nexport async function showTrades() {\n\n    const response = await fetch('/api/trades' );\n    // console.log(response);\n    console.log(\"function showTrades fetched from /api/trades\");\n    return await response.json();\n}\n\nexport async function getBalance(list, state) {\n    // console.log(list, state);\n\n    let myAccounts = list;\n    let runTotal = 0;\n\n    // map allows forEach account, do a thing\n    myAccounts.map(\n        (acct)=>{\n\n            // console.log(acct);\n            let BTCprice,\n                ETHprice,\n                CHFprice,\n                USDprice,\n                BANKprice = 0;\n\n          let currencyId = acct.currency\n          if( acct.currency.startsWith(\"VC_\") ) {\n            // console.log('hotfix');\n            currencyId = currencyId.substring(3);               // remove the VC to get the FIAT FX\n          }\n\n          // this will depend on default currency (CAD in my case)\n\n          // console.log(state.prices)\n          // console.log(state.baseCurrency)\n          if(state.prices.length < 1) {\n            // no prices yet...\n            console.log(\"Placeholder CAD Hardcoded\",state.prices);\n\n            BTCprice = 21741;\n            ETHprice = 1526;\n            CHFprice = 1.404;\n            USDprice = 1.341;\n            BANKprice = 0.1;\n\n          } else {\n            // e.g. if BASEprice is 1, account BASE is set to CAD, then \n              // prices should be listed/displayed in home currency\n\n              const BASEprice = 1;\n\n              if(state.baseCurrency === \"USD\"){\n                // usd defaults - hard coded if prices not set\n                   BTCprice = state.prices.btc || 16104/BASEprice;\n                   ETHprice = state.prices.eth || 1124/BASEprice;\n                   CHFprice = state.prices.chf || 1.0/BASEprice;\n                   USDprice = state.prices.usd || 1.043/BASEprice;\n                   BANKprice = state.prices.bank || 0.08/BASEprice;\n              } else {\n                // cad defaults\n                   BTCprice = state.prices.btc || 21741/BASEprice;\n                   ETHprice = state.prices.eth || 1526/BASEprice;\n                   CHFprice = state.prices.chf || 1.404/BASEprice;\n                   USDprice = state.prices.usd || 1.341/BASEprice;\n                   BANKprice = state.prices.bank || 0.1/BASEprice;\n              }\n\n              \n\n\n              let balInit = acct.balance.accountBalance;\n              let balConv = parseFloat(balInit);  //* parseFloat(BTCprice);\n              // let thisPrice = CADprice;\n\n              // console.log(currencyId);\n\n              if(currencyId === \"BTC\") {\n                balConv = parseFloat(balInit) * parseFloat(BTCprice);\n              } else if(currencyId === \"ETH\"){\n                balConv = parseFloat(balInit) * parseFloat(ETHprice);\n              } else if(currencyId === \"CHF\") {\n                balConv = parseFloat(balInit) * parseFloat(CHFprice);\n              } else if(currencyId === \"USD\") {\n                balConv = parseFloat(balInit) * parseFloat(USDprice);\n              } else if(currencyId === \"BANK\") {\n                balConv = parseFloat(balInit) * parseFloat(BANKprice);\n              }\n\n              // console.log(balConv);\n\n              runTotal = runTotal + balConv;        // sum total in default currency (CAD)\n\n              return runTotal;\n          }\n\n        return runTotal;                // return sum on price failure\n\n\n      });\n\n    return runTotal;                // return sum when completed\n}\n\nexport async function newBTCMaster(){\n    const response = await fetch('/api/bitcoin/wallet');\n    console.log(response);\n    return await response.json();\n}\n\nexport async function newBTCAccount(data) {\n\n    console.log(data);\n\n    if(data.xpub === \"\"){\n        // fail without xpub - this is ok for internal accounts without blockchain/wallet required, but YMMV\n        return false;\n    }\n\n    const response = await fetch('/api/ledger/account', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(data)\n      });\n    // console.log(response);\n    // return await response.json();\n    return await response;\n}\n\nexport async function newUSDWallet(userId) {\n\n    console.log(userId);\n    \n    if(userId === \"\"){\n        // fail without xpub - this is ok for internal accounts without blockchain/wallet required, but YMMV\n        return false;\n    }\n\n    let data = {\n        \"currency\": \"VC_USD\",\n        \"customer\": {\n            \"accountingCurrency\": \"USD\",            \n            \"externalId\": userId,                  \n        },\n        \"accountingCurrency\": \"USD\"\n    }\n\n    const response = await fetch('/api/ledger/account/', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(data)\n      });\n\n    console.log(response);\n    return await response;\n}\n\n\n\nexport async function getEthAddress(acctId, index) {\n\n    console.log(acctId, index);\n\n    const response = await fetch('/api/ethereum/address/'+acctId+'/'+index );\n    console.log(response);\n    return await response.json();\n}\n\nexport async function newWalletAddress(id) {\n\n    console.log(id);\n\n    if(id === \"accountId\") {\n        // default account id is for BCARD_FEES BTC account with id: 636bb54f5f95f8f981cbc519\n        id = \"636bb54f5f95f8f981cbc519\";\n    }\n\n    const response = await fetch('/api/address/account/'+ id );\n    console.log(response);\n    return await response.json();\n}\n\nexport async function walletAddressInfo(id) {\n    console.log(\"Get Info Modal for Account with Id: \" + id);\n\n\n    if(id === \"accountId\" || id === \"\") {\n        // default account id is for BCARD_FEES BTC account with id: 636bb54f5f95f8f981cbc519\n        id = \"636bb54f5f95f8f981cbc519\";\n    }\n\n    const response = await fetch('/api/ledger/account/'+ id );\n    console.log(response);\n    return await response.json();\n}\n\n\n\n/********************************* Obsolete? ******************************/\n\nexport async function getAllUsers() {\n\n    const response = await fetch('/api/users');\n    return await response.json();\n}\n\n\nexport async function createUser(data) {\n    const response = await fetch(`/api/user`, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({user: data})\n      })\n    return await response.json();\n}","import React from 'react'\n\nimport {convertToCAD} from '../utils/convertToCAD'\nimport {walletAddressInfo} from '../services/UserService'\n\nexport const Accounts = ({state, hideId}) => {\n\n    let accounts = state.account_list;\n\n    if (accounts.length === 0) {\n        // console.log('accounts length:::', accounts.length)\n        return null;\n    } else {\n        // console.log('accounts length:::', accounts.length)\n    }\n\n    const AcctRow = (account,index) => {\n\n        //  console.log(account.accountingCurrency);\n\n        let tokenImg = \"img/bLogo.png\";\n        let tokenName = \"Bankless DAO\";\n        let tokenTag = \"BANK\";\n\n        let tokenBalance = parseFloat(account.balance.availableBalance).toFixed(4).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');;\n        let fiatBalance = convertToCAD(account.balance.accountBalance,account.currency,state).toFixed(3).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');;\n\n        if(account.currency === \"BANK\"){\n            // ok with defaults\n        } else if(account.currency === \"VC_USD\"){\n            tokenImg = \"img/us-flag-icon.png\";\n            tokenName = \"US Dollar FIAT\";\n            tokenTag = \"USD\";\n        } else if(account.currency === \"USDC_V\"){\n            tokenImg = \"img/usdcToken.jpeg\";\n            tokenName = \"USDC VISA\";\n            tokenTag = \"USDC\";\n        } else if(account.currency === \"ETH\"){\n            tokenImg = \"img/ethToken.png\";\n            tokenName = \"Ethereum Testnet\";\n            tokenTag = \"ETH (sep)\";\n\n            tokenBalance = parseFloat(account.balance.availableBalance).toFixed(6);\n        }\n\n\n        return(\n              <tr key={index} className={index > 1?'surplus':''}>\n                  <td>\n                    <div className=\"badgeContainer\">\n                        <img className=\"tokenBadge\" src={tokenImg} alt=\"BDAO\" />\n                    </div>\n                  </td>\n                  <td className=\"tokenLabel\" title={ state.acctAddress || \"SHOW WALLET ADDRESS ON HOVER: \" }>\n                  {tokenName} <span>-1.81%</span><br/>\n                  \n                    <div\n                      type=\"btn\"\n                      onClick={async () => {\n                        let returnData = await walletAddressInfo(account.id);\n                        console.log(returnData);\n                        if(returnData[0]) {\n\n                            let walletAddress = returnData[0].address\n                            alert(\"Address is:\" + walletAddress);\n                            console.log(\"Need to setState here to set address & QR\");\n                            console.log(state);\n                            \n                        } else {\n                            alert(\"Submit Deposit to fund FIAT Account\");\n                            console.log(\"It's a FIAT account - likely - or no addresses created\");\n                        }\n                        \n                      }} >\n                      <small>{tokenTag}</small>\n                    </div>\n                  </td>\n                  <td>\n                    {tokenBalance} <small>{account.currency}</small><br/>\n                    <span>$ { fiatBalance }</span> <small>{account.accountingCurrency}</small>\n                  </td>\n                  \n              </tr>\n          )\n    }\n\n    // let fiatBalance = convertToCAD(account.balance.accountBalance,account.currency,state).toFixed(3).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');;\n\n\n    const tokenTable = accounts.sort((a,b) => a.balance.accountBalance < b.balance.accountBalance ? 1 : -1).map((user,index) => AcctRow(user,index))\n\n    let moreShow = false;\n\n    let moreRows = document.getElementsByClassName('surplus');\n    // console.log(moreRows);\n\n    function showAll(moreRows) {\n        for (let row of moreRows) {\n            console.log(row);\n            row.classList.remove('surplus')\n        }\n    }\n    \n    // moreRows.forEach(element => console.log(element))\n\n    return(\n        <div className=\"container\">\n            <h2>My Tokens</h2>\n            <table className=\"table\" isactive={moreShow.toString()}>\n                {/*<thead>\n                <tr>\n                    <th>TokenLogo</th>\n                    <th>Info</th>\n                    <th>token & balance</th>\n                </tr>\n                </thead>*/}\n                <tbody>\n                    {tokenTable}\n                </tbody>\n                <tfoot><tr>{accounts.length > 2 &&\n                    <td colSpan=\"3\"><hr/><br/>\n                        <button\n                            onClick={() => {\n                                showAll(moreRows)\n                            }}\n                        >...show more ... </button>\n                    </td>\n                }</tr></tfoot>\n            </table>\n        </div>\n    )\n}","import React from 'react'\n\nimport {convertToCAD} from '../utils/convertToCAD'\n// import {walletAddressInfo} from '../services/UserService'\n\nexport const Transactions = ({state, hideId}) => {\n\n    let accounts = state.account_list;\n\n    if (accounts.length === 0) {\n        // console.log('accounts length:::', accounts.length)\n        return null;\n    } else {\n        // console.log('accounts length:::', accounts.length)\n    }\n\n    const AcctRow = (account,index) => {\n\n        return(\n              <tr key = {index} className={index%2 === 0?'odd':'even'}>\n                  <td>{index + 1}</td>\n                  { !hideId && \n                    <td>\n                    <button \n                      type=\"btn\"\n                      onClick={() =>  {\n                        // this.setState({acctId: account.id}); \n                        console.log(\"NOT SHOWN: Need to setState with click here -> emit event?\");\n                        // also popup account info alert panel\n                        // walletAddressInfo(account.id);\n                      }} >\n                      \n                      {account.id}\n                    </button></td> \n                  }\n                  <td title={ state.acctAddress || \"SHOW WALLET ADDRESS ON HOVER: \" }>\n                    <button \n                      type=\"btn\"\n                      onClick={async () => {} } >\n                        {account.currency}\n                    </button>\n                  </td>\n                  <td>{account.balance.availableBalance}</td>\n                  <td>$ { convertToCAD(account.balance.accountBalance,account.currency,state).toFixed(3) }</td>\n              </tr>\n          )\n    }\n\n    const userTable = accounts.map((user,index) => AcctRow(user,index))\n\n    return(\n        <div className=\"container\">\n            <p>Select Wallet to Display Transactions</p>\n            <h5>TBD: List of ETH transactions (public chain)</h5>\n            <h5>TBD: List of ETH internal transactions (tatum)</h5>\n            <h2>Transactions</h2>\n            <table className=\"table table-bordered\">\n                <thead>\n                <tr>\n                    <th>Account #</th>\n                    <th>id</th>\n                    <th>currency</th>\n                    <th>token</th>\n                    <th>{state.prices.base} balance</th>\n                </tr>\n                </thead>\n                <tbody>\n                    {userTable}\n                </tbody>\n            </table>\n        </div>\n    )\n}","let adminWhitelist = [\n\t\"6388bcb873184d447e74ac70\",\t\t//testnet service account\n\n\t\"6357fa3d7511407e6d732fe4\",\t\t// mainnet original service account\n\t\"tom@tranmer.ca\",\n];\n\nexport { adminWhitelist };","import React, {useRef} from 'react'\nimport { Accounts } from './Accounts'\nimport { Transactions } from './Transactions'\n\nimport {adminWhitelist} from '../utils/adminWhitelist'\n\n\nlet spacing = 5;\n\nfunction niceFiatFromString(priceString, digits) {\n    if(digits) return \"$\" + parseFloat(priceString).toFixed(digits);\n    return \"$\" + parseFloat(priceString).toFixed(3);        // 3 default\n}\n\nfunction PriceBar(props) {\n  // console.log(props.state);\n  // console.log(props.state.prices)\n\n  // Confirm CAD as price base or adjust\n  if(props.state.baseCurrency === \"CAD\" || props.state.baseCurrency === \"USD\"){             //props.state.prices.base === \"CAD\"\n    return (\n      <>\n        {/*<h4>{props.state.prices.eth} {props.state.prices.btc} {props.state.prices.usd} {props.state.prices.chf}</h4>*/}\n        <div className=\"container text-center priceBoxes\">\n            <div className=\"row\">\n                <div className=\"col top\">\n                    <h4>currencyBase => {props.state.prices.base}</h4>\n                </div>\n            </div>\n          <div className=\"row\">\n            <div className=\"col order-1\">\n              ETH<br />\n              { niceFiatFromString(props.state.prices.eth) }\n            </div>\n            <div className=\"col order-2\">\n              BTC<br />\n              { niceFiatFromString(props.state.prices.btc) }\n            </div>\n            <div className=\"col order-3\">\n              BANK<br />\n              { niceFiatFromString(props.state.prices.bank, 4) }\n            </div>\n            <div className=\"col order-4\">\n              USD<br />\n              { niceFiatFromString(props.state.prices.usd) }\n            </div>\n            <div className=\"col order-5\">\n              CHF<br />\n              { niceFiatFromString(props.state.prices.chf) }\n            </div>\n          </div>\n        </div>\n      </>\n    )\n  } else {\n    return (\n      <h4>Login & Complete onboarding to <button type=\"button\" onClick={ (e) => props.getPrices() } >Get Prices</button></h4>)\n  }\n\n  \n}\n\nfunction UserLogo(props) {\n\n    // should return a profile logo based on input graphic\n    // css style for circle crop as per figma\n\n    console.log(props.custId);      // use custId to get stored profile picture\n\n    return (\n        <div className=\"profileContainer\" onClick={() => console.log(\"User Panel\")}>\n            <img className='userLogo' src='https://via.placeholder.com/300' alt='' />\n        </div>\n        )\n}\n\nfunction AlertButton(props) {\n\n    // should return a profile logo based on input graphic\n    // css style for circle crop as per figma\n\n    return (\n        <div className=\"alertContainer\">\n            <img className='alertLogo' src='https://via.placeholder.com/300' alt='' />\n        </div>\n        )\n}\n\n\nfunction MakeButton(props) {\n    return (\n        <div className=\"buttonContainer\">\n            <button className=\"btn btn-lg btn-danger bigBtn\" onClick={props.clickAction}>\n                <img src={props.img} alt={props.alt} />\n                &nbsp;\n                {props.label}\n            </button>\n        </div>\n        )\n}\n\nexport const DisplayBoard = ({ state, getAllUsers, getPrices, getAccount, getMaster, getBalance, getCustomers, createTrade, showTrades, newBTCMaster, newBTCAccount, newWalletAddress, getEthAddress, walletAddressInfo, newWalletKey, newUSDWallet, newETHWallet, onboardExecute, newXpubAccount}) => {\n\n        const ref = useRef(null);\n\n        // console.log(adminWhitelist);\n\n        // state for component - testing\n        // state = {}\n\n        // setState({ signedIn: true });\n\n        // console.log(this.state);\n\n        // determine if user already has a VISA account\n\n\n\n        // determine if user already has a BANK token account\n\n\n\n\n        let qrImg = \"No Wallet Selected - Click Account to display QR.\";\n        let sepoliaTestnet = \"Need Sepolia ETH? Fund Your Address Here:\";\n        if(state.acctAddress){\n            qrImg = \"https://api.qrserver.com/v1/create-qr-code/?data=\" + state.acctAddress + \"&amp;size=150x150\";\n        }\n\n        let thisBalance = state.balance.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n        let halfBalance = ((state.balance/2).toFixed(2)).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n\n    return(\n        <div>\n            <PriceBar state={state} getPrices={getPrices} />\n            <div className=\"display-board\">\n                <div>\n                    <hr />\n                    <h6>\n                        <AlertButton />\n                        {state.custId ?\n                            <UserLogo custId={state.custId} />\n                            :  \"[not set]\"\n                        }\n                    </h6>\n                    <h5 className=\"balanceLabel\">\n                        Total Balance&nbsp;\n                        <img src=\"img/eye-balance.png\" alt=\"Show Balance\" />\n                    </h5>\n\n                    <div className=\"number\">\n                        ${state.balance ? thisBalance : \"[...loading...]\"} <small>{state.prices.base}</small>\n                    </div>\n                    <div className=\"row\">\n                        <h3 className=\"text-center\">Assets Value <span className=\"hl\">|</span> ${ halfBalance }</h3>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            <MakeButton \n                                label=\"Receive\" \n                                img=\"img/receive-arrow.png\" \n                                alt=\"Receive Button\" \n                                clickAction={() => console.log(\"Receive Button Press\")}\n                        />\n                        </div>\n                        <div className=\"col\">\n                            <MakeButton \n                                label=\"Send\" \n                                img=\"img/send-arrow.png\" \n                                alt=\"Send Button\" \n                                clickAction={() => console.log(\"Send Button Press\")}\n                            />\n                        </div>\n                    </div>\n                    {/* <!-- Accounts list conditinally loaded here --> **/}\n                    <div className=\"row\">\n                      <Accounts state={state} hideId={true} walletAddressInfo={walletAddressInfo} />\n                    </div>\n\n                    {state.acctAddress ?\n                        <div className=\"row\">\n                            <div className=\"qrContainer\">\n                                <h3>Selected Wallet QR</h3>\n                                <img src={qrImg} alt={\"Wallet Address QR for \" + state.acctAddress} title={state.acctAddress} />\n                                <p><strong>Public Address:</strong><br />{state.acctAddress}</p>\n                            </div>\n                        </div> :\n                        <div className=\"row\">\n                            {qrImg}\n                            <a href=\"https://faucet.sepolia.dev/\" rel=\"noopener noreferrer\" target=\"_blank\">{sepoliaTestnet}</a>\n                        </div> \n                    }\n\n                    {/* <!-- Transactions list conditinally loaded here --> **/}\n                    <div className=\"row\">\n                        {state.acctAddress ?\n                            <Transactions state={state} hideId={true} walletAddressInfo={walletAddressInfo} /> :\n                            <p>- Select Account to view transactions</p>\n                        }\n                    </div>\n\n                    <hr />\n                    <fieldset>\n                        {state.custId &&\n                        <div>\n                            <h4> Open Book has {state.buyOrders.length + state.sellOrders.length} (buy+sell) active trades. </h4>\n                            <p>\n                                <button \n                                    type=\"button\" \n                                    onClick={(e) => getPrices()} \n                                    className=\"btn btn-warning\"\n                                    title=\"Refresh internal token prices manually\"\n                                    >   \n                                        Refresh Prices\n                                </button>\n                                <button \n                                    type=\"button\" \n                                    style={{marginLeft: spacing + \"px\"}} \n                                    onClick={(e) => showTrades()} \n                                    className=\"btn btn-warning\">\n                                        Refresh Trades\n                                </button>\n                                <button \n                                    type=\"button\" \n                                    style={{marginLeft: spacing + \"px\"}} \n                                    onClick={ (e) => getMaster(state.custId) } \n                                    className=\"btn btn-warning\">\n                                        Refresh Accounts\n                                </button>\n                                 {/*<button \n                                    type=\"button\" \n                                    style={{marginLeft: spacing + \"px\"}} \n                                    onClick={(e) => createTrade(\"BUY\", \"VC_CHF\", \"3.75\", \"1.325\")} \n                                    className=\"btn btn-warning\">\n                                        Create Sample Trade: BUY (VC_CHF, 3.75, 1.325)\n                                </button>\n                                 <button \n                                    type=\"button\" \n                                    style={{marginLeft: spacing + \"px\"}} \n                                    onClick={(e) => createTrade(\"SELL\", \"VC_USD\", \"11.25\", \"1.325\")} \n                                    className=\"btn btn-warning\">\n                                        Create Sample Trade: SELL (VC_USD, 11.25, 1.325)\n                                </button>*/}\n\n                            </p>\n                        </div>\n                      }\n                \n\n                    </fieldset>\n                </div>\n\n                <hr />\n\n                <div className=\"btn-container\">\n                    \n                    <h4>TATUM System Controls -> for {state.user.email}</h4>\n\n                    {/* user is logged in BUT not assigned a custID - ONBOARDING */}\n                    {!state.custId && state.user && \n                        <>\n                            <button \n                                type=\"button\" \n                                onClick={() => onboardExecute()} \n                                style={{marginLeft: spacing + \"px\", marginBottom:\"10px\"}} \n                                className=\"btn btn-primary\"\n                                title=\"Setup new user with USD wallet and ETH wallet & address for input\"\n                                >   \n                                    Onboard New User (create FIAT, ETH wallets)\n                            </button>\n\n                            {/*<button \n                                type=\"button\" \n                                onClick={() => console.log(\"IMPORT USING MNEMONIC\")} \n                                style={{marginLeft: spacing + \"px\", marginBottom:\"10px\"}} \n                                className=\"btn btn-warning\"\n                                title=\"Import your own Non-Custodial Wallet\"\n                                >   \n                                    Import Wallet (NC)\n                            </button>*/}\n                        </>\n                    }\n\n                {state.custId && <>\n\n                    {!state.hasVISA &&\n\n                            <button \n                                type=\"button\"\n                                style={{marginLeft: spacing + \"px\"}}\n                                className=\"btn btn-secondary\"\n                                onClick={(e) => newETHWallet('usdc')} \n                                >\n                                    New VISA (USDC Wallet)\n                            </button>  \n\n                    }\n                    {!state.hasDAO &&\n\n                            <button \n                                type=\"button\"\n                                style={{marginLeft: spacing + \"px\"}}\n                                className=\"btn btn-secondary\"\n                                onClick={(e) => newETHWallet('BANK')} \n                                >\n                                    Add BANK (ETH Wallet)\n                            </button> \n                    }\n\n                    </>\n                }\n                    \n                    <hr />\n                    \n                    \n                    \n                \n                    <hr />\n                    {/* AUTH REQUIRED - For SERVICE ACCOUNTS ONLY */}\n                    {/* AUTH with whitelist for admins using email or custId */}\n\n                    { ( adminWhitelist.includes(state.user.email) || adminWhitelist.includes(state.custId) ) &&\n                        <>\n                        <h3>ADMIN ONLY</h3>\n                        <h5>Manual Triggers</h5>\n                        <button \n                        type=\"button\" \n                        style={{marginLeft: spacing + \"px\"}} \n                        onClick={(e) => getCustomers()} \n                        className=\"btn btn-warning\"\n                        title=\"Refresh the list of all customers below - click to select\">\n                            Refresh Customers\n                        </button>\n                        <button \n                            type=\"button\" \n                            style={{marginLeft: spacing + \"px\"}} \n                            onClick={ (e) => getAccount(state.custId) } \n                            className=\"btn btn-warning\">\n                                Refresh Account List ({state.custId || \"BCARD_ONE\"})\n                        </button> {state.custId ? \"Selected\" : \"UPGRADE_ADMIN\"}\n                        <div>\n                            <h4>BCARD Internal - TBD</h4>\n                            <button type=\"button\" onClick={(e) => getAllUsers()} className=\"btn btn-warning\">Get all Users</button>\n                            <hr />\n                            <h4>Custodial Wallets - in order</h4>\n                            {state.account_list.length === 0 &&\n                                <div>\n                                    <button \n                                        type=\"button\"\n                                        style={{marginLeft: spacing + \"px\"}}\n                                        className=\"btn btn-secondary\"\n                                        onClick={(e) => newUSDWallet()} \n                                        >\n                                            Create New (VC_USD Wallet)\n                                    </button>  -> for {state.user.email} (if accounts=0)\n                                </div>\n                            }\n\n                            {state.account_list.length > 1 &&\n                                <div>\n                                    <button \n                                        type=\"button\"\n                                        style={{marginLeft: spacing + \"px\"}}\n                                        className=\"btn btn-secondary\"\n                                        onClick={(e) => newETHWallet()} \n                                        >\n                                            Create New (ETH Wallet)\n                                    </button>  -> for {state.user.email} (if accounts=1+)\n                                </div>\n                            }\n\n                            <hr />\n                            <h4>Tests</h4>\n                            <button \n                                type=\"button\"\n                                style={{marginLeft: spacing + \"px\"}}\n                                className=\"btn btn-secondary\"\n                                onClick={(e) => newBTCMaster()} \n                                >\n                                    Create New (BTC Master) -> xpub, mnemonic\n                            </button>\n                            <button \n                                type=\"button\"\n                                style={{marginLeft: spacing + \"px\"}}\n                                className=\"btn btn-primary\"\n                                onClick={(e) => newBTCAccount(\"BTC\", \"BCARD_FEES\", \"xpub\")} \n                                >\n                                    Create New (Account: \"BTC\", \"BCARD_FEES\", \"xpub\") -> accountId\n                            </button>\n                            \n                            <button \n                                type=\"button\"\n                                style={{marginLeft: spacing + \"px\"}}\n                                className=\"btn btn-primary\"\n                                onClick={(e) => newWalletKey(0, ref.current.value)}\n                                >\n                                    Create New (PrivateKey: 0, \"mnemonic ->\")\n                            </button>\n                            <textarea ref={ref} id=\"message\" name=\"message\" />\n                            <hr />\n                            <button \n                                type=\"button\"\n                                style={{marginLeft: spacing + \"px\"}}\n                                className=\"btn btn-primary\"\n                                onClick={(e) => walletAddressInfo(state.acctId)} \n                                >\n                                    Get Info (Wallet: {state.acctId || \"not selected\"})\n                            </button>\n\n                            <button \n                                type=\"button\"\n                                style={{marginLeft: spacing + \"px\"}}\n                                className=\"btn btn-primary\"\n                                onClick={(e) => newXpubAccount(\"ETH\", state.user.uid, \"xpub6DbQz3y2wQHZkkw85c1JxJJeBVNqH2SpuApM5i2Ta1jeFGEebeNLJAMDEJD1uYKEaCF9JgTNPFDanJe3bccNsi4Vf99ngjLY5AVUfVtEYw2\")} \n                                >\n                                    Backend2(HC) -> \n                            </button>\n                            Create New (Account: \"ETH\", \"USER.UID\", \"xpub\") -> accountId\n                            <button \n                                type=\"button\"\n                                style={{marginLeft: spacing + \"px\"}}\n                                className=\"btn btn-primary\"\n                                onClick={(e) => getEthAddress(state.acctId, 0)} \n                                >\n                                    Create New (ETH Address: {state.acctId || \"[click on acct]\"} Index:[0])\n                            </button>\n\n                            \n                        </div>\n                        {/*<button \n                            type=\"button\" \n                            style={{marginLeft: spacing + \"px\"}} \n                            onClick={ (e) => getBalance() } \n                            className=\"btn btn-warning\">\n                                Update Cust. Balance ({state.custId})\n                        </button>*/}\n                        </>\n                    }\n                    \n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react'\n\n\nconst CreateUser = ({onChangeForm, createNewUser, loginUser, user, signInWithPhoneNumber }) => {\n\n\n    return(\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-12 mrgnbtm\">\n                    <h2>Login/Create User</h2>\n                <form>\n                    <div className=\"row\">\n                        <div className=\"form-group col-md-12\">\n                            <label htmlFor=\"exampleInputEmail1\">Name</label>\n                            <input disabled type=\"text\" onChange={(e) => onChangeForm(e)}  className=\"form-control\" name=\"firstname\" id=\"firstname\" aria-describedby=\"emailHelp\" placeholder=\"User Name (optional)\" />\n                        </div>\n                        <div className=\"form-group col-md-12\">\n                            <label htmlFor=\"exampleInputEmail1\">Email</label>\n                            <input type=\"text\" onChange={(e) => onChangeForm(e)} className=\"form-control\" name=\"email\" id=\"email\" autoComplete=\"current-email\" aria-describedby=\"emailHelp\" placeholder=\"Email\" />\n                        </div>\n                        <div className=\"form-group col-md-12\">\n                            <label htmlFor=\"exampleInputPassword1\">Password</label>\n                            <input type=\"password\" onChange={(e) => onChangeForm(e)} className=\"form-control\" name=\"password\" id=\"password\" autoComplete=\"current-password\" placeholder=\"Password\" />\n                        </div>\n                    </div>\n                    <button type=\"button\" onClick= {(e) => createNewUser(e)} className=\"btn btn-danger\">Create New</button>\n\n                    <button id=\"\" type=\"button\" style={{marginLeft:\"5px\"}} onClick= {(e) => loginUser()} className=\"btn btn-warning\">Login</button>\n\n                    <button id=\"sign-in-button\" type=\"button\" style={{marginLeft:\"5px\"}} onClick= {(e) => signInWithPhoneNumber()} className=\"btn btn-warning\">Phone Login</button>\n                </form>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CreateUser","//const feesAcctCAD = \"637e60e2600305b81f027d14\";\n// const feesAcctBTC = \"636bb54f5f95f8f981cbc519\";\n\nconst feesAcctUSD = \"6388bfd1345a7219f7e369e9\";  // <- testnet    //\"637e5f3a52623024fa898d37\";\nconst feesAcctETH = \"6388c0988d6cd5b292665512\";   // <- testnet     //\"6378febd6921215dd123ca05\";\nconst feesAcctBANK = \"6388c160ff83b71314125036\";  // <- testnet     // \"6378fee8cf1a9e005ba957be\";\nconst feesAcctUSDC = \"6388c199bc0ca02aee4537c0\";\t\t// <- testnet\n\nlet feesAccts = {\n\t\"USD\": feesAcctUSD,\n\t\"ETH\": feesAcctETH,\n\t\"BANK\": feesAcctBANK,\n\t\"USDC\": feesAcctUSDC\n}\n\nexport { feesAccts };","import React, { useState } from 'react'\nimport { showTrades } from '../services/UserService'\nimport { feesAccts } from '../services/feesAccounts'\n\n// import these constants\nconst feesAcctCAD = \"637e60e2600305b81f027d14\";\nconst feesAcctBTC = \"636bb54f5f95f8f981cbc519\";\n\nconst feesAcctUSD = feesAccts.USD;\nconst feesAcctETH = feesAccts.ETH;\nconst feesAcctBANK = feesAccts.BANK;\n\n// console.log(feesAccts)\n\nasync function createTrade(type, currency, amount, price, acct1, acct2, base){\n\n    console.log(type, currency, amount, price, acct1, acct2, base);\n\n    // console.log(this.state);\n\n\n    // confirm ID from state\n    // send id to function getAccount\n    // and receive back an account list array of objects\n\n    // BCARD SERVICE ACCOUNTS\n\n    // CHF: 63580d55cc7112263d5d04fd\n    // CAD: 63583054e6657347720ffe1d\n    // USD: 635832ba97c17c93c28f0168\n\n    // NEW : BCARD FEE ACCOUNTS\n    // BTC:\n    // ETH:\n    // VC_USD:\n    // VC_CAD:\n    // VC_CHF:\n\n    // for BUY TXs\n\n    let feeAccount = feesAcctUSD;    // default USD on BCARD_ONE\n\n\n    console.log(\"Now need to dynamically retrieve the account Ids from the user selection form.\");\n\n\n    // if it is a type BUY then we are BUYING CAD and SELLING _currency_\n\n    let account1Id;\n    if(acct1){\n      account1Id = acct1;    // \"63580d55cc7112263d5d04fd\";\n    }\n\n    console.log(\"Need to do some determination here to figure out base currency then account number\");\n    let account2Id;\n    let baseCurrency; // = \"VC_CAD\";\n\n    // base currency MUST match base currency of account 2 provided.\n    console.log(base);\n\n    // if it is a SELL, then acct2 is user account where funds will be deposited\n    // if it is a BUY, then acct2 is user account where funds will come from.\n\n    if(acct2){\n      account2Id = acct2;    // \"63580d55cc7112263d5d04fd\";\n      baseCurrency = base;\n    } else {\n      // fund with BCARD VC_CAD Wallet\n      baseCurrency = \"VC_CAD\";\n      account2Id = \"63583054e6657347720ffe1d\";\n    }\n\n\n    console.log(currency);\n\n    // feeAccount needs to correspond to the same as currencyAccount1 (currency)\n    if(type === \"SELL\"){\n\n      // switch(currency) {\n      //   case \"VC_CHF\": \n      //     feeAccount = \"63580d55cc7112263d5d04fd\";\n      //     break;\n      //   case \"VC_USD\":\n      //     feeAccount = feesAcctUSD; \n      //     break;\n      // }\n\n\n\n      if(currency === \"VC_CHF\"){\n        feeAccount = \"63580d55cc7112263d5d04fd\";      // SRV CHF Fees Account \n      } else if(currency === \"VC_USD\"){\n        feeAccount = feesAcctUSD;      // SRV USD Fees Account\n      } else if(currency === \"VC_CAD\"){\n        feeAccount = feesAcctCAD;      // SRV USD Fees Account\n      } else if(currency === \"BTC\"){\n        feeAccount = feesAcctBTC;      // OK BTC Fees Account -> Correct (final)\n      } else if(currency === \"ETH\"){\n        feeAccount = feesAcctETH;      // SRV ETH Fees Account\n      } else if(currency === \"BANK\"){\n        feeAccount = feesAcctBANK;      // OK BANK Fees Account\n      }\n    } else if(type === \"BUY\" && baseCurrency === 'VC_USD') {\n\n      // then user will be BUYING with USD, so fees must be captured to USD Account\n\n      // if(currency === \"VC_CHF\"){\n      //   feeAccount = \"63580d55cc7112263d5d04fd\";      // SRV CHF Fees Account\n      // } else if(currency === \"VC_USD\"){\n        feeAccount = feesAcctUSD;      // SRV USD Fees Account\n      // } else if(currency === \"BTC\"){\n      //   feeAccount = \"636bb54f5f95f8f981cbc519\";      // OK BTC Fees Account -> Correct (final)\n      // } else if(currency === \"ETH\"){\n      //   feeAccount = \"6357fc0da1f24abbb23ff88b\";      // SRV ETH Fees Account\n      // } else if(currency === \"BANK\"){\n      //   feeAccount = \"6378fee8cf1a9e005ba957be\";      // OK BANK Fees Account\n      // }\n    }\n\n    let feeAmount = 0.01;\n\n    // maybe have 0 fees for placing an order (maker) and low fees for closing one (taker).\n    \n\n    // detail needed to exexute the trade request via API\n    let data = {\n      \"type\": type,\n      \"price\": price,\n      \"amount\": amount,\n      \"pair\": currency+\"/\"+baseCurrency,\n      \"currency1AccountId\": account1Id,\n      \"currency2AccountId\": account2Id,\n      \"fee\": feeAmount,\n      \"feeAccountId\": feeAccount     \n    }\n\n    console.log(data);\n\n    const response = await fetch(`/api/trade`, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(data)\n      })\n    await response;\n\n    let trade_conf = response;\n\n    console.log(trade_conf);\n    console.log(\"RETURN FROM TATUM API FOR CREATE TRADE - inline function\");\n    alert(\"Your Trade has been successfully posted to our order book with status: \"+trade_conf.status+\" & fee: \" + feeAmount + \"%\");  \n\n    showTrades();\n\n    // refresh the trades display\n    // showTrades()\n    //   .then(trades => {\n\n    //     console.log(trades);\n    //     let buyOrders = trades[0];\n    //     let sellOrders = trades[1];\n\n    //     this.setState({ buyOrders: buyOrders, sellOrders: sellOrders });\n    //     // this.setState({  });\n\n    //     console.log(\"THIS FUNCTION RETURN FROM CALL BCARD API FOR TRADES\")\n    //     // this.setState({users: users, numberOfUsers: users.length})\n    //   });\n\n  }\n\nexport function TradeForm(props) {\n\n    // console.log(props.state.custId);   // use PROPS to pass in the account list for the selected user with which to buld the options for selection\n\n    if(props.state.account_list.length > 1) {\n      //no customer selected, use service account as default to build the trade UI\n      // console.log(\"No customer selected - dummy data - Use Service Acct\")\n\n      // var temp = getAccount(\"6357fa3d7511407e6d732fe4\");\n      // console.log(temp);  // this is account list for id provided\n      // console.log(props.state.account_list);\n    }\n\n    // const [solo, setSolo] = useState({});\n\n    let solo = \"XYZ\";\n    var acct1 = \"\";\n\n\n    const [inputs, setInputs] = useState({});\n    // const [acct, setAcct] = useState({});\n    const handleSubmit = (event) => {\n        // alert('Your balance is: ' + balance);\n        console.log(\"SUBMIT:\", inputs, acct1);\n\n        console.log(\"Find a way to submit this request to API\", acct1);\n\n        let selectedCurrency = document.getElementById('sel-cur');\n        let curVal = selectedCurrency.value;    // should be account id for selected currency\n\n        acct1 = curVal;\n\n        console.log(\"Need to get account number for base Currency Account\")\n        console.log(\"Cheat for now by funding all trades from the BCARD VC_CAD Wallet\")\n\n        console.log(\"acct1: \" + acct1);\n\n        console.log(\"Use props of current user state to get base currency & baseCurrency account# 2.\")\n\n        console.log(props.state.account_list[props.state.account_list.length-1].id);    // this to get the oldest account #\n\n        let oldestAcct = props.state.account_list[props.state.account_list.length-1]\n\n        let acct2 = oldestAcct.id;   // hard coded tomtranmer USD\n        let baseCurrency = oldestAcct.currency;     // override for account change\n\n        console.log(props.state.baseCurrency);\n\n        alert(\"Trade confrimation sheet required here w/ \" + inputs.type, inputs.currencies, inputs.amount, inputs.price)\n\n\n        createTrade(inputs.type, inputs.currencies, inputs.amount, inputs.price, acct1, acct2, baseCurrency);\n\n        event.preventDefault();\n    }\n\n    const handleChange = (event) => {\n        const name = event.target.name;\n        const value = event.target.value;\n\n        if(name === \"currencies\"){\n          let selectedCurrency = document.getElementById('sel-cur');\n          let curVal = selectedCurrency.value;\n          let curText = selectedCurrency.options[selectedCurrency.selectedIndex].text;\n          console.log(selectedCurrency.value, selectedCurrency.options[selectedCurrency.selectedIndex].text);\n\n          acct1 = curVal;\n\n          console.log(acct1);\n            // store the value of the text in place of the value here as value is uesd to pass the account ID#\n          setInputs(values => ({...values, [name]:curText }));\n        } else {\n          setInputs(values => ({...values, [name]:value }));\n        }\n\n        // console.log(inputs);\n        // console.log(inputs.amount * inputs.price)\n\n        // let soloAmt = (inputs.amount * inputs.price).toFixed(2);\n\n        // setInputs(\"solo\", soloAmt);\n\n        // solo = (inputs.amount * inputs.price).toFixed(2);\n\n        //setSolo(\"HOLLA\");\n\n        console.log(\"Also toggles on select dropdown\");\n    }\n\n    // console.log(props.state.account_list);\n\n    let accounts = props.state.account_list;\n\n    if(accounts.length > 0) {\n      let placeholderAmount = props.state.account_list.length > 0 ? props.state.account_list[0].balance.accountBalance : 0;\n      let placeholderPrice = props.state.account_list.length > 0 ? props.state.prices.bank : \"add some accounts\";\n\n\n      return (\n\n        <div className=\"col-md-6\">\n          <form className=\"trForm\" onSubmit={handleSubmit}>\n            <h5>Post your own OrderBook Trade / {props.state.baseCurrency}</h5>\n\n            <div className=\"row\">\n              <label htmlFor=\"selectBS\" className=\"col-sm-2 col-form-label col-form-label-sm\">Buy/Sell:</label>\n\n              <div className=\"col-sm-10\">\n                <select id=\"selectBS\" name=\"type\" defaultValue=\"\" onChange={handleChange}>\n                  <option value=\"\">...</option>\n                  <option value=\"BUY\">BUY</option>\n                  <option value=\"SELL\">SELL</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"row\">\n              <label htmlFor=\"sel-cur\" className=\"col-sm-2 col-form-label col-form-label-sm\">Wallet:</label>\n\n              <div className=\"col-sm-10\">\n                <select id=\"sel-cur\" name=\"currencies\" defaultValue=\"lime\" onChange={handleChange}>\n                  <option value=\"\">...</option>\n                  { props.state.account_list.length > 1 ? \n\n                    props.state.account_list\n                        .sort((a,b) => a.currency > b.currency ? 1 : -1)\n                        .map((account, index) => (\n                            <option data-index={index} value={account.id} key={account.id} > \n                              {account.currency}\n                            </option>\n                          ))\n\n                      : <>\n                          <option value=\"grapefruit\">Please Grapefruit </option>\n                          <option value=\"lime\">Select Lime </option>\n                          <option value=\"coconut\">An Coconut</option>\n                          <option value=\"mango\">Account Mango</option>\n                        </>\n                  }\n\n                </select>\n              </div>\n            </div>\n\n            <div className=\"row\">\n              <label htmlFor=\"selectBS\" className=\"col-sm-2 col-form-label col-form-label-sm\">Amount:</label>\n\n              <div className=\"col-sm-10\">\n                <input \n                  id=\"tradeAmount\"\n                  name=\"amount\" \n                  type=\"text\" \n                  value={inputs.amount} \n                  placeholder={placeholderAmount} \n                  onChange={handleChange} \n                />\n              </div>\n            </div>\n\n            <div className=\"row\">\n              <label htmlFor=\"selectBS\" className=\"col-sm-2 col-form-label col-form-label-sm\" title=\"Price per token sold.\">Price:</label>\n\n              <div className=\"col-sm-10\">\n                <input \n                  id=\"tradePrice\"\n                  name=\"price\" \n                  type=\"text\" \n                  value={inputs.price}\n                  placeholder={\n                    placeholderPrice\n                  } \n                  onChange={handleChange} \n                />\n                 (in {props.state.baseCurrency})\n              </div>\n            </div>\n\n            \n            \n            \n            <input id=\"tradeSubmit\" type=\"submit\" value=\"Submit Trade\" />\n            TOTAL: ${solo}\n            <hr />\n            <h6>BUY/SELL from/to your default FIAT Account</h6>\n\n          </form>\n        </div>\n\n    )\n    } else {\n      // if no accounts, don't show the trade form\n      return \"\";\n    }\n\n    \n\n}","import React, { useState } from 'react'\n\nimport { feesAccts } from '../services/feesAccounts'\n\n// import these constants\n// const feesAcctCAD = \"637e60e2600305b81f027d14\";\n// const feesAcctBTC = \"636bb54f5f95f8f981cbc519\";\n\nconst feesAcctUSDC = feesAccts.USDC;\nconst feesAcctUSD = feesAccts.USD;\nconst feesAcctETH = feesAccts.ETH;\nconst feesAcctBANK = feesAccts.BANK;\n\n// import { showTrades } from '../services/UserService'\n\n// function getOptionText(sel) {\n//   return sel.options[sel.selectedIndex].text;\n// }\n\nfunction setMax(event, handleChange) {\n  event.preventDefault();\n\n  let thisMax = document.getElementById('maxAvailable').innerHTML;\n  let thisSwapAmt = document.getElementById('swapAmount');\n  thisSwapAmt.value = thisMax;\n\n  event.target.name = \"amount\";\n  event.target.value = thisMax;\n\n  // event.target.name\n  // event.target.value\n  \n  handleChange(event);\n}\n\nasync function createSwap(amount, acct1, acct2, prices){\n\n    console.log(amount, acct1, acct2, prices);\n\n    console.log(\"price not needed here, calculated as market value swap\");\n    console.log(\"Need to do some determination here to figure out currency then account number for MM\");\n\n\n    let selectedCurrencyOut = document.getElementById('currencyOut');\n    // let curVal = selectedCurrencyOut.value;\n    let tokenOut = selectedCurrencyOut.options[selectedCurrencyOut.selectedIndex].text;\n    // console.log(curVal, tokenOut);\n\n    let selectedCurrencyIn = document.getElementById('currencyIn');\n    let tokenIn = selectedCurrencyIn.options[selectedCurrencyIn.selectedIndex].text;\n    console.log(\"OUT\", tokenOut, \"IN\", tokenIn);\n\n    let mmAccountUSDC = feesAcctUSDC   // VC_USD on BCARD ONE\n    let mmAccountUSD = feesAcctUSD   // VC_USD on BCARD ONE\n    let mmAccountETH = feesAcctETH   // ETH on BCARD ONE\n    let mmAccountBANK = feesAcctBANK // BANK on BCARD Service\n\n    // data default\n    //  for SEND USD \n    let data = {\n      \"senderAccountId\": acct1,\n      // \"recipientAccountId\": mmAccountUSD,\n      \"amount\": amount     \n    }\n\n    let data2 = {\n      \"senderAccountId\": mmAccountETH,\n      \"recipientAccountId\": acct2,\n      // calculate amount with token inputs\n    }\n\n    if(tokenOut === \"BANK\") {\n      data.recipientAccountId = mmAccountBANK;\n      data2.senderAccountId = mmAccountBANK;   // set \n\n\n    } else if(tokenOut === \"ETH\") {\n      data.recipientAccountId = mmAccountETH;\n      data2.senderAccountId = mmAccountETH;   // set\n      \n    } else if(tokenOut === \"VC_USD\") {\n      // need to send VC_USD to the Market Maker\n      //  for SEND USD -> ok with default\n      \n      console.log(data);\n      data.recipientAccountId = mmAccountUSD;\n      data2.senderAccountId = mmAccountUSD;   // set\n\n    } else if(tokenOut === \"USDC_V\"){\n      data.recipientAccountId = mmAccountUSDC;\n      data2.senderAccountId = mmAccountUSDC;   // set\n\n    }\n\n    console.log(data);\n\n\n\n\n    if(tokenIn === tokenOut) {\n      data2.amount = amount;    // equal is a pass-through\n      // set sender ID here\n\n    } else if (tokenIn === \"BANK\") {\n      data2.senderAccountId = mmAccountBANK;   // set \n\n      // calculate amount using price\n      if(tokenOut === \"VC_USD\") {\n        data2.amount = (amount/prices.bank).toString();    // USD -> BANK\n      } else if(tokenOut === \"ETH\") {               // ETH -> BANK\n        data2.amount = (amount*prices.eth/prices.bank).toString();\n      } \n\n    } else if (tokenIn === \"ETH\") {\n      data2.senderAccountId = mmAccountETH;   // set \n\n      // calculate amount using price\n      if(tokenOut === \"VC_USD\") {\n        data2.amount = (amount/prices.eth).toString();    // USD -> ETH\n      } else if(tokenOut === \"BANK\") {\n        data2.amount = (amount*prices.bank/prices.eth).toString();    // BANK -> ETH\n      }\n      \n      \n\n      // alert(\"You get back: \" + (amount/prices.eth).toString() + \" ETH (confirm)\");\n\n    } else if (tokenIn === \"VC_USD\") {\n      data2.senderAccountId = mmAccountUSD;   // set \n\n      // calculate amount using price\n      if(tokenOut === \"ETH\") {\n        data2.amount = (amount*prices.eth).toString();    // ETH -> USD\n      } else if(tokenOut === \"BANK\") {\n        data2.amount = (amount*prices.bank).toString();    // BANK -> USD\n      } else {\n        // usd to usd exchange from FIAT wallet\n        data2.amount = amount;\n      }\n\n    } else if (tokenIn === \"USDC_V\") {\n      data2.senderAccountId = mmAccountUSDC;   // set \n\n      // calculate amount using price\n      if(tokenOut === \"ETH\") {\n        data2.amount = (amount*prices.eth).toString();    // ETH -> USD\n      } else if(tokenOut === \"BANK\") {\n        data2.amount = (amount*prices.bank).toString();    // BANK -> USD\n      } else {\n        // usd to usd exchange from FIAT wallet\n        data2.amount = amount;\n      }\n    }\n\n    console.log(data2);\n\n    if(tokenIn === \"USDC_V\") {\n      // its a CC Load\n      alert(\"You are loading your CC for FIAT Spending with \" + data2.amount + \" USD\");\n    } else {\n      alert(\"You get back: \" + data2.amount + \" of \"+tokenIn+\" (confirm)\");\n\n    }\n\n\n\n    // if its ETH\n\n    //  for SEND USD \n    // let data = {\n    //   \"senderAccountId\": acct1,\n    //   \"recipientAccountId\": mmAccountUSD,\n    //   \"amount\": amount     \n    // }\n\n    // console.log(data);\n\n\n\n    // let data2 = {\n    //   \"senderAccountId\": mmAccountETH,\n    //   \"recipientAccountId\": acct2,\n    //   \"amount\": calcAmount  \n    // }\n\n    // first send out\n    const response = await fetch(`/api/transfer`, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(data)\n      })\n    await response;\n\n    // second send out\n    const responseTwo = await fetch(`/api/transfer`, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(data2)\n      })\n    await responseTwo;\n\n    alert(\"Your SWAP has been successfully completed with status: \"+responseTwo.status + \" Manual refresh accounts.\");  \n\n    // refresh the accounts display\n\n\n  }\n\nexport function SwapForm(props) {\n\n    // console.log(props.state.custId);   // use PROPS to pass in the account list for the selected user with which to buld the options for selection\n\n    if(props.state.account_list.length > 1) {\n      //no customer selected, use service account as default to build the trade UI\n      // console.log(\"No customer selected - dummy data - Use Service Acct\")\n\n      // var temp = getAccount(\"6357fa3d7511407e6d732fe4\");\n      // console.log(temp);  // this is account list for id provided\n      // console.log(props.state.account_list);\n    }\n\n    // const [solo, setSolo] = useState({});\n\n    // let solo = \"XYZ\";\n\n\n    const [inputs, setInputs, ] = useState({});   //inputNames, setInputNames\n    // const [acct, setAcct] = useState({});\n    // let [outName, setOutName] = useState({});\n    // const [inName, setInName] = useState(\"IN\");\n\n    const handleSubmit = (event) => {\n        // alert('Your balance is: ' + balance);\n        console.log(\"SUBMIT:\", inputs);\n\n        let acct1 = inputs.currencyOut;       // accoutn 1 is user accout they are sending tokens from\n        let acct2 = inputs.currencyIn;        // accoutn 2 is user account to receive tokens\n        // let baseCurrency = props.state.baseCurrency   // use base currency to enable SWAP from MM\n\n        // console.log(props.state.baseCurrency);\n\n        console.log(\"SWAP confrimation sheet required here w/ \" + inputs.type, inputs.currencies, inputs.amount, inputs.price)\n\n        // console.log(props.state.prices);\n\n        createSwap(inputs.amount, acct1, acct2, props.state.prices);\n\n        event.preventDefault();\n    }\n\n    // setOutName(\"OUT\");\n    //setInName (\"IN\");\n\n    const handleChange = (event) => {\n        const name = event.target.name;\n        const value = event.target.value;\n\n        let accts = props.state.account_list;\n\n        let curOut = document.getElementById('currencyOut');\n        // let curVal = curOut.value;\n        let curOutText = curOut.options[curOut.selectedIndex].text;\n        let curIn = document.getElementById('currencyIn');\n        let curInText = curIn.options[curIn.selectedIndex].text;\n        //console.log(curOutText);\n        console.log(name);\n\n        let myPrevBal = document.getElementById('myBalance');\n\n        let calcAmt = 0.00;\n        let tokenAmt = value;\n        let totalAmt = 0.00;\n\n        if(name===\"currencyOut\" && curOutText) {\n          // relabel title\n\n          let labelTokenOut = document.getElementById('outName');\n          labelTokenOut.innerHTML = curOutText\n\n          // get balance from current account\n          // let accts = props.state.account_list;\n          // console.log(accts);\n          let matchAcct = accts.find(e => e.currency === curOutText);\n          console.log(matchAcct.balance.availableBalance);\n\n          let maxAvailableOutput = parseFloat(matchAcct.balance.availableBalance).toFixed(3);\n          if(curOutText === \"ETH\"){\n            maxAvailableOutput = parseFloat(matchAcct.balance.availableBalance).toFixed(6);\n          }\n\n          // relabel out Balance\n          let maxLabel = document.getElementById('maxAvailable');\n          maxLabel.innerHTML = maxAvailableOutput;\n          // maxLabel.blur();\n\n        } else if(name===\"currencyIn\" && curInText) {\n\n          let labelTokenIn = document.getElementById('inName');\n          labelTokenIn.innerHTML = curInText\n\n          myPrevBal.innerHTML = 0.00;\n\n          // get balance from current account\n          let matchAcct = accts.find(e => e.currency === curInText);\n          // console.log(matchAcct.balance.availableBalance);\n\n          let currentBal = parseFloat(matchAcct.balance.accountBalance).toFixed(3);\n          if(curInText === \"ETH\"){\n            currentBal = parseFloat(matchAcct.balance.accountBalance).toFixed(6);\n          }\n\n          // relabel out Balance\n          let currentLabel = document.getElementById('myBalance');\n          currentLabel.innerHTML = currentBal;\n          // maxLabel.blur();\n\n          // also update total on token desired update\n          // update the TOTAL in USD, if both tokens are selected\n          if(curOutText && curInText) {\n\n            // value here is token amount\n            if(curOutText === \"USDC_V\" || curOutText === \"VC_USD\") {\n              totalAmt = tokenAmt;    // sending USD, pass through value\n\n            } else if (curOutText === \"BANK\") {\n              // sending BANK\n              totalAmt = tokenAmt * props.state.prices.bank;    // in USD\n\n            } else if (curOutText === \"ETH\") {\n              // sending ETH\n              totalAmt = tokenAmt * props.state.prices.eth;     // USD\n\n            }\n\n            let labelTotal = document.getElementById('totalAmt');\n            labelTotal.innerHTML = totalAmt;\n\n          }\n\n\n        } else if(name === \"amount\") {\n          // then value is the amount of token to be traded\n\n          // update the TOTAL in USD, if both tokens are selected\n          if(curOutText && curInText) {\n\n            // value here is token amount\n            if(curOutText === \"USDC_V\" || curOutText === \"VC_USD\") {\n              totalAmt = tokenAmt;    // sending USD, pass through value\n\n              if(curInText === \"USDC_V\" || curInText === \"VC_USD\") {\n                calcAmt = tokenAmt;     // receiving USD\n              } else if (curInText === \"ETH\"){\n                // receiving ETH\n                calcAmt = tokenAmt / props.state.prices.eth;    // in ETH Tokens\n              } else if (curInText === \"BANK\"){\n                // receiving BANK\n                calcAmt = tokenAmt / props.state.prices.bank;    // in BANK Tokens\n              }\n\n\n            } else if (curOutText === \"BANK\") {\n              // sending BANK\n              totalAmt = tokenAmt * props.state.prices.bank;    // in USD\n\n              if(curInText === \"USDC_V\" || curInText === \"VC_USD\") {\n                calcAmt = totalAmt;     // receiving USD\n              } else if (curInText === \"ETH\"){\n                // receiving ETH\n                calcAmt = totalAmt / props.state.prices.eth;    // in ETH Tokens\n              } else if (curInText === \"BANK\"){\n                // receiving BANK\n                calcAmt = totalAmt / props.state.prices.bank;    // in BANK Tokens\n              }\n            } else if (curOutText === \"ETH\") {\n              // sending ETH\n              totalAmt = tokenAmt * props.state.prices.eth;     // USD\n\n              if(curInText === \"USDC_V\" || curInText === \"VC_USD\") {\n                calcAmt = totalAmt;     // receiving USD\n              } else if (curInText === \"ETH\"){\n                // receiving ETH\n                calcAmt = totalAmt / props.state.prices.eth;    // in ETH Tokens\n              } else if (curInText === \"BANK\"){\n                // receiving BANK\n                calcAmt = totalAmt / props.state.prices.bank;    // in BANK Tokens\n              }\n            }\n\n            let labelTotal = document.getElementById('totalAmt');\n            labelTotal.innerHTML = totalAmt;\n\n            let labelCalc = document.getElementById('calcAmt');\n            labelCalc.innerHTML = calcAmt;\n          }\n        }\n\n        setInputs(values => ({...values, [name]:value }));\n\n        // console.log(\"Also toggles on select dropdown\");\n    }\n\n    let accounts = props.state.account_list;\n\n    if(accounts.length > 0) {\n      let placeholderAmount = props.state.account_list.length > 0 ? props.state.account_list[0].balance.accountBalance : 0;\n      // let placeholderPrice = props.state.account_list.length > 0 ? props.state.prices.bank : \"add some accounts\";\n\n\n      return (\n\n        <div className=\"col-md-6\">\n          <form className=\"trForm\" onSubmit={handleSubmit}>\n            <h5>Self Swap your own tokens @ market</h5>\n\n            {/*<div className=\"row\">\n              <label htmlFor=\"selectBS\" className=\"col-sm-2 col-form-label col-form-label-sm\">Buy/Sell:</label>\n\n              <div className=\"col-sm-10\">\n                <select id=\"selectBS\" name=\"type\" defaultValue=\"\" onChange={handleChange}>\n                  <option value=\"\">...</option>\n                  <option value=\"BUY\">BUY</option>\n                  <option value=\"SELL\">SELL</option>\n                </select>\n              </div>\n            </div>*/}\n\n            <h4>I want to swap my <span id=\"outName\">{\"outName\"}</span> for <span id=\"inName\">{\"inName\"}</span></h4>\n\n            <div className=\"tokenBox\">\n              <div className=\"row\">\n                <div className=\"col\">\n                  <select id=\"currencyOut\" name=\"currencyOut\" defaultValue=\"lime\" onChange={handleChange}>\n                  <option value=\"\">...</option>\n                  { props.state.account_list.length > 1 ? \n\n                    props.state.account_list\n                        .sort((a,b) => a.currency > b.currency ? 1 : -1)\n                        .map((account, index) => (\n                            <option data-index={index} value={account.id} key={account.id} > \n                              {account.currency}\n                            </option>\n                          ))\n\n                      : <>\n                          <option value=\"grapefruit\">Please Grapefruit </option>\n                          <option value=\"lime\">Select Lime </option>\n                          <option value=\"coconut\">An Coconut</option>\n                          <option value=\"mango\">Account Mango</option>\n                        </>\n                  }\n\n                </select>\n                  <p>Balance: <span id=\"maxAvailable\">0</span></p>\n                </div>\n                <div className=\"col\">\n                  <div className=\"col-sm-10\">\n                    <input \n                      id=\"swapAmount\"\n                      name=\"amount\" \n                      type=\"text\" \n                      value={inputs.amount}\n                      placeholder={placeholderAmount} \n                      onChange={handleChange} \n                    />\n                  </div>\n                  <button\n                    className=\"maxBtn\"\n                    onClick={(e) => setMax(e,handleChange)}\n                  >MAX</button>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flipButtonBox\"\n              onClick={() => console.log(\"this should flip token currency names\")}\n              >\n              <img className='alertLogo' src='img/swap.png' alt='swap-logo' />\n            </div>\n\n            <div className=\"tokenBox\">\n              <div className=\"row\">\n                <div className=\"col\">\n                  <select id=\"currencyIn\" name=\"currencyIn\" defaultValue=\"lime\" onChange={handleChange}>\n                  <option value=\"\">...</option>\n                  { props.state.account_list.length > 1 ? \n\n                    props.state.account_list\n                        .sort((a,b) => a.currency > b.currency ? 1 : -1)\n                        .map((account, index) => (\n                            <option data-index={index} value={account.id} key={account.id} > \n                              {account.currency}\n                            </option>\n                          ))\n\n                      : <>\n                          <option value=\"grapefruit\">Please Grapefruit </option>\n                          <option value=\"lime\">Select Lime </option>\n                          <option value=\"coconut\">An Coconut</option>\n                          <option value=\"mango\">Account Mango</option>\n                        </>\n                  }\n\n                </select>\n                  <p>MyBalance: <span id=\"myBalance\">0</span></p>\n                </div>\n                <div className=\"col\">\n                  <p id=\"calcAmt\"><strong>RCV num</strong></p>\n                  <p>TOTAL: $<span id=\"totalAmt\">XX.YY</span></p>\n                </div>\n              </div>\n            </div>\n            \n            \n            <input class=\"btn btn-danger\" id=\"tradeSubmit\" type=\"submit\" value=\"Submit Swap\" />\n            \n            <hr />\n            <h6>BUY/SELL from/to your accounts using Bcard MM.</h6>\n\n          </form>\n        </div>\n\n    )\n    } else {\n      // if no accounts, don't show the trade form\n      return \"\";\n    }\n\n    \n\n}","import React, { useState } from 'react'\n// import { showTrades } from '../services/UserService'\n\nimport { feesAccts } from '../services/feesAccounts'\n\nconst feesAcctUSDC = feesAccts.USDC;\nconst feesAcctUSD = feesAccts.USD;\nconst feesAcctETH = feesAccts.ETH;\nconst feesAcctBANK = feesAccts.BANK;\n\n\nasync function createTransfer(amount, acct1, acct2) {\n\n    // console.log(amount, acct1, acct2);\n\n    if(!acct1){\n      acct1 = \"6388bfd1345a7219f7e369e9\";          // fund with BCARD VC_USD Wallet\n    } \n\n    // detail needed to exexute the trade request via API\n    let data = {\n      \"senderAccountId\": acct1,\n      \"recipientAccountId\": acct2, // \"6388bfd1345a7219f7e369e9\",     //acct2 \n      \"amount\": amount     \n    }\n\n    // console.log(data);\n\n    if (parseFloat(amount) > 1000) {\n      alert(\"Please enter an amount =< $1000 to be funded.\");\n    } else if(false) {\n      // check dropdown selector to ensure proper currency is selected\n      alert(\"transaction.currency.incompatible\");\n\n    } else {\n      // proceed with transfer request\n\n      alert(\"Confirm SEND of \" + amount + \" to \" + acct2);\n    \n\n      await fetch(`/api/transfer`, {\n          method: 'POST',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify(data)\n        })\n        .then((response) => response.json())\n        .then((data) => {\n          console.log(data);\n          if(data.reference){\n            console.log(\"RETURN FROM TATUM API FOR CREATE TRANSFER - admin function\");\n            alert(\"Your Transfer has been successfully completed\");  \n            alert(\"Refresh Accounts above to see updated balance - automate.\")\n          } else if(data.message) {\n            alert(\"FAILURE 403: No Compatible Currency At Recipient\");\n          } else {\n            alert(\"FAILURE: \");\n          }\n\n        })\n\n\n\n    }\n    \n\n  }\n\nexport function TransferForm(props) {\n\n    // console.log(props.state.custId);   // use PROPS to pass in the account list for the selected user with which to buld the options for selection\n\n    let myRecipients = [];\n    let sampleReceiver = {\n      name: \"Tom Jones\", \n      usd: \"638671aa4eae0996fbd56c5c\",\n      bank: \"6388b714223d45b926e3995b\",\n      eth: \"6388b5a6ee6fd766995da1c0\",\n      usdc: \"6388ba0973184d447e74a595\"\n    }\n    let bcardService = {\n      name: \"BCard Service\",\n      usd: feesAcctUSD,\n      bank: feesAcctBANK,\n      eth: feesAcctETH,\n      usdc: feesAcctUSDC\n    }\n\n    // if(props.state.recipients.length < 1) {\n     // console.log(\"recipients are empty, setting default recipients only\"); \n     myRecipients.push( bcardService,sampleReceiver );\n    // }\n\n    let solo = \"XYZ USD\";\n    // var acct1 = \"\";\n    // var acct2 = \"\";\n\n    const [inputs, setInputs] = useState({});\n    // const [acct, setAcct] = useState({});\n    const handleSubmit = (event) => {\n        // alert('Your balance is: ' + balance);\n        console.log(\"SUBMIT:\", inputs.acct1, inputs.acct2);\n\n        // acct1 -> currency_type of account for user from which to transfer tokens\n\n        // acct2 -> user name -> SHORTCUT to whom to transfer funds (link below)\n\n\n        // let selAct2 = document.getElementById('selAcct2');\n        let selAct1 = document.getElementById('selAcct1');\n        let acctVal1 = selAct1.value;\n\n        let selAct2 = document.getElementById('rcvAcct2');\n        let acctVal2 = selAct2.value;    // should be account id for selected user\n\n\n        console.log(acctVal1,acctVal2);\n        // console.log(acct2, myRecipients[0], myRecipients[0].name)\n\n\n        let rcvAcct = feesAcctUSD;    // default receiver account SERVICE VC_USD\n\n\n        if(inputs.acct2 === \"BCard Service\") {\n          // set recipient account to SERVICE\n\n          console.log(inputs.acct1)\n          // needs to match currencies.\n          if(inputs.acct1 === \"VC_USD\") {\n            // same one is ok for default \n          } else if(inputs.acct1 === \"USDC_V\"){\n            rcvAcct = feesAcctUSDC;\n          } else if(inputs.acct1 === \"BANK\"){\n            rcvAcct = feesAcctBANK;\n          } else if(inputs.acct1 === \"ETH\"){\n            rcvAcct = feesAcctETH;\n          }\n\n\n        } else if(inputs.acct2 === 'Tom Jones'){\n\n          console.log(\"Hello\", inputs.acct1);\n          console.log(myRecipients[1]);         // match in recpients object\n          if(myRecipients[1] === inputs.acct2) console.log(\"Winner\");\n\n          let sendAcct = inputs.acct1;\n\n            switch(sendAcct){\n              case \"VC_USD\":\n                rcvAcct = myRecipients[1].usd;\n                break;\n              case \"BANK\":\n                console.log(\"BBtime\");\n                // console.log(myRecipients[1].bank);\n                rcvAcct = myRecipients[1].bank;\n                break;\n              case \"ETH\":\n                rcvAcct = myRecipients[1].eth;\n                break;\n              case \"USDC_V\":\n                rcvAcct = myRecipients[1].usdc;\n                break;\n              default:\n                rcvAcct = feesAcctUSD;      // service account USD if nothing\n            } \n            // rcvAcct = sampleReceiver.usd;   // user ...Tom Jones TESTUSER\n        }\n\n\n\n        // let acct2;\n\n        createTransfer(inputs.amount, acctVal1, rcvAcct);\n\n        event.preventDefault();\n    }\n\n    const handleChange = (event) => {\n        const name = event.target.name;\n        const value = event.target.value;\n\n        if(name === \"acct1\"){\n          let selectedAccount = document.getElementById('selAcct1');\n          let actVal = selectedAccount.value;\n          let actText = selectedAccount.options[selectedAccount.selectedIndex].text;\n          console.log(actVal, actText);\n\n          // acct1 = actVal;\n\n          // console.log(acct1);\n            // store the text in place of the value here as it is uesd to pass the account ID#\n          setInputs(values => ({...values, [name]:actText }));\n\n        } else if(name === \"acct2\"){\n          let selAcct2 = document.getElementById('rcvAcct2');\n\n          // console.log(selAcct2)\n\n          let act2Val = selAcct2.value;\n          let act2Text = selAcct2.options[selAcct2.selectedIndex].text;\n          console.log(act2Val, act2Text);\n\n          // acct2 = act2Val;\n\n          // console.log(acct2);\n            // store the value of the text in place of the value here as value is uesd to pass the account ID#\n          setInputs(values => ({...values, [name]:act2Text }));\n        } \n\n        else {\n          setInputs(values => ({...values, [name]:value }));\n        }\n\n        // console.log(inputs);\n        // console.log(inputs.amount * inputs.price)\n\n        // let soloAmt = (inputs.amount * inputs.price).toFixed(2);\n\n        // setInputs(\"solo\", soloAmt);\n\n        // solo = (inputs.amount * inputs.price).toFixed(2);\n\n        //setSolo(\"HOLLA\");\n\n        // console.log(\"Also toggles on select dropdown\");\n    }\n\n    return (\n      <div className=\"col-md-6\">\n        <form className=\"tsForm\" onSubmit={handleSubmit}>\n        <h5>SEND: any asset to another person</h5>\n        <select id=\"selAcct1\" name=\"acct1\" defaultValue=\"\" onChange={handleChange}>\n          <option value=\"\">->from (token)</option>\n\n          { props.state.account_list.length > 1 ? \n\n            props.state.account_list\n                .sort((a,b) => a.currency > b.currency ? 1 : -1)\n                .map((account, index) => (\n                    <option data-index={index} value={account.id} key={account.id} > \n                      {account.currency}\n                    </option>\n                  ))\n\n              : <>\n                  <option value=\"grapefruit\">Please Grapefruit </option>\n                  <option value=\"lime\">Select Lime </option>\n                  <option value=\"coconut\">An Coconut</option>\n                  <option value=\"mango\">Account Mango</option>\n                </>\n          }\n\n        </select>\n        <select id=\"rcvAcct2\" name=\"acct2\" onChange={handleChange} >\n          <option value=\"\">->to (user)</option>\n          {/*<option value=\"BCARD_SERVICE\">BCard Service </option>\n          <option value=\"TOM\">Tom Jones </option>*/}\n          \n          { myRecipients.length > 1 ? \n\n            myRecipients\n                .sort((a,b) => a.name > b.name ? 1 : -1)\n                .map((rec, index) => (\n                    <option data-index={index} value={rec.name} key={rec.usd} > \n                      {rec.name}\n                    </option>\n                  ))\n\n              : <>\n                  {/*<option value=\"grapefruit\">Please Grapefruit </option>\n                  <option value=\"lime\">Select Lime </option>\n                  <option value=\"coconut\">An Coconut</option>\n                  <option value=\"mango\">Account Mango</option>*/}\n                  <option value=\"BCARD_SERVICE\">BCard Service </option>\n                  <option value=\"TOM\">Tom Jones </option>\n                </>\n              }\n\n              {/*TBD Add new recipient*/}\n          <option value=\"ADD_USER\" disabled>Add a new User...</option>\n          \n          \n              \n\n        </select>\n        <input \n          name=\"amount\" \n          type=\"text\" \n          value={inputs.amount} \n          placeholder={props.state.account_list.length > 0 ? props.state.account_list[0].balance.accountBalance : 0} \n          onChange={handleChange} \n        />\n    \n        <input type=\"submit\" value=\"Send\" />\n        TOTAL: ${solo}\n        <p>Need: How to choose recipients from customers? Invite? </p>\n       </form>\n      </div>\n\n    )\n\n}","import React, { useState } from 'react'\n// import { showTrades } from '../services/UserService'\n\n\nasync function createFaucet(amount, acct1, acct2) {\n\n    console.log(amount, acct1, acct2);\n\n    if(!acct1){\n      acct1 = \"6388bfd1345a7219f7e369e9\";          // fund with BCARD VC_USD Wallet\n    } \n\n    // detail needed to exexute the trade request via API\n    let data = {\n      \"senderAccountId\": acct1,\n      \"recipientAccountId\": acct2,\n      \"amount\": amount     \n    }\n\n    console.log(data);\n\n    if (parseFloat(amount) > 100) {\n      alert(\"Please enter an amount =< $100 to be funded.\");\n    } else if(false) {\n      // check dropdown selector to ensure proper currency is selected\n      alert(\"transaction.currency.incompatible\");\n\n    } else {\n      // proceed with transfer request\n    \n\n      const response = await fetch(`/api/transfer`, {\n          method: 'POST',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify(data)\n        })\n      await response;\n\n      let transfer_conf = response;\n\n      console.log(transfer_conf);\n      console.log(\"RETURN FROM TATUM API FOR CREATE TRANSFER - admin function\");\n      alert(\"Your Transfer has been successfully completed\");  \n\n      alert(\"Refresh Accounts above to see updated balance - automate.\")\n\n      // refresh the trades display\n\n    }\n    \n\n  }\n\nexport function FaucetForm(props) {\n\n    // console.log(props.state.custId);   // use PROPS to pass in the account list for the selected user with which to buld the options for selection\n    // const [solo, setSolo] = useState({});\n\n    let solo = \"XYZ\";\n    var acct1 = \"\";\n\n\n    const [inputs, setInputs] = useState({});\n    // const [acct, setAcct] = useState({});\n    const handleSubmit = (event) => {\n        // alert('Your balance is: ' + balance);\n        console.log(\"SUBMIT:\", inputs, acct1);\n\n        console.log(\"Find a way to submit this request to API\", acct1);\n\n        let selAct2 = document.getElementById('selAcct2');\n        let acct2 = selAct2.value;    // should be account id for selected currency\n\n        // acct1 = curVal;\n\n        console.log(\"Need to get account number for base Currency Account\")\n        console.log(\"Cheat for now by funding all trades from the BCARD VC_CAD Wallet\")\n\n        console.log(acct2)\n\n        // let acct2;\n\n        createFaucet(inputs.amount, acct1, acct2);\n\n        event.preventDefault();\n    }\n\n    const handleChange = (event) => {\n        const name = event.target.name;\n        const value = event.target.value;\n\n        if(name === \"currencies\"){\n          let selectedCurrency = document.getElementById('sel-cur');\n          let curVal = selectedCurrency.value;\n          let curText = selectedCurrency.options[selectedCurrency.selectedIndex].text;\n          console.log(selectedCurrency.value, selectedCurrency.options[selectedCurrency.selectedIndex].text);\n\n          acct1 = curVal;\n\n          console.log(acct1);\n            // store the value of the text in place of the value here as value is uesd to pass the account ID#\n          setInputs(values => ({...values, [name]:curText }));\n        } else {\n          setInputs(values => ({...values, [name]:value }));\n        }\n\n        // console.log(inputs);\n        // console.log(inputs.amount * inputs.price)\n\n        // let soloAmt = (inputs.amount * inputs.price).toFixed(2);\n\n        // setInputs(\"solo\", soloAmt);\n\n        // solo = (inputs.amount * inputs.price).toFixed(2);\n\n        //setSolo(\"HOLLA\");\n\n        console.log(\"Also toggles on select dropdown\");\n    }\n\n    return (\n      <div className=\"col-md-6\">\n        <form className=\"tsForm\" onSubmit={handleSubmit}>\n        <h3>Get VC_USD from faucet</h3>\n        <select id=\"acct1\" name=\"acct1\" defaultValue=\"\" onChange={handleChange} disabled>\n          <option value=\"\">->from</option>\n\n          { props.state.account_list.length > 1 ? \n\n            props.state.account_list\n                .sort((a,b) => a.currency > b.currency ? 1 : -1)\n                .map((account, index) => (\n                    <option data-index={index} value={account.id} key={account.id} > \n                      {account.currency}\n                    </option>\n                  ))\n\n              : <>\n                  <option value=\"grapefruit\">Please Grapefruit </option>\n                  <option value=\"lime\">Select Lime </option>\n                  <option value=\"coconut\">An Coconut</option>\n                  <option value=\"mango\">Account Mango</option>\n                </>\n          }\n\n        </select>\n        <select id=\"selAcct2\" name=\"acct2\" onChange={handleChange}>\n          <option value=\"\">->to</option>\n          { props.state.account_list.length > 1 ? \n\n            props.state.account_list\n                .sort((a,b) => a.currency > b.currency ? 1 : -1)\n                .map((account, index) => (\n                    <option data-index={index} value={account.id} key={account.id} > \n                      {account.currency}\n                    </option>\n                  ))\n\n              : <>\n                  <option value=\"grapefruit\">Please Grapefruit </option>\n                  <option value=\"lime\">Select Lime </option>\n                  <option value=\"coconut\">An Coconut</option>\n                  <option value=\"mango\">Account Mango</option>\n                </>\n          }\n\n        </select>\n        <input \n          name=\"amount\" \n          type=\"text\" \n          value={inputs.amount} \n          placeholder={props.state.account_list.length > 0 ? props.state.account_list[0].balance.accountBalance : 0} \n          onChange={handleChange} \n        />\n    \n        <input type=\"submit\" value=\"Submit Transfer\" />\n        TOTAL: ${solo}\n        <p>Chose your VC_USD account from the dropdown and enter amount (less than 100) to fund your virtual account.</p>\n       </form>\n      </div>\n\n    )\n\n}","\n/** this functio uses Tatum API and CoinGecko API to get published crypto prices **/\nexport async function getPrices(base) {\n    \n    // console.log(base);\n\n    if(base === undefined || base === '') {\n        base = \"USD\";    \n        console.log(\"USD default set here at API call for initial load.\");\n    }\n\n    const response = await fetch('/api/prices/'+base);\n    if(response.status === 200) console.log(\"Successful call to /api/prices\");\n    return await response.json();\n}\n\n\n\n// export async function getCustomers() {\n\n//     const response = await fetch('/api/customers');\n//     // console.log(response);\n//     return await response.json();\n// }\n\n// export async function getAccount(id) {\n\n//     console.log(id);\n\n//     const response = await fetch('/api/account/'+ id );\n//     // console.log(response;                  // these are logging OK to console, but are not being displayed for third acct.\n//     return await response.json();\n// }\n\n// export async function getVC(name) {\n\n//     console.log(name);\n\n//     const response = await fetch('/api/vc/'+ name );\n//     console.log(response);\n//     return await response.json();\n// }\n\n// export async function createTrade(data) {\n\n//     console.log(data);\n\n//     const response = await fetch(`/api/trade`, {\n//         method: 'POST',\n//         headers: {'Content-Type': 'application/json'},\n//         body: JSON.stringify(data)\n//       })\n//     return await response;\n// }\n\n// export async function showTrades() {\n\n//     const response = await fetch('/api/trades' );\n//     // console.log(response);\n//     console.log(\"function showTrades fetched from /api/trades\");\n//     return await response.json();\n// }\n\n// export async function getBalance(list, state) {\n//     // console.log(list, state);\n\n//     let myAccounts = list;\n//     let runTotal = 0;\n\n//     // map allows forEach account, do a thing\n//     myAccounts.map(\n//         (acct)=>{\n\n//             // console.log(acct);\n\n//           let currencyId = acct.currency\n//           if( acct.currency.startsWith(\"VC_\") ) {\n//             // console.log('hotfix');\n//             currencyId = currencyId.substring(3);               // remove the VC to get the FIAT FX\n//           }\n\n//           // this will depend on default currency (CAD in my case)\n\n//           console.log(\"Placeholder CAD Hardcoded\",state.prices);\n\n//           // e.g. if BASEprice is 1, account BASE is set to CAD, then \n//           // prices should be listed/displayed in home currency\n\n//           const BASEprice = 1;\n//           const BTCprice = state.prices.btc || 27000/BASEprice;\n//           const ETHprice = state.prices.eth || 2111/BASEprice;\n//           const CHFprice = state.prices.chf || 1.3/BASEprice;\n//           const USDprice = state.prices.usd || 1.37/BASEprice;\n\n\n//           let balInit = acct.balance.accountBalance;\n//           let balConv = parseFloat(balInit);  //* parseFloat(BTCprice);\n//           // let thisPrice = CADprice;\n\n//           // console.log(currencyId);\n\n//           if(currencyId === \"BTC\") {\n//             balConv = parseFloat(balInit) * parseFloat(BTCprice);\n//           } else if(currencyId === \"ETH\"){\n//             balConv = parseFloat(balInit) * parseFloat(ETHprice);\n//           } else if(currencyId === \"CHF\") {\n//             balConv = parseFloat(balInit) * parseFloat(CHFprice);\n//           } else if(currencyId === \"USD\") {\n//             balConv = parseFloat(balInit) * parseFloat(USDprice);\n//           }\n\n//           // console.log(balConv);\n\n//           runTotal = runTotal + balConv;        // sum total in default currency (CAD)\n\n//           return runTotal;\n\n//       });\n\n//     return runTotal;                // return sum when completed\n// }\n\n// export async function newBTCMaster(){\n//     const response = await fetch('/api/bitcoin/wallet');\n//     console.log(response);\n//     return await response.json();\n// }\n\n// export async function newBTCAccount(data) {\n\n//     console.log(data);\n\n//     if(data.xpub === \"\"){\n//         // fail without xpub - this is ok for internal accounts without blockchain/wallet required, but YMMV\n//         return false;\n//     }\n\n//     const response = await fetch('/api/ledger/account', {\n//         method: 'POST',\n//         headers: {'Content-Type': 'application/json'},\n//         body: JSON.stringify(data)\n//       });\n//     // console.log(response);\n//     // return await response.json();\n//     return await response;\n// }\n\n// export async function newWalletAddress(id) {\n\n//     console.log(id);\n\n//     if(id === \"accountId\") {\n//         // default account id is for BCARD_FEES BTC account with id: 636bb54f5f95f8f981cbc519\n//         id = \"636bb54f5f95f8f981cbc519\";\n//     }\n\n//     const response = await fetch('/api/address/account/'+ id );\n//     console.log(response);\n//     return await response.json();\n// }\n\n// export async function walletAddressInfo(id) {\n//     console.log(id);\n\n//     if(id === \"accountId\") {\n//         // default account id is for BCARD_FEES BTC account with id: 636bb54f5f95f8f981cbc519\n//         id = \"636bb54f5f95f8f981cbc519\";\n//     }\n\n//     const response = await fetch('/api/ledger/account/'+ id );\n//     console.log(response);\n//     return await response.json();\n// }\n\n// export async function newWalletKey(index,input) {\n//     console.log(index,input);\n\n//     if(index === \"\") {\n//         index = 0;\n//     }\n\n//     let data = {\n//         \"index\": index,\n//         \"mnemonic\": input\n//     }\n\n//     const response = await fetch('/api/bitcoin/wallet/priv', {\n//         method: 'POST',\n//         headers: {'Content-Type': 'application/json'},\n//         body: JSON.stringify(data)\n//       });\n\n//     return await response.json();\n\n//     // const response = await fetch('/api/key/account/'+ id );\n//     // console.log(response);\n//     // return await response.json();\n// }\n\n","export async function newBTCMaster(){\n    const response = await fetch('/api/bitcoin/wallet');\n    console.log(response);\n    return await response.json();\n}\n\nexport async function newXpubAccount(data) {\n\n    console.log(data);\n\n    if(data.xpub === \"\"){\n        // fail without xpub - this is ok for internal accounts without blockchain/wallet required, but YMMV\n        return false;\n    }\n\n    const response = await fetch('/api/ledger/account', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(data)\n      });\n    \n    console.log(response);\n    // return await response.json();\n    return await response;\n}\n\n// yes\nexport async function newETHWallet(userId, tokenOverride, custId) {\n\n    console.log(userId, tokenOverride, custId);\n\n    // data should be the userId ( system-internal for the user )\n\n    // IF tokenOverride === \"BANK\", then we need to execute the steps required to create the BANK wallet\n\n    if(tokenOverride === \"BANK\"){\n        console.log('BANK Token Override -> TBD bcard api server calls');\n\n        if(custId === \"636bb1a23053ea6eb5b85a30\") {\n            // it's a fees service account, so override uid\n            userId = \"BCARD_FEES\";\n            console.log(\"Overiding for Fees User Wallet Creation.\");\n        }\n\n        // the below should be all implemented serverside\n\n        const response = await fetch('/api/'+tokenOverride+'/wallet/' + custId + '/'+userId);\n\n        // let responseJSON = response.json();\n        console.log(response);\n\n\n    } else if(tokenOverride){\n        // then set response to the URL indicated by the token override to process that API call change \n        // console.log('boo');\n        const response = await fetch('/api/'+tokenOverride+'/wallet/' + userId);\n\n        let responseXpub = response.json().xpub;\n        console.log(responseXpub);\n\n    } else {\n\n        if(!userId) {\n            console.log(\"Missing input for User ID Generation - Account can't be tied to user\");\n        }\n\n        // call to new ETH Master - unique xpub and mnemonic for each user means accounts can be exported\n        const response = await fetch('/api/ethereum/wallet/' + userId);\n        console.log(response);\n        let responseXpub = response.json().xpub;\n        console.log(responseXpub);\n\n    }\n\n\n    \n\n    // return await response.json();\n\n}\n\n//yes\nexport async function newWalletKey(index,input) {\n    console.log(\"Currently BTC only.\");\n    console.log(index,input);\n\n    if(index === \"\") {\n        index = 0;\n    }\n\n    let data = {\n        \"index\": index,\n        \"mnemonic\": input\n    }\n\n    const response = await fetch('/api/bitcoin/wallet/priv', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(data)\n      });\n\n    return await response.json();\n\n    // const response = await fetch('/api/key/account/'+ id );\n    // console.log(response);\n    // return await response.json();\n}\n\n// export async function getAllUsers() {\n\n//     const response = await fetch('/api/users');\n//     return await response.json();\n// }\n\n// export async function getPrices() {\n\n//     const response = await fetch('/api/prices');\n//     // console.log(response);\n//     if(response.status === 200) console.log(\"Successful call to /api/prices\");\n//     return await response.json();\n// }\n\n// export async function getCustomers() {\n\n//     const response = await fetch('/api/customers');\n//     // console.log(response);\n//     return await response.json();\n// }\n\n// export async function getAccount(id) {\n\n//     console.log(id);\n\n//     const response = await fetch('/api/account/'+ id );\n//     // console.log(response;                  // these are logging OK to console, but are not being displayed for third acct.\n//     return await response.json();\n// }\n\n// export async function getVC(name) {\n\n//     console.log(name);\n\n//     const response = await fetch('/api/vc/'+ name );\n//     console.log(response);\n//     return await response.json();\n// }\n\n// export async function createTrade(data) {\n\n//     console.log(data);\n\n//     const response = await fetch(`/api/trade`, {\n//         method: 'POST',\n//         headers: {'Content-Type': 'application/json'},\n//         body: JSON.stringify(data)\n//       })\n//     return await response;\n// }\n\n// export async function showTrades() {\n\n//     const response = await fetch('/api/trades' );\n//     // console.log(response);\n//     console.log(\"function showTrades fetched from /api/trades\");\n//     return await response.json();\n// }\n\n// export async function getBalance(list, state) {\n//     // console.log(list, state);\n\n//     let myAccounts = list;\n//     let runTotal = 0;\n\n//     // map allows forEach account, do a thing\n//     myAccounts.map(\n//         (acct)=>{\n\n//             // console.log(acct);\n\n//           let currencyId = acct.currency\n//           if( acct.currency.startsWith(\"VC_\") ) {\n//             // console.log('hotfix');\n//             currencyId = currencyId.substring(3);               // remove the VC to get the FIAT FX\n//           }\n\n//           // this will depend on default currency (CAD in my case)\n\n//           console.log(\"Placeholder CAD Hardcoded\",state.prices);\n\n//           // e.g. if BASEprice is 1, account BASE is set to CAD, then \n//           // prices should be listed/displayed in home currency\n\n//           const BASEprice = 1;\n//           const BTCprice = state.prices.btc || 27000/BASEprice;\n//           const ETHprice = state.prices.eth || 2111/BASEprice;\n//           const CHFprice = state.prices.chf || 1.3/BASEprice;\n//           const USDprice = state.prices.usd || 1.37/BASEprice;\n\n\n//           let balInit = acct.balance.accountBalance;\n//           let balConv = parseFloat(balInit);  //* parseFloat(BTCprice);\n//           // let thisPrice = CADprice;\n\n//           // console.log(currencyId);\n\n//           if(currencyId === \"BTC\") {\n//             balConv = parseFloat(balInit) * parseFloat(BTCprice);\n//           } else if(currencyId === \"ETH\"){\n//             balConv = parseFloat(balInit) * parseFloat(ETHprice);\n//           } else if(currencyId === \"CHF\") {\n//             balConv = parseFloat(balInit) * parseFloat(CHFprice);\n//           } else if(currencyId === \"USD\") {\n//             balConv = parseFloat(balInit) * parseFloat(USDprice);\n//           }\n\n//           // console.log(balConv);\n\n//           runTotal = runTotal + balConv;        // sum total in default currency (CAD)\n\n//           return runTotal;\n\n//       });\n\n//     return runTotal;                // return sum when completed\n// }\n\n\n// export async function newWalletAddress(id) {\n\n//     console.log(id);\n\n//     if(id === \"accountId\") {\n//         // default account id is for BCARD_FEES BTC account with id: 636bb54f5f95f8f981cbc519\n//         id = \"636bb54f5f95f8f981cbc519\";\n//     }\n\n//     const response = await fetch('/api/address/account/'+ id );\n//     console.log(response);\n//     return await response.json();\n// }\n\n// export async function walletAddressInfo(id) {\n//     console.log(id);\n\n//     if(id === \"accountId\") {\n//         // default account id is for BCARD_FEES BTC account with id: 636bb54f5f95f8f981cbc519\n//         id = \"636bb54f5f95f8f981cbc519\";\n//     }\n\n//     const response = await fetch('/api/ledger/account/'+ id );\n//     console.log(response);\n//     return await response.json();\n// }\n\n\n\n\n// export async function createUser(data) {\n//     const response = await fetch(`/api/user`, {\n//         method: 'POST',\n//         headers: {'Content-Type': 'application/json'},\n//         body: JSON.stringify({user: data})\n//       })\n//     return await response.json();\n// }","import { initializeApp } from 'firebase/app'\nimport { getFirestore, collection, addDoc, where, query, getDocs} from 'firebase/firestore'\nimport \"firebase/compat/auth\";\nimport { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, GoogleAuthProvider } from 'firebase/auth'\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDnrcCHZp59E11ns89hM-a1Xl9953sP6Lw\",\n  authDomain: \"fir-auth-e51d2.firebaseapp.com\",\n  projectId: \"fir-auth-e51d2\",\n  storageBucket: \"fir-auth-e51d2.appspot.com\",\n  messagingSenderId: \"424293883684\",\n  appId: \"1:424293883684:web:a5a57c72a0b9fef6915db1\",\n  measurementId: \"G-89JHL0G2WG\"\n};\n\n\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\n\nlet firebase = app;   // var for export\n\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\n\nexport const auth = getAuth(app);\nauth.languageCode = 'en';// firebase.auth().useDeviceLanguage;    // for reCAPTCHA\n\nexport default firebase;\n\nexport const signInWithGoogle = async () => {\n  try {\n    const res = await auth.signInWithPopup(provider);\n    const user = res.user;\n    const userRef = collection(db, \"users\");\n    const result = await getDocs(query(userRef, where(\"uid\", \"==\", user.uid)));\n    if (result.empty) {\n      await addDoc(collection(db, \"users\"), {\n        uid: user.uid,\n        name: user.displayName,\n        authProvider: \"google\",\n        email: user.email,\n      });\n    }\n  } catch (err) {\n    alert(err.message);\n  }\n};\n\nexport const signInWithPhoneNumber = async (auth, phoneNumber, appVerifier) => {\n\n  await signInWithPhoneNumber(auth, phoneNumber, appVerifier)\n    .then((confirmationResult) => {\n      // SMS Sent.Prompt usser to type the code from the message, then sign in user with confirmationResult.confirm(code).\n      window.confirmationResult = confirmationResult;\n      // .. \n    }).catch((error) => {\n      // Error; SMS not sent\n      //...\n    });\n\n};\n\n  // try {\n    // const res = await auth.signInWithPopup(provider);\n    // const user = res.user;\n    // const userRef = collection(db, \"users\");\n    // const result = await getDocs(query(userRef, where(\"uid\", \"==\", user.uid)));\n    // if (result.empty) {\n    //   await addDoc(collection(db, \"users\"), {\n    //     uid: user.uid,\n    //     name: user.displayName,\n    //     authProvider: \"google\",\n    //     email: user.email,\n    //   });\n    // }\n  // } catch (err) {\n    // alert(err.message);\n  // }\n// };\n\nexport const signInWithEAndP = async (email, password) => {\n\n  await signInWithEmailAndPassword(auth, email, password)\n    .then((userCredential) => {\n\n      console.log(email, password);\n      // Signed in \n      const user = userCredential.user;\n      // ...\n      console.log(user);\n\n      return user.email;        // this fails to trigger a send back to the front end \n\n      // const response = await fetch('/api/users');\n      // return await response.json();\n\n    })\n    .catch((error) => {\n      // const errorCode = error.code;\n      const errorMessage = error.message;\n      alert(errorMessage);\n    });\n\n    return \"hello\";\n\n};\n\nexport const createUserWithEAndP = async (email, password) => {\n  try {\n    await createUserWithEmailAndPassword(auth, email, password)\n    .then((userCredential) => {\n\n      console.log(email, password)\n      // Signed in \n      const user = userCredential.user;\n      // ...\n      console.log(user);    // pass back user Object? - already hapening\n    })\n    .catch((error) => {\n      // const errorCode = error.code;\n      const errorMessage = error.message;\n      alert(errorMessage);\n\n      // ..\n    });\n\n  } catch (err) {\n    alert(err.message);\n  }\n\n  return \"userCreated\";\n  \n};\n\nexport const sendPasswordResetEmail = async (email) => {\n  try {\n    await auth.sendPasswordResetEmail(email);\n    alert(\"Password reset link sent!\");\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nexport const logout = () => {\n  auth.signOut();\n  alert(\"Bye\");\n  window.location.reload(false);\n};","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Header } from './components/Header'\nimport { Users } from './components/Users'\n// import { Accounts } from './components/Accounts'\nimport { DisplayBoard } from './components/DisplayBoard'\nimport CreateUser from './components/CreateUser'\nimport { TradeForm } from './components/TradeForm'\nimport { SwapForm } from './components/SwapForm'\nimport { TransferForm } from './components/TransferForm'\nimport { FaucetForm } from './components/FaucetForm'\n// service return\nimport { getAllUsers, createUser, getAccount, getCustomers, getVC, getBalance, showTrades, newBTCMaster, newBTCAccount, newWalletAddress, getEthAddress, walletAddressInfo, newUSDWallet } from './services/UserService'    // all data retrieval request functions \nimport { getPrices } from './services/BcardApi'           // move bcard server calls here\nimport { newWalletKey, newETHWallet } from './services/TatumSecured'    // highly secured private key, etc. tx here\n\n\nimport { adminWhitelist } from './utils/adminWhitelist'\n\n// newXpubAccount\n\n// , getAccount, getCustomers, getVC, getBalance, createTrade, showTrades, newBTCMaster, newBTCAccount, newWalletAddress, walletAddressInfo, newWalletKey\n\n// internal utils\nimport { convertToCAD } from './utils/convertToCAD'\n\n\n// firebase AUTH\n// import Login from './components/LoginPage';\n// import Home from './components/HomePage';\n\nimport { signInWithEAndP, createUserWithEAndP, logout, \n      signInWithPhoneNumber } from './services/firebase'    // packaged services\n// Import the functions you need from the SDKs you need\n// import { initializeApp } from \"firebase/app\";\n// // import { getAnalytics } from \"firebase/analytics\";\nimport { getAuth, onAuthStateChanged, RecaptchaVerifier } from \"firebase/auth\";\n\n// function triggerShowTrades() {\n//   // update display of ACTIVE trades in UI after account is loaded\n//   showTrades()\n//   .then(trades => {\n\n//     console.log(trades);\n//     let buyOrders = trades[0];\n//     let sellOrders = trades[1];\n\n//     console.log(\"THIS FUNCTION RETURN FROM CALL BCARD API FOR TRADES\")\n//     return { buyOrders: buyOrders, sellOrders: sellOrders };\n\n//   });\n// }\n\n\nfunction orderInfo(order) {\n  console.log(\"Take order ID and display detail w/button to CANCEL or FILL.\")\n}\n\n\nfunction GetUniqueCust(props) {\n\n  // console.log(props.state.user);\n\n  if(props.state.user.uid){\n      return (\n        <h4>Welcome Back <small>{props.state.user.email}</small></h4>\n      )\n    // check state to see if customer ID is set\n  } else if(props.state.custId){\n      return (\n        <h4>Hello <small>{props.state.custId}</small></h4>\n      )\n  } else {\n      return (\n        <p>Login above to Display list of all Accounts, or Create New Account</p>)\n  }\n\n  \n}\n\n\nfunction TradeTableView(props) {\n\n  // console.log(props);\n\n  let list_of_trades = props.trades;\n\n  const TradeRow = (trade,index) => {\n\n        return(\n              <tr key = {index} className={index%2 === 0?'odd':'even'}>\n                  \n                  <td>\n                    <button \n                      type=\"btn\"\n                      onClick={() =>  {\n                        // this.setState({acctId: account.id}); \n                        console.log(\"Need to setState with click here -> emit event?\");\n                        alert(\"Display popup w/ order details: If Owner -> delete this post; else -> fill this order\");\n\n                        orderInfo(\"ORDER ID #\");\n                        // also popup account info alert panel\n                        // walletAddressInfo(account.id);\n                      }} >\n                      \n                      {trade.id}\n                    </button>\n                  </td> \n                  <td>{trade.pair}</td>\n                  <td>{trade.amount}</td>\n                  <td>{trade.price}</td>\n                  <td>{ convertToCAD(trade.amount,trade.pair, props.state).toFixed(2) }</td>\n                  <td>{trade.fill} tokens</td>\n                  <td>{ ((props.state.prices.time - trade.created)/60000).toFixed(2) } min</td>\n              </tr>\n          )\n    }\n\n  const tradeTable = list_of_trades.map((trade,index) => TradeRow(trade,index))\n\n  return(\n        <div className=\"container\">\n            <h4>{props.title}</h4>\n            <table className=\"table table-bordered\">\n                <thead>\n                <tr>\n                    <th>id</th>\n                    <th>currency pair</th>\n                    <th>token</th>\n                    <th>price</th>\n                    <th>{props.state.baseCurrency} value</th>\n                    <th>Fill Amt.</th>\n                    <th>Age</th>\n                </tr>\n                </thead>\n                <tbody>\n                    {tradeTable}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\n\n\nclass App extends Component {\n\n  /** Internal application state: variable storage **/\n  state = {\n    signedIn: false,    // initial state for application\n    user: {},           // use the user variable to store data for logged in user via firebase (user.uid)\n    customers: [],      // customers list is loaded first (in bg) to connect auth user to tatum\n    prices: [],         // IMPORTANT for price storage - TBD dynamic list of token prices\n\n    custId: \"\",         // tatum customer ID\n    baseCurrency: \"\",   // is Set on login from customer object (can we update this with POSTMAN calls?)\n    balance: 0.0,       // customer balance storage as calculated via getBalance\n    account_list: [],   // list of customer accounts\n    hasDAO: false,      // does customer have a DAO Account (BANK)\n    hasVISA: false,     // doess custoemr have a VISA (USDC) Account\n    recipients: [],     // storage of a list of users customer can send to \n\n    buyOrders: [],      // open buy orders on tradeBook\n    sellOrders: [],     // open sell orders on tradeBook\n\n    currentVC: [],      // LOOK: do we still have links? set on CLICK -> active current VC, display INFO\n    acctId: \"\",         // set on CLICK -> set active account in side panel\n    acctAddress: \"\",    // LOOK: is This Used?\n    acctTx: [],         // list of transactions that correspond to the currently selected account.\n\n\n    // eth: 0.1,\n    users: [],          // obsolete\n    userMap: new Map(), // not used\n    numberOfUsers: 0,   // not used\n    uniqCust: new Set(),  // not used\n\n  }\n\n\n  // constructor(props) {\n  //   super(props);   // no props on intial app load, but use =fu\n  //   // Don't call this.setState() here!\n  //   // this.state = { counter: 0 };\n  //   // this.handleClick = this.handleClick.bind(this);\n  // }\n\n  // this triggers for AUTH and prevState conditionals\n  componentDidMount(prevProps, prevState, snapshot) {\n    // console.log(prevProps, prevState, snapshot);\n\n    // console.log(this.state);\n\n    // determine authentication status\n    const auth = getAuth();\n    // console.log(auth);\n    window.recaptchaVerifier = new RecaptchaVerifier('sign-in-button', {\n      'size': 'invisible',\n      'callback': (response) => {\n        // reCAPTCHA Solve, allow sign in with phone Number\n        console.log( \"onSignInSubmit()\" );\n        this.loginUser();       // login execute after verification\n                              // disconnect submit?\n      }\n    }, auth);\n\n    onAuthStateChanged(auth, (user) => {\n      if (user) {\n        console.log(\"User is signed in\");\n        // User is signed in, see docs for a list of available properties\n        // https://firebase.google.com/docs/reference/js/firebase.User\n        // const uid = user.uid;   // this UID can be the unique identifier to breate Tatum accounts -> link to Google Auth Firebase Storage\n\n        // console.log(uid);\n        // console.log(user.email);\n        //  console.log(user);    // user object is the storage for Google Auth\n\n        // console.log(\"Welcome back \" + user.email);\n\n        this.setState({ signedIn: true });\n        this.setState({ user: user });\n\n        // set default to USD here to avoid the error checking along the way\n        this.setState({ baseCurrency: \"USD\" })\n\n        // check for customer_list mapping to get tatum customerId\n        this.getCustomers();\n\n        if(this.state.custId) {\n          console.log(this.state.prices);\n\n      \n        }\n\n\n      } else {\n        // User is signed out\n        console.log(\"User is signed Out\");\n        // ...\n        this.setState({ signedIn: false });\n        this.setState({ user: {} });\n      }\n    });\n\n    if(prevState) {\n      if (this.state.prices !== prevState.prices) {\n        // then the pricing data has been updated, so a refresh of the UI is required.\n        console.log(\"This on state recall, if prices are different - NEED A TIMER ANALYSIS - SET IN STATE\")\n      }\n    } else if(this.state.signedIn) {\n      // no previous state, so it is an initial load .\n      \n\n    } else {\n      // catch all for not signed in\n      console.log(\"Sign In\");\n    }\n\n    \n\n  }\n\n  /** Internal user creation functions - add hooks to firebase **/\n\n  loginUser = () => {\n    // hard code for now\n    // let email='tom@tranmer.ca';\n    // let password = '123456';\n\n    // console.log(this.state.user)\n\n    console.log(this.state.user.email,this.state.user.password);\n\n    signInWithEAndP(this.state.user.email,this.state.user.password)\n      .then(response => {\n\n        // get user object from auth\n        console.log(this.state.user.uid);\n\n        // set state for default currencyBase\n        this.setState({ baseCurrency: \"USD\" });   // defualt USD hard-codedhere\n        console.log(\"default USD hard-coded here on login\");\n\n\n\n\n        // console.log(response);\n        if(response) {\n          console.log(response)    \n          // this to get user email -> use HASH of email for creation of new accounts belonging to this user. \n          // this.setState({numberOfUsers: this.state.numberOfUsers + 1})\n\n          // may need to seState for user object\n          this.setState({\"signedIn\": true});\n\n          console.log(\"Request refresh due to state here.\");\n        }\n    });\n  }\n\n  signInWithPhoneNumber = () => {\n    // hard code for now\n    // let email='tom@tranmer.ca';\n    // let password = '123456';\n\n    // console.log(this.state.user)\n\n    // console.log(this.state.user.email,this.state.user.password);\n\n    const auth = getAuth();\n    console.log(auth);\n\n    let phoneNo = \"16478989204\";    // hard code TOM\n    let appVerifier = window.recaptchaVerifier;\n\n    signInWithPhoneNumber(auth,phoneNo,appVerifier)\n      .then(response => {\n\n        console.log(response)    \n\n\n        // get user object from auth\n        // console.log(this.state.user.uid);\n\n        // set state for default currencyBase\n        //  this.setState({ baseCurrency: \"USD\" });   // defualt USD hard-codedhere\n        // console.log(\"default USD hard-coded here on login\");\n\n\n\n\n        // console.log(response);\n        if(response) {\n          // this to get user email -> use HASH of email for creation of new accounts belonging to this user. \n          // this.setState({numberOfUsers: this.state.numberOfUsers + 1})\n\n          // may need to seState for user object\n          // this.setState({\"signedIn\": true});\n\n          console.log(\"Request refresh due to state here.\");\n        }\n    });\n  }\n\n  createNewUser = (e,pw) => {\n    // hard code for now\n    // let email='tom@jones.ca';\n    // let password = '123456';\n\n    // required from the CURRENT data entry inputs\n    // console.log(this.state.user.email,this.state.user.password);\n\n    createUserWithEAndP(this.state.user.email,this.state.user.password)\n      .then(response => {\n\n        this.setState({\"signedIn\": true});\n\n        console.log(\"Request refresh due to state here.\");\n\n        console.log(response);\n\n        // this fails because response fails\n        if(response) {\n          console.log(response.email)    \n          // this to get user email -> use HASH of email for creation of new accounts belonging to this user. \n          // this.setState({numberOfUsers: this.state.numberOfUsers + 1})\n\n          this.setState({user: 1})\n        }\n    });\n  }\n\n  // DEP\n  createUser = (e) => {\n      createUser(this.state.user)\n        .then(response => {\n          console.log(response);      // this is user object as submitted (body data)\n          this.setState({numberOfUsers: this.state.numberOfUsers + 1})\n\n          // now run creaetNewUser for the auth server\n          createUserWithEAndP(response.email,response.password)\n            .then(response => {\n              console.log(response);    // this is not returning anything\n              this.setState({user: 1});\n            });\n        });\n  }\n\n  getAllUsers = () => {\n    getAllUsers()\n      .then(users => {\n        console.log(users)\n        this.setState({users: users, numberOfUsers: users.length})\n      });\n  }\n  // when user form is changed, update user object in app state variable\n  \n  // for form submit (user auth)\n  onChangeForm = (e) => {      \n    let user = this.state.user;   // perpetual storage in the app DOM\n\n    // console.log(user);\n\n    if (e.target.name === 'firstname') {\n        user.firstName = e.target.value;\n    } else if (e.target.name === 'password') {\n        user.password = e.target.value;\n    } else if (e.target.name === 'email') {\n        user.email = e.target.value;\n    }\n\n    // this sets the state for the user to be created or logged in\n    this.setState({user})\n  }\n\n  newBTCMaster = () => {\n\n    // send request to generate BC Master\n    // and receive back an account info list { array of: objects }\n\n    newBTCMaster()\n      .then(account_info => {\n\n        console.log(account_info)   // accounts are good retrieved here\n        console.log(\"RETURN FROM TATUM API FOR CREATE BTC MASTER\")\n\n        alert(\"xpub for account: \" + account_info.xpub);\n        alert(\"mnemonic (one-time only!): \" +account_info.mnemonic);\n\n      })\n\n  }\n\n  newBTCAccount = (currency,EXT_ID,xpub) => {\n\n    // will need data from body: currency, EXT_ID, xpub, \n\n    // if no xpub, still will generate an account - but with no accessible wallets?\n    if(xpub===\"xpub\"){\n      // default to XPUB for BCARD_FEES account\n      xpub = \"xpub6Em42hjC1gHisq3h6f8vXr5ACAMMPV3QnorN5sojgT4f8t4Hd7qfWQJL6wAZtobukajR2vmnYEVPsUdvRE5f1FsWTuvdfh5xBMXwvkDftFX\";\n    }\n\n    let data = {\n      \"currency\": currency,\n      \"xpub\": xpub,\n      \"customer\": {\n        \"externalId\": EXT_ID,\n        \"customerCountry\": \"US\",\n        \"accountingCurrency\": \"USD\"\n      }    \n    }\n\n    newBTCAccount(data)\n      .then(account_info => {\n        \n        console.log(account_info)\n        console.log(\"accountId: \" + account_info.id + \" for custId: \" + account_info.customerId + \" has been created\")\n        console.log(\"RETURN FROM TATUM LEDGER ACCOUNT CREATION\")\n      })\n  }\n\n\n  newXpubAccount = (currency,EXT_ID,xpub) => {\n\n    // will need data from body: currency, EXT_ID, xpub, \n\n    // if no xpub, still will generate an account - but with no accessible wallets?\n    if(xpub===\"xpub\"){\n      // default to XPUB for tomtranmeer ETH account\n      xpub = \"xpub6DbQz3y2wQHZkkw85c1JxJJeBVNqH2SpuApM5i2Ta1jeFGEebeNLJAMDEJD1uYKEaCF9JgTNPFDanJe3bccNsi4Vf99ngjLY5AVUfVtEYw2\";\n    }\n\n    let data = {\n      \"currency\": currency,\n      \"xpub\": xpub,\n      \"customer\": {\n        \"externalId\": EXT_ID,\n        \"customerCountry\": \"US\",\n        \"accountingCurrency\": \"USD\"\n      }    \n    }\n\n    newBTCAccount(data)\n      .then(account_info => {\n        \n        console.log(account_info)\n        console.log(\"accountId: \" + account_info.id + \" for custId: \" + account_info.customerId + \" has been created\")\n        console.log(\"RETURN FROM TATUM LEDGER ACCOUNT CREATION\")\n      })\n  }\n\n\n\n  /** Autorun / initial page load (after authentication) **/\n\n\n  /** get list of all customers w/ uid and custID for mapping **/\n  getCustomers = () => {\n    // console.log(\"This is an autorun function to get the customer list and map the CustId to the External Id used in our auth system.\");\n\n    // console.log();\n\n    this.getPrices(this.state.baseCurrency);                            // load in the prices as unauth users do not see them\n\n\n    getCustomers()\n      .then(customers => {\n        this.setState({customers: customers})\n        // console.log(\"THIS CALL TO TATUM API FOR CUSTOMERS (can map external id to internal id)\");\n\n        // customers -> all customers for TATUM backend system\n\n        // if has a logged-in ID -> need to set specifics for THIS Customer\n\n        // console.log('uid' in this.state.user);   // ok here for logged in users only should be running the getCustomers function\n        const uid = this.state.user.uid;\n        // const matchFlag = false;\n        // console.log(uid,customers)   // customers are good retrieved here\n\n        // foreach customers -> loop through each in list looking for external Id match\n\n        let custMatch;\n\n        customers.forEach(cust => {\n          // console.log(cust.externalId);\n\n          if(uid === cust.externalId) {\n            // matchFlag = true;\n            console.log(\"USER MATCH -> setState\");\n            \n            custMatch = cust;\n            this.setState({\"custId\":cust.id, baseCurrency: cust.accountingCurrency});\n            this.getAccount(cust.id);         // next function call\n            // this.setState                  // load in the customers accounts (calls prices update here)\n\n          }  \n\n          if(custMatch){}   // if a match is found, then progress to load in customer account\n\n        });\n\n      });\n\n  }\n\n\n\n  /************************** wallet creation function pieces - (admin only) *********************/\n\n  // OBSOLETE? generate ETH address for specified account w/ derivation Key index\n  getEthAddress = (acctId, index) => {\n\n    getEthAddress(acctId, index)\n      .then(info => {\n        console.log(info);\n        alert(\"Your new ETH Wallet Address is: \" + info.address + \"You can fund this wallet address or share it with your friends!\")\n        console.log(\"RETURN FROM TATUM ADDRESS GENERATION WITH address: \" + info.address)\n      })\n  }\n\n  // generate new private Key for \n  newWalletKey = (index, input) => {\n\n    // index = 0;\n    // let mnemonic = \"aisle kidney upper grain explain payment wash donate visual praise budget garden moment bleak burst trip force come prosper beef hello naive sleep group\";\n\n    // console.log(input, \"Need to connect input box in UI here to input mnemonic seed phrase to generate key[index]\");\n\n    newWalletKey(index,input)\n      .then(key_data => {\n        console.log(key_data);    // accessible directly at key_data.key\n        console.log(\"RETURN FROM TATUM LEDGER ADDRESS KEY GENERATION -> Key only displayed on server (as it should be!\")\n\n      })\n  }\n\n    // create one based on NO(xpub) -> id only for custodial accounts as they already are associated with xpub\n  newWalletAddress = (id) => {\n\n    console.log(this.state.acctId);\n    if(this.state.acctId !== \"\"){\n      // then use this SET account as the ID for the wallet address generation\n      id = this.state.acctId;\n    }\n\n    newWalletAddress(id)\n      .then(account_info => {\n        \n        console.log(account_info)\n        // console.log(\"accountId: \" + account_info.id + \" for custId: \" + account_info.customerId + \" has been created\")\n        console.log(\"RETURN FROM TATUM LEDGER ADDRESS CREATION\")\n      })\n  }\n\n  /************************** info functions (admin) *********************/\n\n  getVC = (currency) => {\n\n    console.log(this.state);\n    // console.log(currency);\n    console.log(\"Displaying Virtual Currency Stats for: \" + currency);\n\n    let useVC = currency || \"VC_CHF\"; // init ad service accoutn for testing purposes.\n    // if(this.state.currentVC.name !== \"\") {\n    //   useVC = this.state.currentVC;\n    //   console.log('override vc name for VC');\n    // }\n\n    // confirm ID from state\n    // send id to function getAccount\n    // and receive back an account list array of objects\n\n    getVC(useVC)\n      .then(vcDetail => {\n        this.setState({currentVC: vcDetail})\n\n        console.log(vcDetail)   // accounts are good retrieved here\n        console.log(\"RETURN FROM TATUM API FOR Virtual Currency\")\n      });\n  }\n\n\n  /************************** info functions (all) *********************/\n\n  /** function call to gather prices from a list of available tokens **/\n  getPrices = (base) => {\n\n    // console.log(base);    // override base currency\n\n    // use any currently set BASE rate for any price retrievals and display\n    getPrices(base)\n      .then(prices => {\n\n        // use SetState for existing component\n        this.setState({ prices: prices })   // eth setting legacy and can be removed\n\n        // console.log(\"THIS CALL TO BCARD API FOR PRICES, with BASE\")\n\n      });\n  }\n\n  // get or refresh Accounts info for currently selected CustID\n  getAccount = (custId) => {\n\n    console.log(\"Running getAccount - rename this function\");\n    // console.log(custId);\n\n    let useAcct = custId;   // default is the passed value\n    if(custId === \"\") {\n      // passed in a blank value so set some defaults\n      useAcct = \"6357fa3d7511407e6d732fe4\"; // init service account for testing purposes.\n      console.log('override acct num for customer SELECTED - DEFAULT SERVICE ACCT');\n\n      // OVERRIDE -> set internally\n      if(this.state.custId !== \"\"){\n        console.log('override acct num for customer SELECTED - STATE VAR');\n        useAcct = this.state.custId;\n      }\n    } \n\n    // confirm ID from state\n    // send id to function getAccount\n    // and receive back an account list array of objects\n\n    //let setCurrency = \"USD\";\n    // this.setState({baseCurrency:setCurrency});    // hard-code CAD\n    // console.log(this.state.baseCurrency)\n\n    // console.log(\"Get Account req. call to getPrices first\");\n\n    getPrices(this.state.baseCurrency).then(prices => {\n      this.setState(prices);\n    }).then(() =>{\n\n    //then call customer accounts\n    getAccount(useAcct)\n        .then(account_list => {\n\n\n          // console.log(account_list);    // merge these if matches multiple for single customer?\n\n          // set defualtCurrency from account_list[0]\n\n          // account_list[0] should be the olders account (first setup)\n\n          // most recently created account should be available at :account_list[account_list.length-1]\n\n          // console.log(account_list);\n\n          // set controls for addDAO (BANK) and addVISA (based on current accounts)\n          for(let i=0; i<account_list.length; i++) {\n            // console.log(account_list[i]);\n            let thisAccount = account_list[i];\n\n            if(thisAccount.currency === \"BANK\"){\n              this.setState({hasDAO:true})\n            } else if(thisAccount.currency === \"USDC\" || thisAccount.currency === \"USDC_V\") {\n              this.setState({hasVISA: true})\n            }\n          }\n\n          this.setState({account_list: account_list, custId: useAcct})\n\n\n          // console.log(\"account_list,defualtCurrency RETURN FROM BCARD API FOR CustID\")\n\n          // then load the customers balance\n          getBalance(account_list, this.state)\n              .then(balance => {\n                // console.log(balance);       // ok here\n                this.setState({balance:balance})\n              })\n\n          // then load in all the trades (optional)\n          showTrades()\n            .then(trades => {\n\n              let buyOrders = trades[0];\n              let sellOrders = trades[1];\n\n              this.setState({ buyOrders: buyOrders, sellOrders: sellOrders });\n\n            });\n\n          })    // end then callback function\n\n        console.log(\"THIS FUNCTION RETURN FROM CALL BCARD API FOR getAccount\");\n\n\n    })    // end then after prices\n\n  }\n\n  // rename getAccount method here to getMaster\n  getMaster = (custId) => {\n\n    console.log(\"Running getMaster - new name for this getAccount method\");\n    // console.log(custId);\n\n    let useAcct = custId;   // default is the passed value\n    if(custId === \"\") {\n      // passed in a blank value so set some defaults\n      useAcct = \"6357fa3d7511407e6d732fe4\"; // init service account for testing purposes.\n      console.log('override acct num for customer SELECTED - DEFAULT SERVICE ACCT');\n\n      // OVERRIDE -> set internally\n      if(this.state.custId !== \"\"){\n        console.log('override acct num for customer SELECTED - STATE VAR');\n        useAcct = this.state.custId;\n      }\n    } \n\n    // check prices.time first,then update if needed\n\n    // console.log(this.state.prices.time);       // last gathererd time\n    // console.log(Date.now());                  //UNIX time in ms\n\n    let priceElapsed = Date.now() - this.state.prices.time;\n\n    if(priceElapsed > 200000){\n      // 200K ms\n      console.log(priceElapsed);\n\n      getPrices(this.state.baseCurrency).then(prices => {\n        this.setState(prices);\n      }).then(() =>{\n\n        //then call customer accounts\n        getAccount(useAcct)\n          .then(account_list => {\n\n            // set controls for addDAO (BANK) and addVISA (based on current accounts)\n            for(let i=0; i<account_list.length; i++) {\n              // console.log(account_list[i]);\n              let thisAccount = account_list[i];\n\n              if(thisAccount.currency === \"BANK\"){\n                this.setState({hasDAO:true})\n              } else if(thisAccount.currency === \"USDC\" || thisAccount.currency === \"USDC_V\") {\n                this.setState({hasVISA: true})\n              }\n            }\n\n            this.setState({account_list: account_list, custId: useAcct})\n\n            // then load the customers balance\n            getBalance(account_list, this.state)\n                .then(balance => {\n                  this.setState({balance:balance})\n                })\n\n            // then load in all the trades (optional)\n            showTrades()\n              .then(trades => {\n\n                let buyOrders = trades[0];\n                let sellOrders = trades[1];\n\n                this.setState({ buyOrders: buyOrders, sellOrders: sellOrders });\n\n              });\n\n          })    // end then callback function for getAccount\n\n        console.log(\"THIS Method RETURN FROM CALL BCARD API FOR getMaster\");\n\n\n    })    // end then after prices calls  - skip for master refresh, unless time\n\n    } else {\n      // skip the prices update for display\n      console.log(priceElapsed);\n      //then call customer accounts\n      getAccount(useAcct)\n        .then(account_list => {\n\n          // set controls for addDAO (BANK) and addVISA (based on current accounts)\n          for(let i=0; i<account_list.length; i++) {\n            // console.log(account_list[i]);\n            let thisAccount = account_list[i];\n\n            if(thisAccount.currency === \"BANK\"){\n              this.setState({hasDAO:true})\n            } else if(thisAccount.currency === \"USDC\" || thisAccount.currency === \"USDC_V\") {\n              this.setState({hasVISA: true})\n            }\n          }\n\n          this.setState({account_list: account_list, custId: useAcct})\n\n          // then load the customers balance\n          getBalance(account_list, this.state)\n              .then(balance => {\n                this.setState({balance:balance})\n              })\n\n          })    // end then callback function for getAccount\n\n        console.log(\"THIS Method - Short RETURN FROM CALL BCARD API FOR getMaster\");\n\n    }\n\n\n\n  }\n\n  // lookup info based on specified ID\n  walletAddressInfo = (id) => {\n\n    console.log(this.state.acctId);\n    if(this.state.acctId !== \"\"){\n      // then use this SET account as the ID for the wallet address info request\n      id = this.state.acctId;\n    } else {\n      this.setState({acctId: id}); \n    }\n\n    walletAddressInfo(id)\n      .then(account_info => {\n        \n        console.log(id, account_info);\n\n        let walletAddress = \"n/a\";\n\n        let info = account_info;\n        if(account_info[0]){\n          // override for CHAIN ACCOUNT\n          info = account_info[0]\n        }\n\n\n        if( info.currency.startsWith(\"VC_\") ){\n          // no address available\n          alert(\"Info for Account with id: \"+id+\" | Balance: \" + account_info.balance.accountBalance + \" \" + account_info.currency + \" | CustomerID: \" + account_info.customerId +\" No address for VC -> Use Deposit Function\");\n        } else {\n          walletAddress = account_info[0].address;              // hard coded test for QR\n          this.setState({\"acctAddress\":walletAddress});        // confirm setState for address of selected wallet\n\n          console.log(\"Implement QR Code visual display on Account Info Click.\");\n        }\n\n        // let walletAddress = account_info[0].address;\n        // this.setState({\"acctAddress\":walletAddress});        // confirm setState for address of selected wallet\n\n        // console.log(\"Implement QR Code visual display on Account Info Click.\");\n\n        alert(\"Info for Account with id: \"+id+\" | Balance: \" + account_info.balance.accountBalance + \" \" + account_info.currency + \" | CustomerID: \" + account_info.customerId + \" | Public Address: \" + walletAddress);\n        console.log(\"RETURN FROM TATUM LEDGER ADDRESS INFO LOOKUP:\" + walletAddress)\n      })\n  }\n\n  // manual show/refresh button for live orderBook trades\n  showTrades = () => {\n    showTrades()\n      .then(trades => {\n\n        console.log(trades);\n        let buyOrders = trades[0];\n        let sellOrders = trades[1];\n\n        this.setState({ buyOrders: buyOrders, sellOrders: sellOrders });\n        // this.setState({  });\n\n        console.log(\"THIS FUNCTION RETURN FROM CALL BCARD API FOR TRADES\")\n        // this.setState({users: users, numberOfUsers: users.length})\n      });\n  }\n\n\n  /************************** new User Functions *********************/\n\n  newUSDWallet = () => {\n\n    console.log(this.state.user)\n\n    // require user.uid for account identifier\n    newUSDWallet(this.state.user)\n      .then(result => {\n\n        console.log(result);\n        // use SetState for existing component\n        // this.setState({eth: prices.eth, prices: prices })   // eth setting legacy and can be removed\n\n        console.log(\"THIS CALL TO BCARD API FOR NEW USD - Onboarding 1.\")\n      });\n  }\n\n  newETHWallet = (tokenOverride) => {\n    console.log(this.state.user.uid);\n\n    console.log(tokenOverride);   // this will be an ETH CHAIN walletbut for tokenOverride ID-> Check Tatum https://docs.tatum.io/introduction/supported-blockchains for list of supported blockchains and sets that can be implemented out of the box.\n\n    let userID = this.state.user.uid;     // bcard internal ID\n    let custID = this.state.custId;\n\n    // require user.uid for account identifier\n    newETHWallet(userID, tokenOverride, custID)\n      .then(result => {\n\n        console.log(result);\n        // use SetState for existing component\n        // this.setState({eth: prices.eth, prices: prices })   // eth setting legacy and can be removed\n\n        console.log(\"THIS CALL TO BCARD API FOR NEW ETH Wallet & USDC (VISA) - Onboarding 2 & 3.\");\n\n        console.log(\"Will need to trigger an account reload or page refresh to display newly created accounts.\");\n        alert(\"Your account has been successsfully created.\");\n        window.location.reload();\n\n      });\n  }\n\n\n  onboardExecute = () => {\n    // consolidated onboarding function for new users who do not have a registered account in tatum system.\n    console.log(\"Execute New User Onboarding Function.\");\n\n    // confirm we have logged-in ID, otherwise, login first alert.\n    if(this.state.user.uid){\n\n      // first, FIAT(USD) wallet: \n      newUSDWallet(this.state.user.uid)\n      .then(result => {\n        console.log(result);\n        console.log(\"Complete - Onboarding 1.\");\n\n        // second, ETH wallet for ETH and ERC-20: \n        // require user.uid for account identifier\n        newETHWallet(this.state.user.uid)\n        .then(result => {\n\n          console.log(result, \"Hopefully wallet address is included in the return here, the rest can stay serverside or for later recall I think\");\n          // use SetState for existing component\n          // this.setState({eth: prices.eth, prices: prices })   // eth setting legacy and can be removed\n\n          console.log(\"Complete - Onboarding 2.\");\n\n          console.log(this.state);\n\n          console.log(\"This can reload now, but FUTURE should just set CustID in state\");\n          \n          alert('Congratulations, your accounts have been created.');\n          window.location.reload();\n        });\n      });\n\n    } else {\n      alert('Please login or register first.');\n    }\n    \n  }\n\n\n  /******* end for methods for app.js ********/\n\n\n  render() {\n    \n    return (\n      <div className=\"App\">\n        <Header></Header>\n        <div className=\"container mrgnbtm\">\n          <div className=\"row\">\n            <div className=\"col-md-4\">\n                {!this.state.user.uid &&\n                <div className=\"new-user\">\n\n                  <CreateUser \n                    user={this.state.user}\n                    onChangeForm={this.onChangeForm}\n                    createNewUser={this.createNewUser}\n                    loginUser={this.loginUser}\n                    signInWithPhoneNumber={this.signInWithPhoneNumber}\n                    >\n                  </CreateUser>\n\n                </div>\n              }\n\n                <div className=\"current-user\">  \n\n                  <GetUniqueCust state={this.state} getCustomers={this.getCustomers} />\n\n                  {/*<button \n                    className=\"btn btn-success\" \n                    onClick={() => {console.log(\"Test Account Creation Success\");this.createNewUser(\"aliceb@coolasice.ca\",\"123456\")}}>\n                      Signup Test -> No Repeat email      \n                  </button>*/}\n\n                  {/*<button \n                    className=\"btn btn-success\" \n                    onClick={() => {console.log(\"Test Login Admin\");this.loginUser(\"tom@tranmer.ca\",\"123456\")}}>\n                      Login Test -> ADMIN      \n                  </button>*/}\n                  {/*<button \n                    className=\"btn btn-warning\" \n                    onClick={() => {console.log(\"Test Login User\");this.loginUser(\"aliceb@coolasice.ca\",\"123456\")}}>\n                      Login Test -> USER      \n                  </button>\n                  <button \n                    className=\"btn btn-danger\" \n                    onClick={() => {console.log(\"Test Login Fail\");this.loginUser(\"tomjones\",\"whatsnew\")}}>\n                      Login Test -> FAIL      \n                  </button>*/}\n                  <hr />\n                  { this.state.user.uid &&\n                    <button \n                      className=\"btn btn-danger\" \n                      onClick={() => {console.log(\"Test Logout\");logout()}}>\n                        Logout      \n                    </button>\n                  }\n\n                  <h3>User Selected: </h3>\n                  <p><strong>user email: </strong> {this.state.user.email || \"not signed in\"}</p>\n                  <p><strong>Bcard UserId: </strong> <small>{this.state.user.uid || \"not signed in\"}</small></p>\n                  <p><strong>CustomerId: </strong> {this.state.custId || \"not selected\"}</p>\n                  <p>\n                    <strong>AccountId: </strong> {this.state.acctId || \"not selected\"}<br />\n                    <strong>Wallet Address: </strong> <small>{this.state.acctAddress || \"not selected\"}</small>\n                  </p>\n                  <p>Currency Default: { this.state.baseCurrency !== '' ? this.state.baseCurrency : \"getAccounts\" }</p>\n                  <p>FIAT Default: { this.state.baseCurrency } </p>\n                  <hr />\n                </div>\n\n                \n            </div>\n            <div className=\"col-md-8\">\n                <DisplayBoard\n                  // numberOfUsers={this.state.numberOfUsers}\n                  // customerId={this.state.custId}\n                  // balance={this.state.balance}\n\n                  // Account={this.Account}\n\n                  getAllUsers={this.getAllUsers}\n\n                  getPrices={this.getPrices}\n                  getAccount={this.getAccount}\n                  getMaster={this.getMaster}\n\n                  getBalance={this.getBalance}\n                  getCustomers={this.getCustomers}\n\n                  createTrade={this.createTrade}\n                  showTrades={this.showTrades}\n                  newBTCMaster={this.newBTCMaster}\n                  newBTCAccount={this.newBTCAccount}\n\n                  newWalletAddress={this.newWalletAddress}\n                  getEthAddress={this.getEthAddress}\n\n                  walletAddressInfo={this.walletAddressInfo}\n\n                  newWalletKey={this.newWalletKey}\n                  state={this.state}\n\n                  newUSDWallet={this.newUSDWallet}\n                  newETHWallet={this.newETHWallet}\n                  newXpubAccount={this.newXpubAccount}\n\n                  onboardExecute={this.onboardExecute}\n                >\n                </DisplayBoard>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col\">\n\n              <hr />\n                {this.state.balance > 0 && <h3><strong>USER BALANCE: ${this.state.balance} </strong></h3>}\n                <h6>Current Prices:</h6>\n                  <ul className=\"miniPrices\">\n                    {this.state.prices.eth && \n                      <li><strong>1 ETH</strong> = ${this.state.prices.eth} {this.state.baseCurrency} | </li>\n                    }\n                    {this.state.prices.btc && <li><strong>1 BTC</strong> = ${this.state.prices.btc} {this.state.baseCurrency} | </li> }\n                    {this.state.prices.bank && <li><strong>1 BANK</strong> = ${this.state.prices.bank} {this.state.baseCurrency} | </li> }\n\n                    {/*{this.state.prices.usd && <li>1 USD = ${this.state.prices.usd.toFixed(3)} {this.state.baseCurrency} | </li> }*/}\n                    {this.state.prices.chf && <li><strong>1 CHF</strong> = ${this.state.prices.chf} {this.state.baseCurrency} </li> }\n\n                  </ul>\n\n                <hr />\n\n            </div>\n          </div>\n        </div>\n\n        <div className=\"row mrgnbtm\">\n          <Users users={this.state.users}></Users>\n        </div>\n        <div className=\"container\">\n\n          { this.state.custId && \n            <div className=\"row\">\n              <TradeForm state={this.state} />\n              <FaucetForm state={this.state} />\n              <TransferForm state={this.state} />\n              <SwapForm state={this.state} />\n            </div>\n          }\n\n          {this.state.buyOrders.length > 0 &&\n            <div> \n            <TradeTableView title=\"Buy Orders\" trades={this.state.buyOrders} baseCurrency={this.state.baseCurrency} state={this.state} />\n            <hr />\n              \n\n            </div>\n          }\n          {this.state.sellOrders.length > 0 &&\n            <div> \n            <TradeTableView title=\"Sell Orders\" trades={this.state.sellOrders} state={this.state} />\n\n            <hr />\n              \n\n            </div>\n          }\n          \n          <hr />\n          <p><strong>Accounts of Selected User [Customer Account ID]: {this.state.custId || \"[not set]\"}</strong></p>\n\n          {this.state.custId && \n            <p><strong>Click <button type=\"btn\" onClick={ () => {} }>\n              Accounts ID\n            </button> Button to Select Account for Active -> <small>display detail info in panel above</small></strong></p>\n          }\n\n          {this.state.balance > -1 &&     // this.state.account_list.length > 0 &&\n\n            <table className=\"table table-bordered\">\n              <thead>\n                <tr>\n                  <th>ID</th>\n                  <th>currency</th>\n                  <th>token</th>\n                  <th>{this.state.baseCurrency} balance</th>\n                </tr>\n              </thead>\n              <tbody>\n              {this.state.account_list.map((account, index) => (\n                <tr data-index={index} key={account.id}>\n                  <td>\n                    <button \n                      type=\"btn\"\n                      onClick={() =>  {\n                        // also popup account info alert panel\n                        this.walletAddressInfo(account.id);\n                      }} >\n                      \n                      {account.id}\n                    </button></td>\n                  <td>{account.currency}</td>\n                  <td>{account.balance.accountBalance}</td>\n                  <td>{ convertToCAD(account.balance.accountBalance,account.currency,this.state) }</td>\n                </tr>\n                ))}\n              </tbody>\n            </table> \n\n          }\n\n          <hr />\n\n          \n\n\n\n\n\n          {/*{ ((this.state.custId === \"6357fa3d7511407e6d732fe4\") || (this.state.user.email === 'tom@tranmer.ca')) &&*/}\n          { ( adminWhitelist.includes(this.state.user.email) || adminWhitelist.includes(this.state.custId) ) &&\n\n          <div>\n\n            <p><strong>MASTER List of all Customers</strong> \n              {!this.state.custId && <span> - click <button>Get Customers</button> and then click <button>CustID</button> to select customer:</span>}\n            </p>\n          \n            <table className=\"table table-bordered\">\n              <thead>\n                <tr>\n                  <th>Customer ID (tatum)</th>\n                  <th>ExternalID (ours)</th>\n                  <th>customerCountry</th>\n                  <th>accountingCurrency</th>\n                </tr>\n              </thead>\n              <tbody>\n              {this.state.customers\n                  .sort((a,b) => a.externalId > b.externalId ? 1 : -1)\n                  .map((customer, index) => (\n                <tr data-index={index} key={customer.id}>\n                  <td><button \n                      className=\"btn\" \n                      onClick={() => {\n                          console.log(\"Can we use map here to map externalId to customerId? \");\n                          this.setState({extId: customer.externalId});\n                          this.setState({custId:customer.id});\n                          console.log(\"Also pull accounts list - same time\");\n                          this.getAccount(customer.id);\n                      }} >\n                        <strong>{customer.id}</strong>\n                  </button></td>\n                  <td>{customer.externalId}</td>\n                  <td><button \n                      className=\"btn\" \n                      onClick={(e) =>{} }>\n                      {customer.customerCountry}\n                  </button></td>\n                  <td>{customer.accountingCurrency}</td>\n                </tr>\n                ))}\n              </tbody>\n            </table>\n\n            <hr />\n\n            {this.state.customers.length > 1 && \n              <div>\n                <p><strong>Click ON <button>VC_Name</button> to display VC Detail:</strong></p>\n                <p><strong>{this.state.currentVC.name}</strong> with supply: {this.state.currentVC.supply}\n                <br/>with FIAT basePair {this.state.currentVC.basePair}:{this.state.currentVC.baseRate}</p>\n              </div>\n            }\n\n          </div>\n          }\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}